import{s as vt,n as wt,o as yt}from"../chunks/scheduler.d6170356.js";import{S as $t,i as kt,g as s,s as l,r as f,A as Tt,h as o,f as i,c as a,j as bt,u,x as r,k as Ye,y as xt,a as n,v as p,d,t as c,w as m}from"../chunks/index.fcd4cc08.js";import{H as h,E as Ht}from"../chunks/index.9f2da87a.js";function _t(Fe){let g,ie,ee,ne,w,le,y,ae,$,Ne="Tasks, or pipeline types, describe the ‚Äúshape‚Äù of each model‚Äôs API (inputs and outputs) and are used to determine which Inference API and widget we want to display for any given model.",se,b,De='<img class="block dark:hidden" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/tasks.png"/> <img class="hidden dark:block" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/hub/tasks-dark.png"/>',oe,k,Ve="This classification is relatively coarse-grained (you can always add more fine-grained task names in your model tags), so <strong>you should rarely have to create a new task</strong>. If you want to add support for a new task, this document explains the required steps.",re,T,fe,x,Be="Having a new task integrated into the Hub means that:",ue,H,Ge="<li>Users can search for all models ‚Äì and datasets ‚Äì of a given task.</li> <li>The Inference API supports the task.</li> <li>Users can try out models directly with the widget. üèÜ</li>",pe,_,Je="Note that you don‚Äôt need to implement all the steps by yourself. Adding a new task is a community effort, and multiple people can contribute. üßë‚Äçü§ù‚Äçüßë",de,P,Ke='To begin the process, open a new issue in the <a href="https://github.com/huggingface/huggingface_hub/issues" rel="nofollow">huggingface_hub</a> repository. Please use the ‚ÄúAdding a new task‚Äù template. ‚ö†Ô∏èBefore doing any coding, it‚Äôs suggested to go over this document. ‚ö†Ô∏è',ce,C,Qe="The first step is to upload a model for your proposed task. Once you have a model in the Hub for the new task, the next step is to enable it in the Inference API. There are three types of support that you can choose from:",me,L,Xe='<li>ü§ó using a <code>transformers</code> model</li> <li>üê≥ using a model from an <a href="./models-libraries">officially supported library</a></li> <li>üñ®Ô∏è using a model with custom inference code. This experimental option has downsides, so we recommend using one of the other approaches.</li>',ge,M,Ze="Finally, you can add a couple of UI elements, such as the task icon and the widget, that complete the integration in the Hub. üì∑",he,I,et="Some steps are orthogonal; you don‚Äôt need to do them in order. <strong>You don‚Äôt need the Inference API to add the icon.</strong> This means that, even if there isn‚Äôt full integration yet, users can still search for models of a given task.",be,A,ve,j,we,U,tt="If your model is a <code>transformers</code>-based model, there is a 1:1 mapping between the Inference API task and a <code>pipeline</code> class. Here are some example PRs from the <code>transformers</code> library:",ye,q,it='<li><a href="https://github.com/huggingface/transformers/pull/11598" rel="nofollow">Adding ImageClassificationPipeline</a></li> <li><a href="https://github.com/huggingface/transformers/pull/13342" rel="nofollow">Adding AudioClassificationPipeline</a></li>',$e,E,nt="Once the pipeline is submitted and deployed, you should be able to use the Inference API for your model.",ke,O,Te,R,lt='The Hub also supports over 10 open-source libraries in the <a href="https://github.com/huggingface/api-inference-community" rel="nofollow">Community Inference API</a>.',xe,z,at="<strong>Adding a new task is relatively straightforward and requires 2 PRs:</strong>",He,S,st='<li>PR 1: Add the new task to the API <a href="https://github.com/huggingface/api-inference-community/blob/main/api_inference_community/validation.py" rel="nofollow">validation</a>. This code ensures that the inference input is valid for a given task. Some PR examples:<ul><li><a href="https://github.com/huggingface/huggingface_hub/commit/5f040a117cf2a44d704621012eb41c01b103cfca#diff-db8bbac95c077540d79900384cfd524d451e629275cbb5de7a31fc1cd5d6c189" rel="nofollow">Add text-to-image</a></li> <li><a href="https://github.com/huggingface/huggingface_hub/commit/141e30588a2031d4d5798eaa2c1250d1d1b75905#diff-db8bbac95c077540d79900384cfd524d451e629275cbb5de7a31fc1cd5d6c189" rel="nofollow">Add audio-classification</a></li> <li><a href="https://github.com/huggingface/huggingface_hub/commit/dbea604a45df163d3f0b4b1d897e4b0fb951c650#diff-db8bbac95c077540d79900384cfd524d451e629275cbb5de7a31fc1cd5d6c189" rel="nofollow">Add tabular-classification</a></li></ul></li> <li>PR 2: Add the new task to a library docker image. You should also add a template to <a href="https://github.com/huggingface/api-inference-community/tree/main/docker_images/common/app/pipelines" rel="nofollow"><code>docker_images/common/app/pipelines</code></a> to facilitate integrating the task in other libraries. Here is an example PR:<ul><li><a href="https://github.com/huggingface/huggingface_hub/commit/6926fd9bec23cb963ce3f58ec53496083997f0fa#diff-3f1083a92ca0047b50f9ad2d04f0fe8dfaeee0e26ab71eb8835e365359a1d0dc" rel="nofollow">Add text-classification to spaCy</a></li></ul></li>',_e,W,Pe,Y,ot="<strong>My model is not supported by any library. Am I doomed? üò±</strong>",Ce,F,rt='We recommend using <a href="./spaces">Hugging Face Spaces</a> for these use cases.',Le,N,Me,D,ft="The Hub allows users to filter models by a given task. To do this, you need to add the task to several places. You‚Äôll also get to pick an icon for the task!",Ie,V,ut="<li>Add the task type to <code>Types.ts</code></li>",Ae,B,pt='In <a href="https://github.com/huggingface/huggingface.js/blob/main/packages/tasks/src/pipelines.ts" rel="nofollow">huggingface.js/packages/tasks/src/pipelines.ts</a>, you need to do a couple of things',je,G,dt='<li>Add the type to <code>PIPELINE_DATA</code>. Note that pipeline types are sorted into different categories (NLP, Audio, Computer Vision, and others).</li> <li>You will also need to fill minor changes in <a href="https://github.com/huggingface/huggingface.js/blob/main/packages/tasks/src/tasks/index.ts" rel="nofollow">huggingface.js/packages/tasks/src/tasks/index.ts</a></li>',Ue,v,ct="<li>Choose an icon</li>",qe,J,mt='You can add an icon in the <a href="https://github.com/huggingface/huggingface.js/tree/main/packages/widgets/src/lib/components/Icons" rel="nofollow">lib/Icons</a> directory. We usually choose carbon icons from <a href="https://icones.js.org/collection/carbon" rel="nofollow">https://icones.js.org/collection/carbon</a>. Also add the icon to <a href="https://github.com/huggingface/huggingface.js/blob/main/packages/widgets/src/lib/components/PipelineIcon/PipelineIcon.svelte" rel="nofollow">PipelineIcon</a>.',Ee,K,Oe,Q,gt='Once the task is in production, what could be more exciting than implementing some way for users to play directly with the models in their browser? ü§© You can find all the widgets <a href="https://huggingface.co/spaces/huggingfacejs/inference-widgets" rel="nofollow">here</a>.',Re,X,ht='If you would be interested in contributing with a widget, you can look at the <a href="https://github.com/huggingface/huggingface.js/tree/main/packages/widgets" rel="nofollow">implementation</a> of all the widgets.',ze,Z,Se,te,We;return w=new h({props:{title:"Tasks",local:"tasks",headingTag:"h1"}}),y=new h({props:{title:"What‚Äôs a task?",local:"whats-a-task",headingTag:"h2"}}),T=new h({props:{title:"Overview",local:"overview",headingTag:"h2"}}),A=new h({props:{title:"Adding new tasks to the Hub",local:"adding-new-tasks-to-the-hub",headingTag:"h2"}}),j=new h({props:{title:"Using Hugging Face transformers library",local:"using-hugging-face-transformers-library",headingTag:"h3"}}),O=new h({props:{title:"Using Community Inference API with a supported library",local:"using-community-inference-api-with-a-supported-library",headingTag:"h3"}}),W=new h({props:{title:"Adding Community Inference API for a quick prototype",local:"adding-community-inference-api-for-a-quick-prototype",headingTag:"h3"}}),N=new h({props:{title:"UI elements",local:"ui-elements",headingTag:"h3"}}),K=new h({props:{title:"Widget",local:"widget",headingTag:"h3"}}),Z=new Ht({props:{source:"https://github.com/huggingface/hub-docs/blob/main/docs/hub/models-tasks.md"}}),{c(){g=s("meta"),ie=l(),ee=s("p"),ne=l(),f(w.$$.fragment),le=l(),f(y.$$.fragment),ae=l(),$=s("p"),$.textContent=Ne,se=l(),b=s("div"),b.innerHTML=De,oe=l(),k=s("p"),k.innerHTML=Ve,re=l(),f(T.$$.fragment),fe=l(),x=s("p"),x.textContent=Be,ue=l(),H=s("ul"),H.innerHTML=Ge,pe=l(),_=s("p"),_.textContent=Je,de=l(),P=s("p"),P.innerHTML=Ke,ce=l(),C=s("p"),C.textContent=Qe,me=l(),L=s("ul"),L.innerHTML=Xe,ge=l(),M=s("p"),M.textContent=Ze,he=l(),I=s("p"),I.innerHTML=et,be=l(),f(A.$$.fragment),ve=l(),f(j.$$.fragment),we=l(),U=s("p"),U.innerHTML=tt,ye=l(),q=s("ul"),q.innerHTML=it,$e=l(),E=s("p"),E.textContent=nt,ke=l(),f(O.$$.fragment),Te=l(),R=s("p"),R.innerHTML=lt,xe=l(),z=s("p"),z.innerHTML=at,He=l(),S=s("ul"),S.innerHTML=st,_e=l(),f(W.$$.fragment),Pe=l(),Y=s("p"),Y.innerHTML=ot,Ce=l(),F=s("p"),F.innerHTML=rt,Le=l(),f(N.$$.fragment),Me=l(),D=s("p"),D.textContent=ft,Ie=l(),V=s("ol"),V.innerHTML=ut,Ae=l(),B=s("p"),B.innerHTML=pt,je=l(),G=s("ul"),G.innerHTML=dt,Ue=l(),v=s("ol"),v.innerHTML=ct,qe=l(),J=s("p"),J.innerHTML=mt,Ee=l(),f(K.$$.fragment),Oe=l(),Q=s("p"),Q.innerHTML=gt,Re=l(),X=s("p"),X.innerHTML=ht,ze=l(),f(Z.$$.fragment),Se=l(),te=s("p"),this.h()},l(e){const t=Tt("svelte-u9bgzb",document.head);g=o(t,"META",{name:!0,content:!0}),t.forEach(i),ie=a(e),ee=o(e,"P",{}),bt(ee).forEach(i),ne=a(e),u(w.$$.fragment,e),le=a(e),u(y.$$.fragment,e),ae=a(e),$=o(e,"P",{"data-svelte-h":!0}),r($)!=="svelte-1eg00uh"&&($.textContent=Ne),se=a(e),b=o(e,"DIV",{class:!0,"data-svelte-h":!0}),r(b)!=="svelte-1lsch2v"&&(b.innerHTML=De),oe=a(e),k=o(e,"P",{"data-svelte-h":!0}),r(k)!=="svelte-1w57hvb"&&(k.innerHTML=Ve),re=a(e),u(T.$$.fragment,e),fe=a(e),x=o(e,"P",{"data-svelte-h":!0}),r(x)!=="svelte-15av66z"&&(x.textContent=Be),ue=a(e),H=o(e,"UL",{"data-svelte-h":!0}),r(H)!=="svelte-8gq8pt"&&(H.innerHTML=Ge),pe=a(e),_=o(e,"P",{"data-svelte-h":!0}),r(_)!=="svelte-tuuwdi"&&(_.textContent=Je),de=a(e),P=o(e,"P",{"data-svelte-h":!0}),r(P)!=="svelte-1xa8q81"&&(P.innerHTML=Ke),ce=a(e),C=o(e,"P",{"data-svelte-h":!0}),r(C)!=="svelte-1ncnre8"&&(C.textContent=Qe),me=a(e),L=o(e,"UL",{"data-svelte-h":!0}),r(L)!=="svelte-iyd5dv"&&(L.innerHTML=Xe),ge=a(e),M=o(e,"P",{"data-svelte-h":!0}),r(M)!=="svelte-18hwl3y"&&(M.textContent=Ze),he=a(e),I=o(e,"P",{"data-svelte-h":!0}),r(I)!=="svelte-1qljhbq"&&(I.innerHTML=et),be=a(e),u(A.$$.fragment,e),ve=a(e),u(j.$$.fragment,e),we=a(e),U=o(e,"P",{"data-svelte-h":!0}),r(U)!=="svelte-tokqq5"&&(U.innerHTML=tt),ye=a(e),q=o(e,"UL",{"data-svelte-h":!0}),r(q)!=="svelte-m5tbso"&&(q.innerHTML=it),$e=a(e),E=o(e,"P",{"data-svelte-h":!0}),r(E)!=="svelte-1rm7guk"&&(E.textContent=nt),ke=a(e),u(O.$$.fragment,e),Te=a(e),R=o(e,"P",{"data-svelte-h":!0}),r(R)!=="svelte-u8woez"&&(R.innerHTML=lt),xe=a(e),z=o(e,"P",{"data-svelte-h":!0}),r(z)!=="svelte-pvk38g"&&(z.innerHTML=at),He=a(e),S=o(e,"UL",{"data-svelte-h":!0}),r(S)!=="svelte-9oxdcc"&&(S.innerHTML=st),_e=a(e),u(W.$$.fragment,e),Pe=a(e),Y=o(e,"P",{"data-svelte-h":!0}),r(Y)!=="svelte-1rw0of7"&&(Y.innerHTML=ot),Ce=a(e),F=o(e,"P",{"data-svelte-h":!0}),r(F)!=="svelte-18pm6ym"&&(F.innerHTML=rt),Le=a(e),u(N.$$.fragment,e),Me=a(e),D=o(e,"P",{"data-svelte-h":!0}),r(D)!=="svelte-p8vjj8"&&(D.textContent=ft),Ie=a(e),V=o(e,"OL",{"data-svelte-h":!0}),r(V)!=="svelte-1jsxx4s"&&(V.innerHTML=ut),Ae=a(e),B=o(e,"P",{"data-svelte-h":!0}),r(B)!=="svelte-1uzhqbb"&&(B.innerHTML=pt),je=a(e),G=o(e,"UL",{"data-svelte-h":!0}),r(G)!=="svelte-swx4ji"&&(G.innerHTML=dt),Ue=a(e),v=o(e,"OL",{start:!0,"data-svelte-h":!0}),r(v)!=="svelte-ppajzd"&&(v.innerHTML=ct),qe=a(e),J=o(e,"P",{"data-svelte-h":!0}),r(J)!=="svelte-170oba6"&&(J.innerHTML=mt),Ee=a(e),u(K.$$.fragment,e),Oe=a(e),Q=o(e,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-1xlspt7"&&(Q.innerHTML=gt),Re=a(e),X=o(e,"P",{"data-svelte-h":!0}),r(X)!=="svelte-z2f4h"&&(X.innerHTML=ht),ze=a(e),u(Z.$$.fragment,e),Se=a(e),te=o(e,"P",{}),bt(te).forEach(i),this.h()},h(){Ye(g,"name","hf:doc:metadata"),Ye(g,"content",Pt),Ye(b,"class","flex justify-center"),Ye(v,"start","2")},m(e,t){xt(document.head,g),n(e,ie,t),n(e,ee,t),n(e,ne,t),p(w,e,t),n(e,le,t),p(y,e,t),n(e,ae,t),n(e,$,t),n(e,se,t),n(e,b,t),n(e,oe,t),n(e,k,t),n(e,re,t),p(T,e,t),n(e,fe,t),n(e,x,t),n(e,ue,t),n(e,H,t),n(e,pe,t),n(e,_,t),n(e,de,t),n(e,P,t),n(e,ce,t),n(e,C,t),n(e,me,t),n(e,L,t),n(e,ge,t),n(e,M,t),n(e,he,t),n(e,I,t),n(e,be,t),p(A,e,t),n(e,ve,t),p(j,e,t),n(e,we,t),n(e,U,t),n(e,ye,t),n(e,q,t),n(e,$e,t),n(e,E,t),n(e,ke,t),p(O,e,t),n(e,Te,t),n(e,R,t),n(e,xe,t),n(e,z,t),n(e,He,t),n(e,S,t),n(e,_e,t),p(W,e,t),n(e,Pe,t),n(e,Y,t),n(e,Ce,t),n(e,F,t),n(e,Le,t),p(N,e,t),n(e,Me,t),n(e,D,t),n(e,Ie,t),n(e,V,t),n(e,Ae,t),n(e,B,t),n(e,je,t),n(e,G,t),n(e,Ue,t),n(e,v,t),n(e,qe,t),n(e,J,t),n(e,Ee,t),p(K,e,t),n(e,Oe,t),n(e,Q,t),n(e,Re,t),n(e,X,t),n(e,ze,t),p(Z,e,t),n(e,Se,t),n(e,te,t),We=!0},p:wt,i(e){We||(d(w.$$.fragment,e),d(y.$$.fragment,e),d(T.$$.fragment,e),d(A.$$.fragment,e),d(j.$$.fragment,e),d(O.$$.fragment,e),d(W.$$.fragment,e),d(N.$$.fragment,e),d(K.$$.fragment,e),d(Z.$$.fragment,e),We=!0)},o(e){c(w.$$.fragment,e),c(y.$$.fragment,e),c(T.$$.fragment,e),c(A.$$.fragment,e),c(j.$$.fragment,e),c(O.$$.fragment,e),c(W.$$.fragment,e),c(N.$$.fragment,e),c(K.$$.fragment,e),c(Z.$$.fragment,e),We=!1},d(e){e&&(i(ie),i(ee),i(ne),i(le),i(ae),i($),i(se),i(b),i(oe),i(k),i(re),i(fe),i(x),i(ue),i(H),i(pe),i(_),i(de),i(P),i(ce),i(C),i(me),i(L),i(ge),i(M),i(he),i(I),i(be),i(ve),i(we),i(U),i(ye),i(q),i($e),i(E),i(ke),i(Te),i(R),i(xe),i(z),i(He),i(S),i(_e),i(Pe),i(Y),i(Ce),i(F),i(Le),i(Me),i(D),i(Ie),i(V),i(Ae),i(B),i(je),i(G),i(Ue),i(v),i(qe),i(J),i(Ee),i(Oe),i(Q),i(Re),i(X),i(ze),i(Se),i(te)),i(g),m(w,e),m(y,e),m(T,e),m(A,e),m(j,e),m(O,e),m(W,e),m(N,e),m(K,e),m(Z,e)}}}const Pt='{"title":"Tasks","local":"tasks","sections":[{"title":"What‚Äôs a task?","local":"whats-a-task","sections":[],"depth":2},{"title":"Overview","local":"overview","sections":[],"depth":2},{"title":"Adding new tasks to the Hub","local":"adding-new-tasks-to-the-hub","sections":[{"title":"Using Hugging Face transformers library","local":"using-hugging-face-transformers-library","sections":[],"depth":3},{"title":"Using Community Inference API with a supported library","local":"using-community-inference-api-with-a-supported-library","sections":[],"depth":3},{"title":"Adding Community Inference API for a quick prototype","local":"adding-community-inference-api-for-a-quick-prototype","sections":[],"depth":3},{"title":"UI elements","local":"ui-elements","sections":[],"depth":3},{"title":"Widget","local":"widget","sections":[],"depth":3}],"depth":2}],"depth":1}';function Ct(Fe){return yt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class At extends $t{constructor(g){super(),kt(this,g,Ct,_t,vt,{})}}export{At as component};
