import{s as Si,o as Li,n as ep}from"../chunks/scheduler.bdbef820.js";import{S as Di,i as Pi,g as p,s as n,r as c,A as Ki,h as i,f as e,c as l,j as Hi,u as o,x as r,k as Ai,y as Oi,a as t,v as h,d as m,t as d,w as u}from"../chunks/index.c0aea24a.js";import{T as ap}from"../chunks/Tip.31005f7d.js";import{C as j}from"../chunks/CodeBlock.e814ab8d.js";import{H as M,E as sr}from"../chunks/index.89e522f3.js";function ar(b){let f,y='All processing methods in this guide return a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> object. Modification is not done in-place. Be careful about overriding your previous dataset!';return{c(){f=p("p"),f.innerHTML=y},l(g){f=i(g,"P",{"data-svelte-h":!0}),r(f)!=="svelte-1dr91l0"&&(f.innerHTML=y)},m(g,w){t(g,f,w)},p:ep,d(g){g&&e(f)}}}function er(b){let f,y="Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type <code>Value(&quot;int32&quot;)</code> to <code>Value(&quot;bool&quot;)</code> if the original column only contains ones and zeros.";return{c(){f=p("p"),f.innerHTML=y},l(g){f=i(g,"P",{"data-svelte-h":!0}),r(f)!=="svelte-1cevxd4"&&(f.innerHTML=y)},m(g,w){t(g,f,w)},p:ep,d(g){g&&e(f)}}}function tr(b){let f,y='🤗 Datasets also has a <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.remove_columns">remove_columns()</a> function which is faster because it doesn’t copy the data of the remaining columns.';return{c(){f=p("p"),f.innerHTML=y},l(g){f=i(g,"P",{"data-svelte-h":!0}),r(f)!=="svelte-8yfb9w"&&(f.innerHTML=y)},m(g,w){t(g,f,w)},p:ep,d(g){g&&e(f)}}}function nr(b){let f,y='Check out the <a href="use_with_tensorflow#using-totfdataset">Using Datasets with TensorFlow</a> guide for more details on how to efficiently create a TensorFlow dataset.';return{c(){f=p("p"),f.innerHTML=y},l(g){f=i(g,"P",{"data-svelte-h":!0}),r(f)!=="svelte-1lursdn"&&(f.innerHTML=y)},m(g,w){t(g,f,w)},p:ep,d(g){g&&e(f)}}}function lr(b){let f,y,g,w,$,Ye,_,tp="🤗 Datasets provides many tools for modifying the structure and content of a dataset. These tools are important for tidying up a dataset, creating additional columns, converting between features and formats, and much more.",Fe,I,np="This guide will show you how to:",Qe,C,lp="<li>Reorder rows and split the dataset.</li> <li>Rename and remove columns, and other common column operations.</li> <li>Apply processing functions to each example in a dataset.</li> <li>Concatenate datasets.</li> <li>Apply a custom formatting transform.</li> <li>Save and export processed datasets.</li>",We,k,pp='For more details specific to processing other dataset modalities, take a look at the <a class="underline decoration-pink-400 decoration-2 font-semibold" href="./audio_process">process audio dataset guide</a>, the <a class="underline decoration-yellow-400 decoration-2 font-semibold" href="./image_process">process image dataset guide</a>, or the <a class="underline decoration-green-400 decoration-2 font-semibold" href="./nlp_process">process text dataset guide</a>.',Be,Z,ip="The examples in this guide use the MRPC dataset, but feel free to load any dataset of your choice and follow along!",ze,v,qe,T,Ee,G,He,X,rp=`There are several functions for rearranging the structure of a dataset.
These functions are useful for selecting only the rows you want, creating train and test splits, and sharding very large datasets into smaller chunks.`,Ae,V,Se,R,cp='Use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.sort">sort()</a> to sort column values according to their numerical values. The provided column must be NumPy compatible.',Le,N,De,Y,op=`Under the hood, this creates a list of indices that is sorted according to values of the column.
This indices mapping is then used to access the right rows in the underlying Arrow table.`,Pe,F,Ke,Q,hp='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.shuffle">shuffle()</a> function randomly rearranges the column values. You can specify the <code>generator</code> parameter in this function to use a different <code>numpy.random.Generator</code> if you want more control over the algorithm used to shuffle the dataset.',Oe,W,st,B,mp=`Shuffling takes the list of indices <code>[0:len(my_dataset)]</code> and shuffles it to create an indices mapping.
However as soon as your <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> has an indices mapping, the speed can become 10x slower.
This is because there is an extra step to get the row index to read using the indices mapping, and most importantly, you aren’t reading contiguous chunks of data anymore.
To restore the speed, you’d need to rewrite the entire dataset on your disk again using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.flatten_indices">Dataset.flatten_indices()</a>, which removes the indices mapping.
Alternatively, you can switch to an <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> and leverage its fast approximate shuffling <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.shuffle">IterableDataset.shuffle()</a>:`,at,z,et,q,tt,E,dp='There are two options for filtering rows in a dataset: <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.select">select()</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.filter">filter()</a>.',nt,H,up='<li><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.select">select()</a> returns rows according to a list of indices:</li>',lt,A,pt,S,jp='<li><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.filter">filter()</a> returns rows that match a specified condition:</li>',it,L,rt,D,fp='<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.filter">filter()</a> can also filter by indices if you set <code>with_indices=True</code>:',ct,P,ot,K,gp="Unless the list of indices to keep is contiguous, those methods also create an indices mapping under the hood.",ht,O,mt,ss,Mp='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.train_test_split">train_test_split()</a> function creates train and test splits if your dataset doesn’t already have them. This allows you to adjust the relative proportions or an absolute number of samples in each split. In the example below, use the <code>test_size</code> parameter to create a test split that is 10% of the original dataset:',dt,as,ut,es,yp="The splits are shuffled by default, but you can set <code>shuffle=False</code> to prevent shuffling.",jt,ts,ft,ns,wp='🤗 Datasets supports sharding to divide a very large dataset into a predefined number of chunks. Specify the <code>num_shards</code> parameter in <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.shard">shard()</a> to determine the number of shards to split the dataset into. You’ll also need to provide the shard you want to return with the <code>index</code> parameter.',gt,ls,bp='For example, the <a href="https://huggingface.co/datasets/stanfordnlp/imdb" rel="nofollow">stanfordnlp/imdb</a> dataset has 25000 examples:',Mt,ps,yt,is,Tp="After sharding the dataset into four chunks, the first shard will only have 6250 examples:",wt,rs,bt,cs,Tt,os,Jp="The following functions allow you to modify the columns of a dataset. These functions are useful for renaming or removing columns, changing columns to a new set of features, and flattening nested column structures.",Jt,hs,Ut,ms,Up='Use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.rename_column">rename_column()</a> when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place.',xt,ds,xp='Provide <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.rename_column">rename_column()</a> with the name of the original column, and the new column name:',$t,us,_t,js,It,fs,$p='When you need to remove one or more columns, provide the column name to remove to the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.remove_columns">remove_columns()</a> function. Remove more than one column by providing a list of column names:',Ct,gs,kt,Ms,_p='Conversely, <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.select_columns">select_columns()</a> selects one or more columns to keep and removes the rest. This function takes either one or a list of column names:',Zt,ys,vt,ws,Gt,bs,Ip='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.cast">cast()</a> function transforms the feature type of one or more columns. This function accepts your new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a> as its argument. The example below demonstrates how to change the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.ClassLabel">ClassLabel</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Value">Value</a> features:',Xt,Ts,Vt,J,Rt,Js,Cp='Use the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.cast_column">cast_column()</a> function to change the feature type of a single column. Pass the column name and its new feature type as arguments:',Nt,Us,Yt,xs,Ft,$s,kp="Sometimes a column can be a nested structure of several types. Take a look at the nested structure below from the SQuAD dataset:",Qt,_s,Wt,Is,Zp='The <code>answers</code> field contains two subfields: <code>text</code> and <code>answer_start</code>. Use the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.flatten">flatten()</a> function to extract the subfields into their own separate columns:',Bt,Cs,zt,ks,vp="Notice how the subfields are now their own independent columns: <code>answers.text</code> and <code>answers.answer_start</code>.",qt,Zs,Et,vs,Gp='Some of the more powerful applications of 🤗 Datasets come from using the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> function. The primary purpose of <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> is to speed up processing functions. It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns.',Ht,Gs,Xp="In the following example, prefix each <code>sentence1</code> value in the dataset with <code>&#39;My sentence: &#39;</code>.",At,Xs,Vp="Start by creating a function that adds <code>&#39;My sentence: &#39;</code> to the beginning of each sentence. The function needs to accept and output a <code>dict</code>:",St,Vs,Lt,Rs,Rp='Now use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> to apply the <code>add_prefix</code> function to the entire dataset:',Dt,Ns,Pt,Ys,Np='Let’s take a look at another example, except this time, you’ll remove a column with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a>. When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed.',Kt,Fs,Yp='Specify the column to remove with the <code>remove_columns</code> parameter in <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a>:',Ot,Qs,sn,U,an,Ws,Fp='You can also use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> with indices if you set <code>with_indices=True</code>. The example below adds the index to the beginning of each sentence:',en,Bs,tn,zs,nn,qs,Qp='Multiprocessing significantly speeds up processing by parallelizing processes on the CPU. Set the <code>num_proc</code> parameter in <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> to set the number of processes to use:',ln,Es,pn,Hs,Wp='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> also works with the rank of the process if you set <code>with_rank=True</code>. This is analogous to the <code>with_indices</code> parameter. The <code>with_rank</code> parameter in the mapped function goes after the <code>index</code> one if it is already present.',rn,As,cn,Ss,Bp="The main use-case for rank is to parallelize computation across several GPUs. This requires setting <code>multiprocess.set_start_method(&quot;spawn&quot;)</code>. If you don’t you’ll receive the following CUDA error:",on,Ls,hn,Ds,mn,Ps,zp='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> function supports working with batches of examples. Operate on batches by setting <code>batched=True</code>. The default batch size is 1000, but you can adjust it with the <code>batch_size</code> parameter. Batch processing enables interesting applications such as splitting long sentences into shorter chunks and data augmentation.',dn,Ks,un,Os,qp="When examples are too long, you may want to split them into several smaller chunks. Begin by creating a function that:",jn,sa,Ep="<li><p>Splits the <code>sentence1</code> field into chunks of 50 characters.</p></li> <li><p>Stacks all the chunks together to create the new dataset.</p></li>",fn,aa,gn,ea,Hp='Apply the function with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a>:',Mn,ta,yn,na,Ap="Notice how the sentences are split into shorter chunks now, and there are more rows in the dataset.",wn,la,bn,pa,Tn,ia,Sp='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> function could also be used for data augmentation. The following example generates additional words for a masked token in a sentence.',Jn,ra,Lp='Load and use the <a href="https://huggingface.co/roberta-base" rel="nofollow">RoBERTA</a> model in 🤗 Transformers’ <a href="https://huggingface.co/transformers/main_classes/pipelines#transformers.FillMaskPipeline" rel="nofollow">FillMaskPipeline</a>:',Un,ca,xn,oa,Dp="Create a function to randomly select a word to mask in the sentence. The function should also return the original sentence and the top two replacements generated by RoBERTA.",$n,ha,_n,ma,Pp='Use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> to apply the function over the whole dataset:',In,da,Cn,ua,Kp="For each original sentence, RoBERTA augmented a random word with three alternatives. The original word <code>distorting</code> is supplemented by <code>withholding</code>, <code>suppressing</code>, and <code>destroying</code>.",kn,ja,Zn,fa,Op="Asynchronous functions are useful to call API endpoints in parallel, for example to download content like images or call a model endpoint.",vn,ga,si="You can define an asynchronous function using the <code>async</code> and <code>await</code> keywords, here is an example function to call a chat model from Hugging Face:",Gn,Ma,Xn,ya,ai="Asynchronous functions run in parallel, which accelerates the process a lot. The same code takes a lot more time if it’s run sequentially, because it does nothing while waiting for the model response. It is generally recommended to use <code>async</code> / <code>await</code> when you function has to wait for a response from an API for example, or if it downloads data and it can take some time.",Vn,wa,ei="Note the presence of a <code>Semaphore</code>: it sets the maximum number of queries that can run in parallel. It is recommended to use a <code>Semaphore</code> when calling APIs to avoid rate limit errors.",Rn,ba,ti='Let’s use it to call the <a href="https://huggingface.co/microsoft/Phi-3-mini-4k-instruct" rel="nofollow">microsoft/Phi-3-mini-4k-instruct</a> model and ask it to return the main topic of each math problem in the <a href="https://huggingface.co/Maxwell-Jia/AIME_2024" rel="nofollow">Maxwell-Jia/AIME_2024</a> dataset:',Nn,Ta,Yn,Ja,ni='Here, <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">Dataset.map()</a> runs many <code>get_topic</code> function asynchronously so it doesn’t have to wait for every single model response which would take a lot of time to do sequentially.',Fn,Ua,li='By default, <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">Dataset.map()</a> runs up to one thousand map functions in parallel, so don’t forget to set the maximum number of API calls that can run in parallel with a <code>Semaphore</code>, otherwise the model could return rate limit errors or overload. For advanced use cases, you can change the maximum number of queries in parallel in <code>datasets.config</code>.',Qn,xa,Wn,$a,pi='Many datasets have splits that can be processed simultaneously with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict.map">DatasetDict.map()</a>. For example, tokenize the <code>sentence1</code> field in the train and test split by:',Bn,_a,zn,Ia,qn,Ca,ii='When you use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> in a distributed setting, you should also use <a href="https://pytorch.org/docs/stable/distributed?highlight=barrier#torch.distributed.barrier" rel="nofollow">torch.distributed.barrier</a>. This ensures the main process performs the mapping, while the other processes load the results, thereby avoiding duplicate work.',En,ka,ri="The following example shows how you can use <code>torch.distributed.barrier</code> to synchronize the processes:",Hn,Za,An,va,Sn,Ga,ci="The <code>batch()</code> method allows you to group samples from the dataset into batches. This is particularly useful when you want to create batches of data for training or evaluation, especially when working with deep learning models.",Ln,Xa,oi="Here’s an example of how to use the <code>batch()</code> method:",Dn,Va,Pn,Ra,hi="The <code>batch()</code> method accepts the following parameters:",Kn,Na,mi="<li><code>batch_size</code> (<code>int</code>): The number of samples in each batch.</li> <li><code>drop_last_batch</code> (<code>bool</code>, defaults to <code>False</code>): Whether to drop the last incomplete batch if the dataset size is not divisible by the batch size.</li> <li><code>num_proc</code> (<code>int</code>, optional, defaults to <code>None</code>): The number of processes to use for multiprocessing. If None, no multiprocessing is used. This can significantly speed up batching for large datasets.</li>",On,Ya,di='Note that <code>Dataset.batch()</code> returns a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> where each item is a batch of multiple samples from the original dataset. If you want to process data in batches, you should use a batched <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> directly, which applies a function to batches but the output dataset is unbatched.',sl,Fa,al,Qa,ui='Separate datasets can be concatenated if they share the same column types. Concatenate datasets with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.concatenate_datasets">concatenate_datasets()</a>:',el,Wa,tl,Ba,ji="You can also concatenate two datasets horizontally by setting <code>axis=1</code> as long as the datasets have the same number of rows:",nl,za,ll,qa,pl,Ea,fi=`You can also mix several datasets together by taking alternating examples from each one to create a new dataset. This is known as <em>interleaving</em>, which is enabled by the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.interleave_datasets">interleave_datasets()</a> function. Both <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.interleave_datasets">interleave_datasets()</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.concatenate_datasets">concatenate_datasets()</a> work with regular <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> objects.
Refer to the <a href="./stream#interleave">Stream</a> guide for an example of how to interleave <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> objects.`,il,Ha,gi=`You can define sampling probabilities for each of the original datasets to specify how to interleave the datasets.
In this case, the new dataset is constructed by getting examples one by one from a random dataset until one of the datasets runs out of samples.`,rl,Aa,cl,Sa,Mi=`You can also specify the <code>stopping_strategy</code>. The default strategy, <code>first_exhausted</code>, is a subsampling strategy, i.e the dataset construction is stopped as soon one of the dataset runs out of samples.
You can specify <code>stopping_strategy=all_exhausted</code> to execute an oversampling strategy. In this case, the dataset construction is stopped as soon as every samples in every dataset has been added at least once. In practice, it means that if a dataset is exhausted, it will return to the beginning of this dataset until the stop criterion has been reached.
Note that if no sampling probabilities are specified, the new dataset will have <code>max_length_datasets*nb_dataset samples</code>.`,ol,La,hl,Da,ml,Pa,yi='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.with_format">with_format()</a> function changes the format of a column to be compatible with some common data formats. Specify the output you’d like in the <code>type</code> parameter. You can also choose which the columns you want to format using <code>columns=</code>. Formatting is applied on-the-fly.',dl,Ka,wi="For example, create PyTorch tensors by setting <code>type=&quot;torch&quot;</code>:",ul,Oa,jl,se,bi='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_format">set_format()</a> function also changes the format of a column, except it runs in-place:',fl,ae,gl,ee,Ti='If you need to reset the dataset to its original format, set the format to <code>None</code> (or use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.reset_format">reset_format()</a>):',Ml,te,yl,ne,wl,le,Ji="Several tensors or arrays formats are supported. It is generally recommended to use these formats instead of converting outputs of a dataset to tensors or arrays manually to avoid unnecessary data copies and accelerate data loading.",bl,pe,Ui="Here is the list of supported tensors or arrays formats:",Tl,ie,xi='<li>NumPy: format name is “numpy”, for more information see <a href="use_with_numpy">Using Datasets with NumPy</a></li> <li>PyTorch: format name is “torch”, for more information see <a href="use_with_pytorch">Using Datasets with PyTorch</a></li> <li>TensorFlow: format name is “tensorflow”, for more information see <a href="use_with_tensorflow">Using Datasets with TensorFlow</a></li> <li>JAX: format name is “jax”, for more information see <a href="use_with_jax">Using Datasets with JAX</a></li>',Jl,x,Ul,re,$i="When a dataset is formatted in a tensor or array format, all the data are formatted as tensors or arrays (except unsupported types like strings for example for PyTorch):",xl,ce,$l,oe,_l,he,_i="You can use a dataframes or tables format to optimize data loading and data processing, since they generally offer zero-copy operations and transforms written in low-level languages.",Il,me,Ii="Here is the list of supported dataframes or tables formats:",Cl,de,Ci='<li>Pandas: format name is “pandas”, for more information see <a href="use_with_pandas">Using Datasets with Pandas</a></li> <li>Polars: format name is “polars”, for more information see <a href="use_with_polars">Using Datasets with Polars</a></li> <li>PyArrow: format name is “arrow”, for more information see <a href="use_with_tensorflow">Using Datasets with PyArrow</a></li>',kl,ue,ki="When a dataset is formatted in a dataframe or table format, every dataset row or batches of rows is formatted as a dataframe or table, and dataset colums are formatted as a series or array:",Zl,je,vl,fe,Zi='Those formats make it possible to iterate on the data faster by avoiding data copies, and also enable faster data processing in <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.filter">filter()</a>:',Gl,ge,Xl,Me,Vl,ye,vi='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.with_transform">with_transform()</a> function applies a custom formatting transform on-the-fly. This function replaces any previously specified format. For example, you can use this function to tokenize and pad tokens on-the-fly. Tokenization is only applied when examples are accessed:',Rl,we,Nl,be,Gi='There is also <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_transform">set_transform()</a> which does the same but runs in-place.',Yl,Te,Xi='You can also use the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.with_transform">with_transform()</a> function to decode formats not supported by <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>. For example, the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a> feature uses <a href="https://python-soundfile.readthedocs.io/en/0.11.0/" rel="nofollow"><code>soundfile</code></a> - a fast and simple library to install - but it does not provide support for less common audio formats. Here is where you can use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_transform">set_transform()</a> to apply a custom decoding transform on the fly. You’re free to use any library you like to decode the audio files.',Fl,Je,Vi='The example below uses the <a href="http://pydub.com/" rel="nofollow"><code>pydub</code></a> package to open an audio format not supported by <code>soundfile</code>:',Ql,Ue,Wl,xe,Bl,$e,Ri='Once you are done processing your dataset, you can save and reuse it later with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.save_to_disk">save_to_disk()</a>.',zl,_e,Ni="Save your dataset by providing the path to the directory you wish to save it to:",ql,Ie,El,Ce,Yi='Use the <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_from_disk">load_from_disk()</a> function to reload the dataset:',Hl,ke,Al,Ze,Sl,ve,Fi="🤗 Datasets supports exporting as well so you can work with your dataset in other applications. The following table shows currently supported file formats you can export to:",Ll,Ge,Qi='<thead><tr><th>File type</th> <th>Export method</th></tr></thead> <tbody><tr><td>CSV</td> <td><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.to_csv">Dataset.to_csv()</a></td></tr> <tr><td>JSON</td> <td><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.to_json">Dataset.to_json()</a></td></tr> <tr><td>Parquet</td> <td><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.to_parquet">Dataset.to_parquet()</a></td></tr> <tr><td>SQL</td> <td><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.to_sql">Dataset.to_sql()</a></td></tr> <tr><td>In-memory Python object</td> <td><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.to_pandas">Dataset.to_pandas()</a>, <code>Dataset.to_polars()</code> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.to_dict">Dataset.to_dict()</a></td></tr></tbody>',Dl,Xe,Wi="For example, export your dataset to a CSV file like this:",Pl,Ve,Kl,Re,Ol,Ne,sp;return $=new M({props:{title:"Process",local:"process",headingTag:"h1"}}),v=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJueXUtbWxsJTJGZ2x1ZSUyMiUyQyUyMCUyMm1ycGMlMjIlMkMlMjBzcGxpdCUzRCUyMnRyYWluJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;nyu-mll/glue&quot;</span>, <span class="hljs-string">&quot;mrpc&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`,wrap:!1}}),T=new ap({props:{warning:!0,$$slots:{default:[ar]},$$scope:{ctx:b}}}),G=new M({props:{title:"Sort, shuffle, select, split, and shard",local:"sort-shuffle-select-split-and-shard",headingTag:"h2"}}),V=new M({props:{title:"Sort",local:"sort",headingTag:"h3"}}),N=new j({props:{code:"ZGF0YXNldCU1QiUyMmxhYmVsJTIyJTVEJTVCJTNBMTAlNUQlMEFzb3J0ZWRfZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQuc29ydCglMjJsYWJlbCUyMiklMEFzb3J0ZWRfZGF0YXNldCU1QiUyMmxhYmVsJTIyJTVEJTVCJTNBMTAlNUQlMEFzb3J0ZWRfZGF0YXNldCU1QiUyMmxhYmVsJTIyJTVEJTVCLTEwJTNBJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset = dataset.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset[<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset[<span class="hljs-string">&quot;label&quot;</span>][-<span class="hljs-number">10</span>:]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]`,wrap:!1}}),F=new M({props:{title:"Shuffle",local:"shuffle",headingTag:"h3"}}),W=new j({props:{code:"c2h1ZmZsZWRfZGF0YXNldCUyMCUzRCUyMHNvcnRlZF9kYXRhc2V0LnNodWZmbGUoc2VlZCUzRDQyKSUwQXNodWZmbGVkX2RhdGFzZXQlNUIlMjJsYWJlbCUyMiU1RCU1QiUzQTEwJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset = sorted_dataset.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset[<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`,wrap:!1}}),z=new j({props:{code:"aXRlcmFibGVfZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQudG9faXRlcmFibGVfZGF0YXNldChudW1fc2hhcmRzJTNEMTI4KSUwQXNodWZmbGVkX2l0ZXJhYmxlX2RhdGFzZXQlMjAlM0QlMjBpdGVyYWJsZV9kYXRhc2V0LnNodWZmbGUoc2VlZCUzRDQyJTJDJTIwYnVmZmVyX3NpemUlM0QxMDAwKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>iterable_dataset = dataset.to_iterable_dataset(num_shards=<span class="hljs-number">128</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_iterable_dataset = iterable_dataset.shuffle(seed=<span class="hljs-number">42</span>, buffer_size=<span class="hljs-number">1000</span>)`,wrap:!1}}),q=new M({props:{title:"Select and Filter",local:"select-and-filter",headingTag:"h3"}}),A=new j({props:{code:"c21hbGxfZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQuc2VsZWN0KCU1QjAlMkMlMjAxMCUyQyUyMDIwJTJDJTIwMzAlMkMlMjA0MCUyQyUyMDUwJTVEKSUwQWxlbihzbWFsbF9kYXRhc2V0KQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>small_dataset = dataset.select([<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(small_dataset)
<span class="hljs-number">6</span>`,wrap:!1}}),L=new j({props:{code:"c3RhcnRfd2l0aF9hciUyMCUzRCUyMGRhdGFzZXQuZmlsdGVyKGxhbWJkYSUyMGV4YW1wbGUlM0ElMjBleGFtcGxlJTVCJTIyc2VudGVuY2UxJTIyJTVELnN0YXJ0c3dpdGgoJTIyQXIlMjIpKSUwQWxlbihzdGFydF93aXRoX2FyKSUwQXN0YXJ0X3dpdGhfYXIlNUIlMjJzZW50ZW5jZTElMjIlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example: example[<span class="hljs-string">&quot;sentence1&quot;</span>].startswith(<span class="hljs-string">&quot;Ar&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(start_with_ar)
<span class="hljs-number">6</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar[<span class="hljs-string">&quot;sentence1&quot;</span>]
[<span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>,
<span class="hljs-string">&#x27;Arison said Mann may have been one of the pioneers of the world music movement and he had a deep love of Brazilian music .&#x27;</span>,
<span class="hljs-string">&#x27;Arts helped coach the youth on an eighth-grade football team at Lombardi Middle School in Green Bay .&#x27;</span>,
<span class="hljs-string">&#x27;Around 9 : 00 a.m. EDT ( 1300 GMT ) , the euro was at $ 1.1566 against the dollar , up 0.07 percent on the day .&#x27;</span>,
<span class="hljs-string">&quot;Arguing that the case was an isolated example , Canada has threatened a trade backlash if Tokyo &#x27;s ban is not justified on scientific grounds .&quot;</span>,
<span class="hljs-string">&#x27;Artists are worried the plan would harm those who need help most - performers who have a difficult time lining up shows .&#x27;</span>
]`,wrap:!1}}),P=new j({props:{code:"ZXZlbl9kYXRhc2V0JTIwJTNEJTIwZGF0YXNldC5maWx0ZXIobGFtYmRhJTIwZXhhbXBsZSUyQyUyMGlkeCUzQSUyMGlkeCUyMCUyNSUyMDIlMjAlM0QlM0QlMjAwJTJDJTIwd2l0aF9pbmRpY2VzJTNEVHJ1ZSklMEFsZW4oZXZlbl9kYXRhc2V0KSUwQWxlbihkYXRhc2V0KSUyMCUyRiUyMDI=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>even_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example, idx: idx % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(even_dataset)
<span class="hljs-number">1834</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(dataset) / <span class="hljs-number">2</span>
<span class="hljs-number">1834.0</span>`,wrap:!1}}),O=new M({props:{title:"Split",local:"split",headingTag:"h3"}}),as=new j({props:{code:"ZGF0YXNldC50cmFpbl90ZXN0X3NwbGl0KHRlc3Rfc2l6ZSUzRDAuMSklMEEwLjElMjAqJTIwbGVuKGRhdGFzZXQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.train_test_split(test_size=<span class="hljs-number">0.1</span>)
{<span class="hljs-string">&#x27;train&#x27;</span>: Dataset(schema: {<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>}, num_rows: <span class="hljs-number">3301</span>),
<span class="hljs-string">&#x27;test&#x27;</span>: Dataset(schema: {<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>}, num_rows: <span class="hljs-number">367</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.1</span> * <span class="hljs-built_in">len</span>(dataset)
<span class="hljs-number">366.8</span>`,wrap:!1}}),ts=new M({props:{title:"Shard",local:"shard",headingTag:"h3"}}),ps=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJzdGFuZm9yZG5scCUyRmltZGIlMjIlMkMlMjBzcGxpdCUzRCUyMnRyYWluJTIyKSUwQXByaW50KGRhdGFzZXQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;stanfordnlp/imdb&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(dataset)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})`,wrap:!1}}),rs=new j({props:{code:"ZGF0YXNldC5zaGFyZChudW1fc2hhcmRzJTNENCUyQyUyMGluZGV4JTNEMCklMEFwcmludCgyNTAwMCUyRjQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.shard(num_shards=<span class="hljs-number">4</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">6250</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-number">25000</span>/<span class="hljs-number">4</span>)
<span class="hljs-number">6250.0</span>`,wrap:!1}}),cs=new M({props:{title:"Rename, remove, cast, and flatten",local:"rename-remove-cast-and-flatten",headingTag:"h2"}}),hs=new M({props:{title:"Rename",local:"rename",headingTag:"h3"}}),us=new j({props:{code:"ZGF0YXNldCUwQWRhdGFzZXQlMjAlM0QlMjBkYXRhc2V0LnJlbmFtZV9jb2x1bW4oJTIyc2VudGVuY2UxJTIyJTJDJTIwJTIyc2VudGVuY2VBJTIyKSUwQWRhdGFzZXQlMjAlM0QlMjBkYXRhc2V0LnJlbmFtZV9jb2x1bW4oJTIyc2VudGVuY2UyJTIyJTJDJTIwJTIyc2VudGVuY2VCJTIyKSUwQWRhdGFzZXQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;sentence1&quot;</span>, <span class="hljs-string">&quot;sentenceA&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;sentence2&quot;</span>, <span class="hljs-string">&quot;sentenceB&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentenceA&#x27;</span>, <span class="hljs-string">&#x27;sentenceB&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`,wrap:!1}}),js=new M({props:{title:"Remove",local:"remove",headingTag:"h3"}}),gs=new j({props:{code:"ZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQucmVtb3ZlX2NvbHVtbnMoJTIybGFiZWwlMjIpJTBBZGF0YXNldCUwQWRhdGFzZXQlMjAlM0QlMjBkYXRhc2V0LnJlbW92ZV9jb2x1bW5zKCU1QiUyMnNlbnRlbmNlMSUyMiUyQyUyMCUyMnNlbnRlbmNlMiUyMiU1RCklMEFkYXRhc2V0",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns([<span class="hljs-string">&quot;sentence1&quot;</span>, <span class="hljs-string">&quot;sentence2&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`,wrap:!1}}),ys=new j({props:{code:"ZGF0YXNldCUwQWRhdGFzZXQlMjAlM0QlMjBkYXRhc2V0LnNlbGVjdF9jb2x1bW5zKCU1QidzZW50ZW5jZTEnJTJDJTIwJ3NlbnRlbmNlMiclMkMlMjAnaWR4JyU1RCklMEFkYXRhc2V0JTBBZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQuc2VsZWN0X2NvbHVtbnMoJ2lkeCcpJTBBZGF0YXNldA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.select_columns([<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.select_columns(<span class="hljs-string">&#x27;idx&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`,wrap:!1}}),ws=new M({props:{title:"Cast",local:"cast",headingTag:"h3"}}),Ts=new j({props:{code:"ZGF0YXNldC5mZWF0dXJlcyUwQSUwQWZyb20lMjBkYXRhc2V0cyUyMGltcG9ydCUyMENsYXNzTGFiZWwlMkMlMjBWYWx1ZSUwQW5ld19mZWF0dXJlcyUyMCUzRCUyMGRhdGFzZXQuZmVhdHVyZXMuY29weSgpJTBBbmV3X2ZlYXR1cmVzJTVCJTIybGFiZWwlMjIlNUQlMjAlM0QlMjBDbGFzc0xhYmVsKG5hbWVzJTNEJTVCJTIybmVnYXRpdmUlMjIlMkMlMjAlMjJwb3NpdGl2ZSUyMiU1RCklMEFuZXdfZmVhdHVyZXMlNUIlMjJpZHglMjIlNUQlMjAlM0QlMjBWYWx1ZSglMjJpbnQ2NCUyMiklMEFkYXRhc2V0JTIwJTNEJTIwZGF0YXNldC5jYXN0KG5ld19mZWF0dXJlcyklMEFkYXRhc2V0LmZlYXR1cmVz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = dataset.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;negative&quot;</span>, <span class="hljs-string">&quot;positive&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;idx&quot;</span>] = Value(<span class="hljs-string">&quot;int64&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),J=new ap({props:{$$slots:{default:[er]},$$scope:{ctx:b}}}),Us=new j({props:{code:"ZGF0YXNldC5mZWF0dXJlcyUwQSUwQWRhdGFzZXQlMjAlM0QlMjBkYXRhc2V0LmNhc3RfY29sdW1uKCUyMmF1ZGlvJTIyJTJDJTIwQXVkaW8oc2FtcGxpbmdfcmF0ZSUzRDE2MDAwKSklMEFkYXRhc2V0LmZlYXR1cmVz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">44100</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),xs=new M({props:{title:"Flatten",local:"flatten",headingTag:"h3"}}),_s=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJyYWpwdXJrYXIlMkZzcXVhZCUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBZGF0YXNldC5mZWF0dXJlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;rajpurkar/squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),Cs=new j({props:{code:"ZmxhdF9kYXRhc2V0JTIwJTNEJTIwZGF0YXNldC5mbGF0dGVuKCklMEFmbGF0X2RhdGFzZXQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>flat_dataset = dataset.flatten()
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_dataset
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
 num_rows: <span class="hljs-number">87599</span>
})`,wrap:!1}}),Zs=new M({props:{title:"Map",local:"map",headingTag:"h2"}}),Vs=new j({props:{code:"ZGVmJTIwYWRkX3ByZWZpeChleGFtcGxlKSUzQSUwQSUyMCUyMCUyMCUyMGV4YW1wbGUlNUIlMjJzZW50ZW5jZTElMjIlNUQlMjAlM0QlMjAnTXklMjBzZW50ZW5jZSUzQSUyMCclMjAlMkIlMjBleGFtcGxlJTVCJTIyc2VudGVuY2UxJTIyJTVEJTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwZXhhbXBsZQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;sentence1&quot;</span>] = <span class="hljs-string">&#x27;My sentence: &#x27;</span> + example[<span class="hljs-string">&quot;sentence1&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example`,wrap:!1}}),Ns=new j({props:{code:"dXBkYXRlZF9kYXRhc2V0JTIwJTNEJTIwc21hbGxfZGF0YXNldC5tYXAoYWRkX3ByZWZpeCklMEF1cGRhdGVkX2RhdGFzZXQlNUIlMjJzZW50ZW5jZTElMjIlNUQlNUIlM0E1JTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = small_dataset.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset[<span class="hljs-string">&quot;sentence1&quot;</span>][:<span class="hljs-number">5</span>]
[<span class="hljs-string">&#x27;My sentence: Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&quot;My sentence: Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>,
<span class="hljs-string">&#x27;My sentence: They had published an advertisement on the Internet on June 10 , offering the cargo for sale , he added .&#x27;</span>,
<span class="hljs-string">&#x27;My sentence: Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>,
]`,wrap:!1}}),Qs=new j({props:{code:"dXBkYXRlZF9kYXRhc2V0JTIwJTNEJTIwZGF0YXNldC5tYXAobGFtYmRhJTIwZXhhbXBsZSUzQSUyMCU3QiUyMm5ld19zZW50ZW5jZSUyMiUzQSUyMGV4YW1wbGUlNUIlMjJzZW50ZW5jZTElMjIlNUQlN0QlMkMlMjByZW1vdmVfY29sdW1ucyUzRCU1QiUyMnNlbnRlbmNlMSUyMiU1RCklMEF1cGRhdGVkX2RhdGFzZXQuY29sdW1uX25hbWVz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&quot;new_sentence&quot;</span>: example[<span class="hljs-string">&quot;sentence1&quot;</span>]}, remove_columns=[<span class="hljs-string">&quot;sentence1&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset.column_names
[<span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;new_sentence&#x27;</span>]`,wrap:!1}}),U=new ap({props:{$$slots:{default:[tr]},$$scope:{ctx:b}}}),Bs=new j({props:{code:"dXBkYXRlZF9kYXRhc2V0JTIwJTNEJTIwZGF0YXNldC5tYXAobGFtYmRhJTIwZXhhbXBsZSUyQyUyMGlkeCUzQSUyMCU3QiUyMnNlbnRlbmNlMiUyMiUzQSUyMGYlMjIlN0JpZHglN0QlM0ElMjAlMjIlMjAlMkIlMjBleGFtcGxlJTVCJTIyc2VudGVuY2UyJTIyJTVEJTdEJTJDJTIwd2l0aF9pbmRpY2VzJTNEVHJ1ZSklMEF1cGRhdGVkX2RhdGFzZXQlNUIlMjJzZW50ZW5jZTIlMjIlNUQlNUIlM0E1JTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example, idx: {<span class="hljs-string">&quot;sentence2&quot;</span>: <span class="hljs-string">f&quot;<span class="hljs-subst">{idx}</span>: &quot;</span> + example[<span class="hljs-string">&quot;sentence2&quot;</span>]}, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset[<span class="hljs-string">&quot;sentence2&quot;</span>][:<span class="hljs-number">5</span>]
[<span class="hljs-string">&#x27;0: Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&quot;1: Yucaipa bought Dominick &#x27;s in 1995 for $ 693 million and sold it to Safeway for $ 1.8 billion in 1998 .&quot;</span>,
 <span class="hljs-string">&quot;2: On June 10 , the ship &#x27;s owners had published an advertisement on the Internet , offering the explosives for sale .&quot;</span>,
 <span class="hljs-string">&#x27;3: Tab shares jumped 20 cents , or 4.6 % , to set a record closing high at A $ 4.57 .&#x27;</span>,
 <span class="hljs-string">&#x27;4: PG &amp; E Corp. shares jumped $ 1.63 or 8 percent to $ 21.03 on the New York Stock Exchange on Friday .&#x27;</span>
]`,wrap:!1}}),zs=new M({props:{title:"Multiprocessing",local:"multiprocessing",headingTag:"h3"}}),Es=new j({props:{code:"dXBkYXRlZF9kYXRhc2V0JTIwJTNEJTIwZGF0YXNldC5tYXAobGFtYmRhJTIwZXhhbXBsZSUyQyUyMGlkeCUzQSUyMCU3QiUyMnNlbnRlbmNlMiUyMiUzQSUyMGYlMjIlN0JpZHglN0QlM0ElMjAlMjIlMjAlMkIlMjBleGFtcGxlJTVCJTIyc2VudGVuY2UyJTIyJTVEJTdEJTJDJTIwd2l0aF9pbmRpY2VzJTNEVHJ1ZSUyQyUyMG51bV9wcm9jJTNENCk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example, idx: {<span class="hljs-string">&quot;sentence2&quot;</span>: <span class="hljs-string">f&quot;<span class="hljs-subst">{idx}</span>: &quot;</span> + example[<span class="hljs-string">&quot;sentence2&quot;</span>]}, with_indices=<span class="hljs-literal">True</span>, num_proc=<span class="hljs-number">4</span>)',wrap:!1}}),As=new j({props:{code:"aW1wb3J0JTIwdG9yY2glMEFmcm9tJTIwbXVsdGlwcm9jZXNzJTIwaW1wb3J0JTIwc2V0X3N0YXJ0X21ldGhvZCUwQWZyb20lMjB0cmFuc2Zvcm1lcnMlMjBpbXBvcnQlMjBBdXRvVG9rZW5pemVyJTJDJTIwQXV0b01vZGVsRm9yQ2F1c2FsTE0lMjAlMEFmcm9tJTIwZGF0YXNldHMlMjBpbXBvcnQlMjBsb2FkX2RhdGFzZXQlMEElMEElMjMlMjBHZXQlMjBhbiUyMGV4YW1wbGUlMjBkYXRhc2V0JTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJma2ElMkZhd2Vzb21lLWNoYXRncHQtcHJvbXB0cyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBJTBBJTIzJTIwR2V0JTIwYW4lMjBleGFtcGxlJTIwbW9kZWwlMjBhbmQlMjBpdHMlMjB0b2tlbml6ZXIlMjAlMEFtb2RlbCUyMCUzRCUyMEF1dG9Nb2RlbEZvckNhdXNhbExNLmZyb21fcHJldHJhaW5lZCglMjJRd2VuJTJGUXdlbjEuNS0wLjVCLUNoYXQlMjIpLmV2YWwoKSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMlF3ZW4lMkZRd2VuMS41LTAuNUItQ2hhdCUyMiklMEFkZWYlMjBncHVfY29tcHV0YXRpb24oYmF0Y2glMkMlMjByYW5rKSUzQSUwQSUyMCUyMCUyMCUyMCUyMyUyME1vdmUlMjB0aGUlMjBtb2RlbCUyMG9uJTIwdGhlJTIwcmlnaHQlMjBHUFUlMjBpZiUyMGl0J3MlMjBub3QlMjB0aGVyZSUyMGFscmVhZHklMEElMjAlMjAlMjAlMjBkZXZpY2UlMjAlM0QlMjBmJTIyY3VkYSUzQSU3QihyYW5rJTIwb3IlMjAwKSUyMCUyNSUyMHRvcmNoLmN1ZGEuZGV2aWNlX2NvdW50KCklN0QlMjIlMEElMjAlMjAlMjAlMjBtb2RlbC50byhkZXZpY2UpJTBBJTIwJTIwJTIwJTIwJTBBJTIwJTIwJTIwJTIwJTIzJTIwWW91ciUyMGJpZyUyMEdQVSUyMGNhbGwlMjBnb2VzJTIwaGVyZSUyQyUyMGZvciUyMGV4YW1wbGUlM0ElMEElMjAlMjAlMjAlMjBjaGF0cyUyMCUzRCUyMCU1QiU1QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCU3QiUyMnJvbGUlMjIlM0ElMjAlMjJzeXN0ZW0lMjIlMkMlMjAlMjJjb250ZW50JTIyJTNBJTIwJTIyWW91JTIwYXJlJTIwYSUyMGhlbHBmdWwlMjBhc3Npc3RhbnQuJTIyJTdEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTdCJTIycm9sZSUyMiUzQSUyMCUyMnVzZXIlMjIlMkMlMjAlMjJjb250ZW50JTIyJTNBJTIwcHJvbXB0JTdEJTBBJTIwJTIwJTIwJTIwJTVEJTIwZm9yJTIwcHJvbXB0JTIwaW4lMjBiYXRjaCU1QiUyMnByb21wdCUyMiU1RCU1RCUwQSUyMCUyMCUyMCUyMHRleHRzJTIwJTNEJTIwJTVCdG9rZW5pemVyLmFwcGx5X2NoYXRfdGVtcGxhdGUoJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwY2hhdCUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHRva2VuaXplJTNERmFsc2UlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBhZGRfZ2VuZXJhdGlvbl9wcm9tcHQlM0RUcnVlJTBBJTIwJTIwJTIwJTIwKSUyMGZvciUyMGNoYXQlMjBpbiUyMGNoYXRzJTVEJTBBJTIwJTIwJTIwJTIwbW9kZWxfaW5wdXRzJTIwJTNEJTIwdG9rZW5pemVyKHRleHRzJTJDJTIwcGFkZGluZyUzRFRydWUlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKS50byhkZXZpY2UpJTBBJTIwJTIwJTIwJTIwd2l0aCUyMHRvcmNoLm5vX2dyYWQoKSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG91dHB1dHMlMjAlM0QlMjBtb2RlbC5nZW5lcmF0ZSgqKm1vZGVsX2lucHV0cyUyQyUyMG1heF9uZXdfdG9rZW5zJTNENTEyKSUwQSUyMCUyMCUyMCUyMGJhdGNoJTVCJTIyb3V0cHV0JTIyJTVEJTIwJTNEJTIwdG9rZW5pemVyLmJhdGNoX2RlY29kZShvdXRwdXRzJTJDJTIwc2tpcF9zcGVjaWFsX3Rva2VucyUzRFRydWUpJTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwYmF0Y2glMEFpZiUyMF9fbmFtZV9fJTIwJTNEJTNEJTIwJTIyX19tYWluX18lMjIlM0ElMEElMjAlMjAlMjAlMjBzZXRfc3RhcnRfbWV0aG9kKCUyMnNwYXduJTIyKSUwQSUyMCUyMCUyMCUyMHVwZGF0ZWRfZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQubWFwKCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGdwdV9jb21wdXRhdGlvbiUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGJhdGNoZWQlM0RUcnVlJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwYmF0Y2hfc2l6ZSUzRDE2JTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwd2l0aF9yYW5rJTNEVHJ1ZSUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG51bV9wcm9jJTNEdG9yY2guY3VkYS5kZXZpY2VfY291bnQoKSUyQyUyMCUyMCUyMyUyMG9uZSUyMHByb2Nlc3MlMjBwZXIlMjBHUFUlMEElMjAlMjAlMjAlMjAp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> multiprocess <span class="hljs-keyword">import</span> set_start_method
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForCausalLM 
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Get an example dataset</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;fka/awesome-chatgpt-prompts&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Get an example model and its tokenizer </span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;Qwen/Qwen1.5-0.5B-Chat&quot;</span>).<span class="hljs-built_in">eval</span>()
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;Qwen/Qwen1.5-0.5B-Chat&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gpu_computation</span>(<span class="hljs-params">batch, rank</span>):
<span class="hljs-meta">... </span>    <span class="hljs-comment"># Move the model on the right GPU if it&#x27;s not there already</span>
<span class="hljs-meta">... </span>    device = <span class="hljs-string">f&quot;cuda:<span class="hljs-subst">{(rank <span class="hljs-keyword">or</span> <span class="hljs-number">0</span>) % torch.cuda.device_count()}</span>&quot;</span>
<span class="hljs-meta">... </span>    model.to(device)
<span class="hljs-meta">... </span>    
<span class="hljs-meta">... </span>    <span class="hljs-comment"># Your big GPU call goes here, for example:</span>
<span class="hljs-meta">... </span>    chats = [[
<span class="hljs-meta">... </span>        {<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;You are a helpful assistant.&quot;</span>},
<span class="hljs-meta">... </span>        {<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt}
<span class="hljs-meta">... </span>    ] <span class="hljs-keyword">for</span> prompt <span class="hljs-keyword">in</span> batch[<span class="hljs-string">&quot;prompt&quot;</span>]]
<span class="hljs-meta">... </span>    texts = [tokenizer.apply_chat_template(
<span class="hljs-meta">... </span>        chat,
<span class="hljs-meta">... </span>        tokenize=<span class="hljs-literal">False</span>,
<span class="hljs-meta">... </span>        add_generation_prompt=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>    ) <span class="hljs-keyword">for</span> chat <span class="hljs-keyword">in</span> chats]
<span class="hljs-meta">... </span>    model_inputs = tokenizer(texts, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).to(device)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>        outputs = model.generate(**model_inputs, max_new_tokens=<span class="hljs-number">512</span>)
<span class="hljs-meta">... </span>    batch[<span class="hljs-string">&quot;output&quot;</span>] = tokenizer.batch_decode(outputs, skip_special_tokens=<span class="hljs-literal">True</span>)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> batch
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:
<span class="hljs-meta">... </span>    set_start_method(<span class="hljs-string">&quot;spawn&quot;</span>)
<span class="hljs-meta">... </span>    updated_dataset = dataset.<span class="hljs-built_in">map</span>(
<span class="hljs-meta">... </span>        gpu_computation,
<span class="hljs-meta">... </span>        batched=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>        batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>        with_rank=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>        num_proc=torch.cuda.device_count(),  <span class="hljs-comment"># one process per GPU</span>
<span class="hljs-meta">... </span>    )`,wrap:!1}}),Ls=new j({props:{code:"UnVudGltZUVycm9yJTNBJTIwQ2Fubm90JTIwcmUtaW5pdGlhbGl6ZSUyMENVREElMjBpbiUyMGZvcmtlZCUyMHN1YnByb2Nlc3MuJTIwVG8lMjB1c2UlMjBDVURBJTIwd2l0aCUyMG11bHRpcHJvY2Vzc2luZyUyQyUyMHlvdSUyMG11c3QlMjB1c2UlMjB0aGUlMjAnc3Bhd24nJTIwc3RhcnQlMjBtZXRob2Qu",highlighted:'RuntimeError: Cannot re-initialize CUDA <span class="hljs-keyword">in</span> forked subprocess. To use CUDA with multiprocessing, you must use the <span class="hljs-string">&#x27;spawn&#x27;</span> start method.',wrap:!1}}),Ds=new M({props:{title:"Batch processing",local:"batch-processing",headingTag:"h3"}}),Ks=new M({props:{title:"Split long examples",local:"split-long-examples",headingTag:"h4"}}),aa=new j({props:{code:"ZGVmJTIwY2h1bmtfZXhhbXBsZXMoZXhhbXBsZXMpJTNBJTBBJTIwJTIwJTIwJTIwY2h1bmtzJTIwJTNEJTIwJTVCJTVEJTBBJTIwJTIwJTIwJTIwZm9yJTIwc2VudGVuY2UlMjBpbiUyMGV4YW1wbGVzJTVCJTIyc2VudGVuY2UxJTIyJTVEJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwY2h1bmtzJTIwJTJCJTNEJTIwJTVCc2VudGVuY2UlNUJpJTNBaSUyMCUyQiUyMDUwJTVEJTIwZm9yJTIwaSUyMGluJTIwcmFuZ2UoMCUyQyUyMGxlbihzZW50ZW5jZSklMkMlMjA1MCklNUQlMEElMjAlMjAlMjAlMjByZXR1cm4lMjAlN0IlMjJjaHVua3MlMjIlM0ElMjBjaHVua3MlN0Q=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">chunk_examples</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    chunks = []
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;sentence1&quot;</span>]:
<span class="hljs-meta">... </span>        chunks += [sentence[i:i + <span class="hljs-number">50</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(sentence), <span class="hljs-number">50</span>)]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;chunks&quot;</span>: chunks}`,wrap:!1}}),ta=new j({props:{code:"Y2h1bmtlZF9kYXRhc2V0JTIwJTNEJTIwZGF0YXNldC5tYXAoY2h1bmtfZXhhbXBsZXMlMkMlMjBiYXRjaGVkJTNEVHJ1ZSUyQyUyMHJlbW92ZV9jb2x1bW5zJTNEZGF0YXNldC5jb2x1bW5fbmFtZXMpJTBBY2h1bmtlZF9kYXRhc2V0JTVCJTNBMTAlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset = dataset.<span class="hljs-built_in">map</span>(chunk_examples, batched=<span class="hljs-literal">True</span>, remove_columns=dataset.column_names)
<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset[:<span class="hljs-number">10</span>]
{<span class="hljs-string">&#x27;chunks&#x27;</span>: [<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the &#x27;</span>,
            <span class="hljs-string">&#x27;witness &quot; , of deliberately distorting his evidenc&#x27;</span>,
            <span class="hljs-string">&#x27;e .&#x27;</span>,
            <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain&quot;</span>,
            <span class="hljs-string">&#x27; to Safeway in 1998 for $ 2.5 billion .&#x27;</span>,
            <span class="hljs-string">&#x27;They had published an advertisement on the Interne&#x27;</span>,
            <span class="hljs-string">&#x27;t on June 10 , offering the cargo for sale , he ad&#x27;</span>,
            <span class="hljs-string">&#x27;ded .&#x27;</span>,
            <span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or&#x27;</span>,
            <span class="hljs-string">&#x27; 4.4 % , at A $ 4.56 , having earlier set a record&#x27;</span>]}`,wrap:!1}}),la=new j({props:{code:"ZGF0YXNldCUwQWNodW5rZWRfZGF0YXNldA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
 features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
 num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset
Dataset({
    features: [<span class="hljs-string">&#x27;chunks&#x27;</span>],
    num_rows: <span class="hljs-number">10470</span>
})`,wrap:!1}}),pa=new M({props:{title:"Data augmentation",local:"data-augmentation",headingTag:"h4"}}),ca=new j({props:{code:"ZnJvbSUyMHJhbmRvbSUyMGltcG9ydCUyMHJhbmRpbnQlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwcGlwZWxpbmUlMEElMEFmaWxsbWFzayUyMCUzRCUyMHBpcGVsaW5lKCUyMmZpbGwtbWFzayUyMiUyQyUyMG1vZGVsJTNEJTIycm9iZXJ0YS1iYXNlJTIyKSUwQW1hc2tfdG9rZW4lMjAlM0QlMjBmaWxsbWFzay50b2tlbml6ZXIubWFza190b2tlbiUwQXNtYWxsZXJfZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQuZmlsdGVyKGxhbWJkYSUyMGUlMkMlMjBpJTNBJTIwaSUzQzEwMCUyQyUyMHdpdGhfaW5kaWNlcyUzRFRydWUp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>fillmask = pipeline(<span class="hljs-string">&quot;fill-mask&quot;</span>, model=<span class="hljs-string">&quot;roberta-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask_token = fillmask.tokenizer.mask_token
<span class="hljs-meta">&gt;&gt;&gt; </span>smaller_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> e, i: i&lt;<span class="hljs-number">100</span>, with_indices=<span class="hljs-literal">True</span>)`,wrap:!1}}),ha=new j({props:{code:"ZGVmJTIwYXVnbWVudF9kYXRhKGV4YW1wbGVzKSUzQSUwQSUyMCUyMCUyMCUyMG91dHB1dHMlMjAlM0QlMjAlNUIlNUQlMEElMjAlMjAlMjAlMjBmb3IlMjBzZW50ZW5jZSUyMGluJTIwZXhhbXBsZXMlNUIlMjJzZW50ZW5jZTElMjIlNUQlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjB3b3JkcyUyMCUzRCUyMHNlbnRlbmNlLnNwbGl0KCclMjAnKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMEslMjAlM0QlMjByYW5kaW50KDElMkMlMjBsZW4od29yZHMpLTEpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwbWFza2VkX3NlbnRlbmNlJTIwJTNEJTIwJTIyJTIwJTIyLmpvaW4od29yZHMlNUIlM0FLJTVEJTIwJTIwJTJCJTIwJTVCbWFza190b2tlbiU1RCUyMCUyQiUyMHdvcmRzJTVCSyUyQjElM0ElNUQpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcHJlZGljdGlvbnMlMjAlM0QlMjBmaWxsbWFzayhtYXNrZWRfc2VudGVuY2UpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwYXVnbWVudGVkX3NlcXVlbmNlcyUyMCUzRCUyMCU1QnByZWRpY3Rpb25zJTVCaSU1RCU1QiUyMnNlcXVlbmNlJTIyJTVEJTIwZm9yJTIwaSUyMGluJTIwcmFuZ2UoMyklNUQlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBvdXRwdXRzJTIwJTJCJTNEJTIwJTVCc2VudGVuY2UlNUQlMjAlMkIlMjBhdWdtZW50ZWRfc2VxdWVuY2VzJTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwJTdCJTIyZGF0YSUyMiUzQSUyMG91dHB1dHMlN0Q=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">augment_data</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    outputs = []
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;sentence1&quot;</span>]:
<span class="hljs-meta">... </span>        words = sentence.split(<span class="hljs-string">&#x27; &#x27;</span>)
<span class="hljs-meta">... </span>        K = randint(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(words)-<span class="hljs-number">1</span>)
<span class="hljs-meta">... </span>        masked_sentence = <span class="hljs-string">&quot; &quot;</span>.join(words[:K]  + [mask_token] + words[K+<span class="hljs-number">1</span>:])
<span class="hljs-meta">... </span>        predictions = fillmask(masked_sentence)
<span class="hljs-meta">... </span>        augmented_sequences = [predictions[i][<span class="hljs-string">&quot;sequence&quot;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]
<span class="hljs-meta">... </span>        outputs += [sentence] + augmented_sequences
...
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;data&quot;</span>: outputs}`,wrap:!1}}),da=new j({props:{code:"YXVnbWVudGVkX2RhdGFzZXQlMjAlM0QlMjBzbWFsbGVyX2RhdGFzZXQubWFwKGF1Z21lbnRfZGF0YSUyQyUyMGJhdGNoZWQlM0RUcnVlJTJDJTIwcmVtb3ZlX2NvbHVtbnMlM0RkYXRhc2V0LmNvbHVtbl9uYW1lcyUyQyUyMGJhdGNoX3NpemUlM0Q4KSUwQWF1Z21lbnRlZF9kYXRhc2V0JTVCJTNBOSU1RCU1QiUyMmRhdGElMjIlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>augmented_dataset = smaller_dataset.<span class="hljs-built_in">map</span>(augment_data, batched=<span class="hljs-literal">True</span>, remove_columns=dataset.column_names, batch_size=<span class="hljs-number">8</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>augmented_dataset[:<span class="hljs-number">9</span>][<span class="hljs-string">&quot;data&quot;</span>]
[<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately withholding his evidence.&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately suppressing his evidence.&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately destroying his evidence.&#x27;</span>,
 <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>,
 <span class="hljs-string">&#x27;Yucaipa owned Dominick Stores before selling the chain to Safeway in 1998 for $ 2.5 billion.&#x27;</span>,
 <span class="hljs-string">&quot;Yucaipa owned Dominick&#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion.&quot;</span>,
 <span class="hljs-string">&#x27;Yucaipa owned Dominick Pizza before selling the chain to Safeway in 1998 for $ 2.5 billion.&#x27;</span>
]`,wrap:!1}}),ja=new M({props:{title:"Asynchronous processing",local:"asynchronous-processing",headingTag:"h3"}}),Ma=new j({props:{code:"aW1wb3J0JTIwYWlvaHR0cCUwQWltcG9ydCUyMGFzeW5jaW8lMEFmcm9tJTIwaHVnZ2luZ2ZhY2VfaHViJTIwaW1wb3J0JTIwZ2V0X3Rva2VuJTBBc2VtJTIwJTNEJTIwYXN5bmNpby5TZW1hcGhvcmUoMjApJTIwJTIwJTIzJTIwbWF4JTIwbnVtYmVyJTIwb2YlMjBzaW11bHRhbmVvdXMlMjBxdWVyaWVzJTBBYXN5bmMlMjBkZWYlMjBxdWVyeV9tb2RlbChtb2RlbCUyQyUyMHByb21wdCklM0ElMEElMjAlMjAlMjAlMjBhcGlfdXJsJTIwJTNEJTIwZiUyMmh0dHBzJTNBJTJGJTJGYXBpLWluZmVyZW5jZS5odWdnaW5nZmFjZS5jbyUyRm1vZGVscyUyRiU3Qm1vZGVsJTdEJTJGdjElMkZjaGF0JTJGY29tcGxldGlvbnMlMjIlMEElMjAlMjAlMjAlMjBoZWFkZXJzJTIwJTNEJTIwJTdCJTIyQXV0aG9yaXphdGlvbiUyMiUzQSUyMGYlMjJCZWFyZXIlMjAlN0JnZXRfdG9rZW4oKSU3RCUyMiUyQyUyMCUyMkNvbnRlbnQtVHlwZSUyMiUzQSUyMCUyMmFwcGxpY2F0aW9uJTJGanNvbiUyMiU3RCUwQSUyMCUyMCUyMCUyMGpzb24lMjAlM0QlMjAlN0IlMjJtZXNzYWdlcyUyMiUzQSUyMCU1QiU3QiUyMnJvbGUlMjIlM0ElMjAlMjJ1c2VyJTIyJTJDJTIwJTIyY29udGVudCUyMiUzQSUyMHByb21wdCU3RCU1RCUyQyUyMCUyMm1heF90b2tlbnMlMjIlM0ElMjAyMCUyQyUyMCUyMnNlZWQlMjIlM0ElMjA0MiU3RCUwQSUyMCUyMCUyMCUyMGFzeW5jJTIwd2l0aCUyMHNlbSUyQyUyMGFpb2h0dHAuQ2xpZW50U2Vzc2lvbigpJTIwYXMlMjBzZXNzaW9uJTJDJTIwc2Vzc2lvbi5wb3N0KGFwaV91cmwlMkMlMjBoZWFkZXJzJTNEaGVhZGVycyUyQyUyMGpzb24lM0Rqc29uKSUyMGFzJTIwcmVzcG9uc2UlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBvdXRwdXQlMjAlM0QlMjBhd2FpdCUyMHJlc3BvbnNlLmpzb24oKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHJldHVybiUyMCU3QiUyMk91dHB1dCUyMiUzQSUyMG91dHB1dCU1QiUyMmNob2ljZXMlMjIlNUQlNUIwJTVEJTVCJTIybWVzc2FnZSUyMiU1RCU1QiUyMmNvbnRlbnQlMjIlNUQlN0Q=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> aiohttp
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> asyncio
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> get_token
<span class="hljs-meta">&gt;&gt;&gt; </span>sem = asyncio.Semaphore(<span class="hljs-number">20</span>)  <span class="hljs-comment"># max number of simultaneous queries</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">query_model</span>(<span class="hljs-params">model, prompt</span>):
<span class="hljs-meta">... </span>    api_url = <span class="hljs-string">f&quot;https://api-inference.huggingface.co/models/<span class="hljs-subst">{model}</span>/v1/chat/completions&quot;</span>
<span class="hljs-meta">... </span>    headers = {<span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">f&quot;Bearer <span class="hljs-subst">{get_token()}</span>&quot;</span>, <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>}
<span class="hljs-meta">... </span>    json = {<span class="hljs-string">&quot;messages&quot;</span>: [{<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt}], <span class="hljs-string">&quot;max_tokens&quot;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&quot;seed&quot;</span>: <span class="hljs-number">42</span>}
<span class="hljs-meta">... </span>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> sem, aiohttp.ClientSession() <span class="hljs-keyword">as</span> session, session.post(api_url, headers=headers, json=json) <span class="hljs-keyword">as</span> response:
<span class="hljs-meta">... </span>        output = <span class="hljs-keyword">await</span> response.json()
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;Output&quot;</span>: output[<span class="hljs-string">&quot;choices&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;message&quot;</span>][<span class="hljs-string">&quot;content&quot;</span>]}`,wrap:!1}}),Ta=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyTWF4d2VsbC1KaWElMkZBSU1FXzIwMjQlMjIlMkMlMjBzcGxpdCUzRCUyMnRyYWluJTIyKSUwQW1vZGVsJTIwJTNEJTIwJTIybWljcm9zb2Z0JTJGUGhpLTMtbWluaS00ay1pbnN0cnVjdCUyMiUwQXByb21wdCUyMCUzRCUyMCdXaGF0JTIwaXMlMjB0aGlzJTIwdGV4dCUyMG1haW5seSUyMGFib3V0JTIwJTNGJTIwSGVyZSUyMGlzJTIwdGhlJTIwdGV4dCUzQSU1Q24lNUNuJTYwJTYwJTYwJTVDbiU3QlByb2JsZW0lN0QlNUNuJTYwJTYwJTYwJTVDbiU1Q25SZXBseSUyMHVzaW5nJTIwb25lJTIwb3IlMjB0d28lMjB3b3JkcyUyMG1heCUyQyUyMGUuZy4lMjAlMjJUaGUlMjBtYWluJTIwdG9waWMlMjBpcyUyMExpbmVhciUyMEFsZ2VicmElMjIuJyUwQWFzeW5jJTIwZGVmJTIwZ2V0X3RvcGljKGV4YW1wbGUpJTNBJTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwYXdhaXQlMjBxdWVyeV9tb2RlbChtb2RlbCUyQyUyMHByb21wdC5mb3JtYXQoUHJvYmxlbSUzRGV4YW1wbGUlNUInUHJvYmxlbSclNUQpKSUwQWRzJTIwJTNEJTIwZHMubWFwKGdldF90b3BpYyklMEFkcyU1QjAlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;Maxwell-Jia/AIME_2024&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = <span class="hljs-string">&quot;microsoft/Phi-3-mini-4k-instruct&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>prompt = <span class="hljs-string">&#x27;What is this text mainly about ? Here is the text:\\n\\n\`\`\`\\n{Problem}\\n\`\`\`\\n\\nReply using one or two words max, e.g. &quot;The main topic is Linear Algebra&quot;.&#x27;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_topic</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> query_model(model, prompt.<span class="hljs-built_in">format</span>(Problem=example[<span class="hljs-string">&#x27;Problem&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(get_topic)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;ID&#x27;</span>: <span class="hljs-string">&#x27;2024-II-4&#x27;</span>,
 <span class="hljs-string">&#x27;Problem&#x27;</span>: <span class="hljs-string">&#x27;Let $x,y$ and $z$ be positive real numbers that...&#x27;</span>,
 <span class="hljs-string">&#x27;Solution&#x27;</span>: <span class="hljs-string">&#x27;Denote $\\\\log_2(x) = a$, $\\\\log_2(y) = b$, and...,
 &#x27;</span>Answe<span class="hljs-string">r&#x27;: 33,
 &#x27;</span>Output<span class="hljs-string">&#x27;: &#x27;</span>The main topic <span class="hljs-keyword">is</span> Logarithms.<span class="hljs-string">&#x27;}</span>`,wrap:!1}}),xa=new M({props:{title:"Process multiple splits",local:"process-multiple-splits",headingTag:"h3"}}),_a=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCgnbnl1LW1sbCUyRmdsdWUnJTJDJTIwJ21ycGMnKSUwQWVuY29kZWRfZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQubWFwKGxhbWJkYSUyMGV4YW1wbGVzJTNBJTIwdG9rZW5pemVyKGV4YW1wbGVzJTVCJTIyc2VudGVuY2UxJTIyJTVEKSUyQyUyMGJhdGNoZWQlM0RUcnVlKSUwQWVuY29kZWRfZGF0YXNldCU1QiUyMnRyYWluJTIyJTVEJTVCMCU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-comment"># load all the splits</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;nyu-mll/glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> examples: tokenizer(examples[<span class="hljs-string">&quot;sentence1&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-number">0</span>,
<span class="hljs-string">&#x27;input_ids&#x27;</span>: [  <span class="hljs-number">101</span>,  <span class="hljs-number">7277</span>,  <span class="hljs-number">2180</span>,  <span class="hljs-number">5303</span>,  <span class="hljs-number">4806</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">1711</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">2292</span>, <span class="hljs-number">1119</span>,  <span class="hljs-number">1270</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">7737</span>,   <span class="hljs-number">107</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">1104</span>,  <span class="hljs-number">9938</span>, <span class="hljs-number">4267</span>, <span class="hljs-number">12223</span>, <span class="hljs-number">21811</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">2554</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>],
<span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
<span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
}`,wrap:!1}}),Ia=new M({props:{title:"Distributed usage",local:"distributed-usage",headingTag:"h3"}}),Za=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUwQWltcG9ydCUyMHRvcmNoLmRpc3RyaWJ1dGVkJTBBJTBBZGF0YXNldDElMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJhJTIyJTNBJTIwJTVCMCUyQyUyMDElMkMlMjAyJTVEJTdEKSUwQSUwQWlmJTIwdHJhaW5pbmdfYXJncy5sb2NhbF9yYW5rJTIwJTNFJTIwMCUzQSUwQSUyMCUyMCUyMCUyMHByaW50KCUyMldhaXRpbmclMjBmb3IlMjBtYWluJTIwcHJvY2VzcyUyMHRvJTIwcGVyZm9ybSUyMHRoZSUyMG1hcHBpbmclMjIpJTBBJTIwJTIwJTIwJTIwdG9yY2guZGlzdHJpYnV0ZWQuYmFycmllcigpJTBBJTBBZGF0YXNldDIlMjAlM0QlMjBkYXRhc2V0MS5tYXAobGFtYmRhJTIweCUzQSUyMCU3QiUyMmElMjIlM0ElMjB4JTVCJTIyYSUyMiU1RCUyMCUyQiUyMDElN0QpJTBBJTBBaWYlMjB0cmFpbmluZ19hcmdzLmxvY2FsX3JhbmslMjAlM0QlM0QlMjAwJTNBJTBBJTIwJTIwJTIwJTIwcHJpbnQoJTIyTG9hZGluZyUyMHJlc3VsdHMlMjBmcm9tJTIwbWFpbiUyMHByb2Nlc3MlMjIpJTBBJTIwJTIwJTIwJTIwdG9yY2guZGlzdHJpYnV0ZWQuYmFycmllcigp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch.distributed

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> training_args.local_rank &gt; <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Waiting for main process to perform the mapping&quot;</span>)
<span class="hljs-meta">... </span>    torch.distributed.barrier()

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset2 = dataset1.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: {<span class="hljs-string">&quot;a&quot;</span>: x[<span class="hljs-string">&quot;a&quot;</span>] + <span class="hljs-number">1</span>})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> training_args.local_rank == <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loading results from main process&quot;</span>)
<span class="hljs-meta">... </span>    torch.distributed.barrier()`,wrap:!1}}),va=new M({props:{title:"Batch",local:"batch",headingTag:"h2"}}),Va=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjb3JuZWxsLW1vdmllLXJldmlldy1kYXRhJTJGcm90dGVuX3RvbWF0b2VzJTIyJTJDJTIwc3BsaXQlM0QlMjJ0cmFpbiUyMiklMEFiYXRjaGVkX2RhdGFzZXQlMjAlM0QlMjBkYXRhc2V0LmJhdGNoKGJhdGNoX3NpemUlM0Q0KSUwQWJhdGNoZWRfZGF0YXNldCU1QjAlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>batched_dataset = dataset.batch(batch_size=<span class="hljs-number">4</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>batched_dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&#x27;the rock is destined to be the 21st century\\&#x27;s new &quot; conan &quot; and that he\\&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
        <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson\\&#x27;s expanded vision of j . r . r . tolkien\\&#x27;s middle-earth .&#x27;</span>,
        <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>,
        <span class="hljs-string">&#x27;if you sometimes like to go to the movies to have fun , wasabi is a good place to start .&#x27;</span>],
<span class="hljs-string">&#x27;label&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`,wrap:!1}}),Fa=new M({props:{title:"Concatenate",local:"concatenate",headingTag:"h2"}}),Wa=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwY29uY2F0ZW5hdGVfZGF0YXNldHMlMkMlMjBsb2FkX2RhdGFzZXQlMEElMEFzdG9yaWVzJTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMmFqaWJhd2EtMjAyMyUyRkdlbmVyYWwtU3Rvcmllcy1Db2xsZWN0aW9uJTIyJTJDJTIwc3BsaXQlM0QlMjJ0cmFpbiUyMiklMEFzdG9yaWVzJTIwJTNEJTIwc3Rvcmllcy5yZW1vdmVfY29sdW1ucyglNUJjb2wlMjBmb3IlMjBjb2wlMjBpbiUyMHN0b3JpZXMuY29sdW1uX25hbWVzJTIwaWYlMjBjb2wlMjAhJTNEJTIwJTIydGV4dCUyMiU1RCklMjAlMjAlMjMlMjBvbmx5JTIwa2VlcCUyMHRoZSUyMCd0ZXh0JyUyMGNvbHVtbiUwQXdpa2klMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyd2lraW1lZGlhJTJGd2lraXBlZGlhJTIyJTJDJTIwJTIyMjAyMjAzMDEuZW4lMjIlMkMlMjBzcGxpdCUzRCUyMnRyYWluJTIyKSUwQXdpa2klMjAlM0QlMjB3aWtpLnJlbW92ZV9jb2x1bW5zKCU1QmNvbCUyMGZvciUyMGNvbCUyMGluJTIwd2lraS5jb2x1bW5fbmFtZXMlMjBpZiUyMGNvbCUyMCElM0QlMjAlMjJ0ZXh0JTIyJTVEKSUyMCUyMCUyMyUyMG9ubHklMjBrZWVwJTIwdGhlJTIwJ3RleHQnJTIwY29sdW1uJTBBJTBBYXNzZXJ0JTIwc3Rvcmllcy5mZWF0dXJlcy50eXBlJTIwJTNEJTNEJTIwd2lraS5mZWF0dXJlcy50eXBlJTBBYmVydF9kYXRhc2V0JTIwJTNEJTIwY29uY2F0ZW5hdGVfZGF0YXNldHMoJTVCc3RvcmllcyUyQyUyMHdpa2klNUQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> concatenate_datasets, load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>stories = load_dataset(<span class="hljs-string">&quot;ajibawa-2023/General-Stories-Collection&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>stories = stories.remove_columns([col <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> stories.column_names <span class="hljs-keyword">if</span> col != <span class="hljs-string">&quot;text&quot;</span>])  <span class="hljs-comment"># only keep the &#x27;text&#x27; column</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;wikimedia/wikipedia&quot;</span>, <span class="hljs-string">&quot;20220301.en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = wiki.remove_columns([col <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> wiki.column_names <span class="hljs-keyword">if</span> col != <span class="hljs-string">&quot;text&quot;</span>])  <span class="hljs-comment"># only keep the &#x27;text&#x27; column</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> stories.features.<span class="hljs-built_in">type</span> == wiki.features.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>bert_dataset = concatenate_datasets([stories, wiki])`,wrap:!1}}),za=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUwQXN0b3JpZXNfaWRzJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIyaWRzJTIyJTNBJTIwbGlzdChyYW5nZShsZW4oc3RvcmllcykpKSU3RCklMEFzdG9yaWVzX3dpdGhfaWRzJTIwJTNEJTIwY29uY2F0ZW5hdGVfZGF0YXNldHMoJTVCc3RvcmllcyUyQyUyMHN0b3JpZXNfaWRzJTVEJTJDJTIwYXhpcyUzRDEp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>stories_ids = Dataset.from_dict({<span class="hljs-string">&quot;ids&quot;</span>: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(stories)))})
<span class="hljs-meta">&gt;&gt;&gt; </span>stories_with_ids = concatenate_datasets([stories, stories_ids], axis=<span class="hljs-number">1</span>)`,wrap:!1}}),qa=new M({props:{title:"Interleave",local:"interleave",headingTag:"h3"}}),Aa=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMGludGVybGVhdmVfZGF0YXNldHMlMEFzZWVkJTIwJTNEJTIwNDIlMEFwcm9iYWJpbGl0aWVzJTIwJTNEJTIwJTVCMC4zJTJDJTIwMC41JTJDJTIwMC4yJTVEJTBBZDElMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJhJTIyJTNBJTIwJTVCMCUyQyUyMDElMkMlMjAyJTVEJTdEKSUwQWQyJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIyYSUyMiUzQSUyMCU1QjEwJTJDJTIwMTElMkMlMjAxMiUyQyUyMDEzJTVEJTdEKSUwQWQzJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIyYSUyMiUzQSUyMCU1QjIwJTJDJTIwMjElMkMlMjAyMiU1RCU3RCklMEFkYXRhc2V0JTIwJTNEJTIwaW50ZXJsZWF2ZV9kYXRhc2V0cyglNUJkMSUyQyUyMGQyJTJDJTIwZDMlNUQlMkMlMjBwcm9iYWJpbGl0aWVzJTNEcHJvYmFiaWxpdGllcyUyQyUyMHNlZWQlM0RzZWVkKSUwQWRhdGFzZXQlNUIlMjJhJTIyJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>seed = <span class="hljs-number">42</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>probabilities = [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.2</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=probabilities, seed=seed)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">21</span>, <span class="hljs-number">13</span>]`,wrap:!1}}),La=new j({props:{code:"ZDElMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJhJTIyJTNBJTIwJTVCMCUyQyUyMDElMkMlMjAyJTVEJTdEKSUwQWQyJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIyYSUyMiUzQSUyMCU1QjEwJTJDJTIwMTElMkMlMjAxMiUyQyUyMDEzJTVEJTdEKSUwQWQzJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIyYSUyMiUzQSUyMCU1QjIwJTJDJTIwMjElMkMlMjAyMiU1RCU3RCklMEFkYXRhc2V0JTIwJTNEJTIwaW50ZXJsZWF2ZV9kYXRhc2V0cyglNUJkMSUyQyUyMGQyJTJDJTIwZDMlNUQlMkMlMjBzdG9wcGluZ19zdHJhdGVneSUzRCUyMmFsbF9leGhhdXN0ZWQlMjIpJTBBZGF0YXNldCU1QiUyMmElMjIlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">20</span>]`,wrap:!1}}),Da=new M({props:{title:"Format",local:"format",headingTag:"h2"}}),Oa=new j({props:{code:"ZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQud2l0aF9mb3JtYXQodHlwZSUzRCUyMnRvcmNoJTIyKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;torch&quot;</span>)',wrap:!1}}),ae=new j({props:{code:"ZGF0YXNldC5zZXRfZm9ybWF0KHR5cGUlM0QlMjJ0b3JjaCUyMik=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;torch&quot;</span>)',wrap:!1}}),te=new j({props:{code:"ZGF0YXNldC5mb3JtYXQlMEFkYXRhc2V0JTIwJTNEJTIwZGF0YXNldC53aXRoX2Zvcm1hdChOb25lKSUwQWRhdGFzZXQuZm9ybWF0",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;torch&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {}, <span class="hljs-string">&#x27;columns&#x27;</span>: [...], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.with_format(<span class="hljs-literal">None</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {}, <span class="hljs-string">&#x27;columns&#x27;</span>: [...], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}`,wrap:!1}}),ne=new M({props:{title:"Tensors formats",local:"tensors-formats",headingTag:"h3"}}),x=new ap({props:{$$slots:{default:[nr]},$$scope:{ctx:b}}}),ce=new j({props:{code:"ZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJ0ZXh0JTIyJTNBJTIwJTVCJTIyZm9vJTIyJTJDJTIwJTIyYmFyJTIyJTVEJTJDJTIwJTIydG9rZW5zJTIyJTNBJTIwJTVCJTVCMCUyQyUyMDElMkMlMjAyJTVEJTJDJTIwJTVCMyUyQyUyMDQlMkMlMjA1JTVEJTVEJTdEKSUwQWRzJTIwJTNEJTIwZHMud2l0aF9mb3JtYXQoJTIydG9yY2glMjIpJTBBZHMlNUIwJTVEJTBBZHMlNUIlM0EyJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;text&quot;</span>: [<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>], <span class="hljs-string">&quot;tokens&quot;</span>: [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]]})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;tokens&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>]
{<span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>],
 <span class="hljs-string">&#x27;tokens&#x27;</span>: tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
         [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]])}`,wrap:!1}}),oe=new M({props:{title:"Tabular formats",local:"tabular-formats",headingTag:"h3"}}),je=new j({props:{code:"ZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJ0ZXh0JTIyJTNBJTIwJTVCJTIyZm9vJTIyJTJDJTIwJTIyYmFyJTIyJTVEJTJDJTIwJTIybGFiZWwlMjIlM0ElMjAlNUIwJTJDJTIwMSU1RCU3RCklMEFkcyUyMCUzRCUyMGRzLndpdGhfZm9ybWF0KCUyMnBhbmRhcyUyMiklMEFkcyU1QiUzQTIlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;text&quot;</span>: [<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>], <span class="hljs-string">&quot;label&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;pandas&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>]
  text  label
<span class="hljs-number">0</span>  foo      <span class="hljs-number">0</span>
<span class="hljs-number">1</span>  bar      <span class="hljs-number">1</span>`,wrap:!1}}),ge=new j({props:{code:"ZHMlMjAlM0QlMjBkcy5tYXAobGFtYmRhJTIwZGYlM0ElMjBkZi5hc3NpZ24odXBwZXJfdGV4dCUzRGRmLnRleHQuc3RyLnVwcGVyKCkpJTJDJTIwYmF0Y2hlZCUzRFRydWUpJTBBZHMlNUIlM0EyJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> df: df.assign(upper_text=df.text.<span class="hljs-built_in">str</span>.upper()), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>]
  text  label upper_text
<span class="hljs-number">0</span>  foo      <span class="hljs-number">0</span>        FOO
<span class="hljs-number">1</span>  bar      <span class="hljs-number">1</span>        BAR`,wrap:!1}}),Me=new M({props:{title:"Custom format transform",local:"custom-format-transform",headingTag:"h3"}}),we=new j({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJiZXJ0LWJhc2UtdW5jYXNlZCUyMiklMEFkZWYlMjBlbmNvZGUoYmF0Y2gpJTNBJTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwdG9rZW5pemVyKGJhdGNoJTVCJTIyc2VudGVuY2UxJTIyJTVEJTJDJTIwYmF0Y2glNUIlMjJzZW50ZW5jZTIlMjIlNUQlMkMlMjBwYWRkaW5nJTNEJTIybG9uZ2VzdCUyMiUyQyUyMHRydW5jYXRpb24lM0RUcnVlJTJDJTIwbWF4X2xlbmd0aCUzRDUxMiUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIpJTBBZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQud2l0aF90cmFuc2Zvcm0oZW5jb2RlKSUwQWRhdGFzZXQuZm9ybWF0",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&quot;sentence1&quot;</span>], batch[<span class="hljs-string">&quot;sentence2&quot;</span>], padding=<span class="hljs-string">&quot;longest&quot;</span>, truncation=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">512</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;custom&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {<span class="hljs-string">&#x27;transform&#x27;</span>: &lt;function __main__.encode(batch)&gt;}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}`,wrap:!1}}),Ue=new j({props:{code:"aW1wb3J0JTIwbnVtcHklMjBhcyUyMG5wJTBBZnJvbSUyMHB5ZHViJTIwaW1wb3J0JTIwQXVkaW9TZWdtZW50JTBBJTBBYXVkaW9fZGF0YXNldF9hbXIlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJhdWRpbyUyMiUzQSUyMCU1QiUyMmF1ZGlvX3NhbXBsZXMlMkZhdWRpby5hbXIlMjIlNUQlN0QpJTBBJTBBZGVmJTIwZGVjb2RlX2F1ZGlvX3dpdGhfcHlkdWIoYmF0Y2glMkMlMjBzYW1wbGluZ19yYXRlJTNEMTZfMDAwKSUzQSUwQSUyMCUyMCUyMCUyMGRlZiUyMHB5ZHViX2RlY29kZV9maWxlKGF1ZGlvX3BhdGgpJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc291bmQlMjAlM0QlMjBBdWRpb1NlZ21lbnQuZnJvbV9maWxlKGF1ZGlvX3BhdGgpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwaWYlMjBzb3VuZC5mcmFtZV9yYXRlJTIwISUzRCUyMHNhbXBsaW5nX3JhdGUlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzb3VuZCUyMCUzRCUyMHNvdW5kLnNldF9mcmFtZV9yYXRlKHNhbXBsaW5nX3JhdGUpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwY2hhbm5lbF9zb3VuZHMlMjAlM0QlMjBzb3VuZC5zcGxpdF90b19tb25vKCklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzYW1wbGVzJTIwJTNEJTIwJTVCcy5nZXRfYXJyYXlfb2Zfc2FtcGxlcygpJTIwZm9yJTIwcyUyMGluJTIwY2hhbm5lbF9zb3VuZHMlNUQlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmcF9hcnIlMjAlM0QlMjBucC5hcnJheShzYW1wbGVzKS5ULmFzdHlwZShucC5mbG9hdDMyKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZwX2FyciUyMCUyRiUzRCUyMG5wLmlpbmZvKHNhbXBsZXMlNUIwJTVELnR5cGVjb2RlKS5tYXglMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjByZXR1cm4lMjBmcF9hcnIlMEElMjAlMjAlMjAlMjBiYXRjaCU1QiUyMmF1ZGlvJTIyJTVEJTIwJTNEJTIwJTVCcHlkdWJfZGVjb2RlX2ZpbGUoYXVkaW9fcGF0aCklMjBmb3IlMjBhdWRpb19wYXRoJTIwaW4lMjBiYXRjaCU1QiUyMmF1ZGlvJTIyJTVEJTVEJTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwYmF0Y2glMEElMEFhdWRpb19kYXRhc2V0X2Ftci5zZXRfdHJhbnNmb3JtKGRlY29kZV9hdWRpb193aXRoX3B5ZHViKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pydub <span class="hljs-keyword">import</span> AudioSegment

<span class="hljs-meta">&gt;&gt;&gt; </span>audio_dataset_amr = Dataset.from_dict({<span class="hljs-string">&quot;audio&quot;</span>: [<span class="hljs-string">&quot;audio_samples/audio.amr&quot;</span>]})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_audio_with_pydub</span>(<span class="hljs-params">batch, sampling_rate=<span class="hljs-number">16_000</span></span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pydub_decode_file</span>(<span class="hljs-params">audio_path</span>):
<span class="hljs-meta">... </span>        sound = AudioSegment.from_file(audio_path)
<span class="hljs-meta">... </span>        <span class="hljs-keyword">if</span> sound.frame_rate != sampling_rate:
<span class="hljs-meta">... </span>            sound = sound.set_frame_rate(sampling_rate)
<span class="hljs-meta">... </span>        channel_sounds = sound.split_to_mono()
<span class="hljs-meta">... </span>        samples = [s.get_array_of_samples() <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> channel_sounds]
<span class="hljs-meta">... </span>        fp_arr = np.array(samples).T.astype(np.float32)
<span class="hljs-meta">... </span>        fp_arr /= np.iinfo(samples[<span class="hljs-number">0</span>].typecode).<span class="hljs-built_in">max</span>
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> fp_arr
...
<span class="hljs-meta">... </span>    batch[<span class="hljs-string">&quot;audio&quot;</span>] = [pydub_decode_file(audio_path) <span class="hljs-keyword">for</span> audio_path <span class="hljs-keyword">in</span> batch[<span class="hljs-string">&quot;audio&quot;</span>]]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> batch

<span class="hljs-meta">&gt;&gt;&gt; </span>audio_dataset_amr.set_transform(decode_audio_with_pydub)`,wrap:!1}}),xe=new M({props:{title:"Save",local:"save",headingTag:"h2"}}),Ie=new j({props:{code:"ZW5jb2RlZF9kYXRhc2V0LnNhdmVfdG9fZGlzayglMjJwYXRoJTJGb2YlMkZteSUyRmRhdGFzZXQlMkZkaXJlY3RvcnklMjIp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.save_to_disk(<span class="hljs-string">&quot;path/of/my/dataset/directory&quot;</span>)',wrap:!1}}),ke=new j({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9mcm9tX2Rpc2slMEFyZWxvYWRlZF9kYXRhc2V0JTIwJTNEJTIwbG9hZF9mcm9tX2Rpc2soJTIycGF0aCUyRm9mJTJGbXklMkZkYXRhc2V0JTJGZGlyZWN0b3J5JTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span>reloaded_dataset = load_from_disk(<span class="hljs-string">&quot;path/of/my/dataset/directory&quot;</span>)`,wrap:!1}}),Ze=new M({props:{title:"Export",local:"export",headingTag:"h2"}}),Ve=new j({props:{code:"ZW5jb2RlZF9kYXRhc2V0LnRvX2NzdiglMjJwYXRoJTJGb2YlMkZteSUyRmRhdGFzZXQuY3N2JTIyKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.to_csv(<span class="hljs-string">&quot;path/of/my/dataset.csv&quot;</span>)',wrap:!1}}),Re=new sr({props:{source:"https://github.com/huggingface/datasets/blob/main/docs/source/process.mdx"}}),{c(){f=p("meta"),y=n(),g=p("p"),w=n(),c($.$$.fragment),Ye=n(),_=p("p"),_.textContent=tp,Fe=n(),I=p("p"),I.textContent=np,Qe=n(),C=p("ul"),C.innerHTML=lp,We=n(),k=p("p"),k.innerHTML=pp,Be=n(),Z=p("p"),Z.textContent=ip,ze=n(),c(v.$$.fragment),qe=n(),c(T.$$.fragment),Ee=n(),c(G.$$.fragment),He=n(),X=p("p"),X.textContent=rp,Ae=n(),c(V.$$.fragment),Se=n(),R=p("p"),R.innerHTML=cp,Le=n(),c(N.$$.fragment),De=n(),Y=p("p"),Y.textContent=op,Pe=n(),c(F.$$.fragment),Ke=n(),Q=p("p"),Q.innerHTML=hp,Oe=n(),c(W.$$.fragment),st=n(),B=p("p"),B.innerHTML=mp,at=n(),c(z.$$.fragment),et=n(),c(q.$$.fragment),tt=n(),E=p("p"),E.innerHTML=dp,nt=n(),H=p("ul"),H.innerHTML=up,lt=n(),c(A.$$.fragment),pt=n(),S=p("ul"),S.innerHTML=jp,it=n(),c(L.$$.fragment),rt=n(),D=p("p"),D.innerHTML=fp,ct=n(),c(P.$$.fragment),ot=n(),K=p("p"),K.textContent=gp,ht=n(),c(O.$$.fragment),mt=n(),ss=p("p"),ss.innerHTML=Mp,dt=n(),c(as.$$.fragment),ut=n(),es=p("p"),es.innerHTML=yp,jt=n(),c(ts.$$.fragment),ft=n(),ns=p("p"),ns.innerHTML=wp,gt=n(),ls=p("p"),ls.innerHTML=bp,Mt=n(),c(ps.$$.fragment),yt=n(),is=p("p"),is.textContent=Tp,wt=n(),c(rs.$$.fragment),bt=n(),c(cs.$$.fragment),Tt=n(),os=p("p"),os.textContent=Jp,Jt=n(),c(hs.$$.fragment),Ut=n(),ms=p("p"),ms.innerHTML=Up,xt=n(),ds=p("p"),ds.innerHTML=xp,$t=n(),c(us.$$.fragment),_t=n(),c(js.$$.fragment),It=n(),fs=p("p"),fs.innerHTML=$p,Ct=n(),c(gs.$$.fragment),kt=n(),Ms=p("p"),Ms.innerHTML=_p,Zt=n(),c(ys.$$.fragment),vt=n(),c(ws.$$.fragment),Gt=n(),bs=p("p"),bs.innerHTML=Ip,Xt=n(),c(Ts.$$.fragment),Vt=n(),c(J.$$.fragment),Rt=n(),Js=p("p"),Js.innerHTML=Cp,Nt=n(),c(Us.$$.fragment),Yt=n(),c(xs.$$.fragment),Ft=n(),$s=p("p"),$s.textContent=kp,Qt=n(),c(_s.$$.fragment),Wt=n(),Is=p("p"),Is.innerHTML=Zp,Bt=n(),c(Cs.$$.fragment),zt=n(),ks=p("p"),ks.innerHTML=vp,qt=n(),c(Zs.$$.fragment),Et=n(),vs=p("p"),vs.innerHTML=Gp,Ht=n(),Gs=p("p"),Gs.innerHTML=Xp,At=n(),Xs=p("p"),Xs.innerHTML=Vp,St=n(),c(Vs.$$.fragment),Lt=n(),Rs=p("p"),Rs.innerHTML=Rp,Dt=n(),c(Ns.$$.fragment),Pt=n(),Ys=p("p"),Ys.innerHTML=Np,Kt=n(),Fs=p("p"),Fs.innerHTML=Yp,Ot=n(),c(Qs.$$.fragment),sn=n(),c(U.$$.fragment),an=n(),Ws=p("p"),Ws.innerHTML=Fp,en=n(),c(Bs.$$.fragment),tn=n(),c(zs.$$.fragment),nn=n(),qs=p("p"),qs.innerHTML=Qp,ln=n(),c(Es.$$.fragment),pn=n(),Hs=p("p"),Hs.innerHTML=Wp,rn=n(),c(As.$$.fragment),cn=n(),Ss=p("p"),Ss.innerHTML=Bp,on=n(),c(Ls.$$.fragment),hn=n(),c(Ds.$$.fragment),mn=n(),Ps=p("p"),Ps.innerHTML=zp,dn=n(),c(Ks.$$.fragment),un=n(),Os=p("p"),Os.textContent=qp,jn=n(),sa=p("ol"),sa.innerHTML=Ep,fn=n(),c(aa.$$.fragment),gn=n(),ea=p("p"),ea.innerHTML=Hp,Mn=n(),c(ta.$$.fragment),yn=n(),na=p("p"),na.textContent=Ap,wn=n(),c(la.$$.fragment),bn=n(),c(pa.$$.fragment),Tn=n(),ia=p("p"),ia.innerHTML=Sp,Jn=n(),ra=p("p"),ra.innerHTML=Lp,Un=n(),c(ca.$$.fragment),xn=n(),oa=p("p"),oa.textContent=Dp,$n=n(),c(ha.$$.fragment),_n=n(),ma=p("p"),ma.innerHTML=Pp,In=n(),c(da.$$.fragment),Cn=n(),ua=p("p"),ua.innerHTML=Kp,kn=n(),c(ja.$$.fragment),Zn=n(),fa=p("p"),fa.textContent=Op,vn=n(),ga=p("p"),ga.innerHTML=si,Gn=n(),c(Ma.$$.fragment),Xn=n(),ya=p("p"),ya.innerHTML=ai,Vn=n(),wa=p("p"),wa.innerHTML=ei,Rn=n(),ba=p("p"),ba.innerHTML=ti,Nn=n(),c(Ta.$$.fragment),Yn=n(),Ja=p("p"),Ja.innerHTML=ni,Fn=n(),Ua=p("p"),Ua.innerHTML=li,Qn=n(),c(xa.$$.fragment),Wn=n(),$a=p("p"),$a.innerHTML=pi,Bn=n(),c(_a.$$.fragment),zn=n(),c(Ia.$$.fragment),qn=n(),Ca=p("p"),Ca.innerHTML=ii,En=n(),ka=p("p"),ka.innerHTML=ri,Hn=n(),c(Za.$$.fragment),An=n(),c(va.$$.fragment),Sn=n(),Ga=p("p"),Ga.innerHTML=ci,Ln=n(),Xa=p("p"),Xa.innerHTML=oi,Dn=n(),c(Va.$$.fragment),Pn=n(),Ra=p("p"),Ra.innerHTML=hi,Kn=n(),Na=p("ul"),Na.innerHTML=mi,On=n(),Ya=p("p"),Ya.innerHTML=di,sl=n(),c(Fa.$$.fragment),al=n(),Qa=p("p"),Qa.innerHTML=ui,el=n(),c(Wa.$$.fragment),tl=n(),Ba=p("p"),Ba.innerHTML=ji,nl=n(),c(za.$$.fragment),ll=n(),c(qa.$$.fragment),pl=n(),Ea=p("p"),Ea.innerHTML=fi,il=n(),Ha=p("p"),Ha.textContent=gi,rl=n(),c(Aa.$$.fragment),cl=n(),Sa=p("p"),Sa.innerHTML=Mi,ol=n(),c(La.$$.fragment),hl=n(),c(Da.$$.fragment),ml=n(),Pa=p("p"),Pa.innerHTML=yi,dl=n(),Ka=p("p"),Ka.innerHTML=wi,ul=n(),c(Oa.$$.fragment),jl=n(),se=p("p"),se.innerHTML=bi,fl=n(),c(ae.$$.fragment),gl=n(),ee=p("p"),ee.innerHTML=Ti,Ml=n(),c(te.$$.fragment),yl=n(),c(ne.$$.fragment),wl=n(),le=p("p"),le.textContent=Ji,bl=n(),pe=p("p"),pe.textContent=Ui,Tl=n(),ie=p("ul"),ie.innerHTML=xi,Jl=n(),c(x.$$.fragment),Ul=n(),re=p("p"),re.textContent=$i,xl=n(),c(ce.$$.fragment),$l=n(),c(oe.$$.fragment),_l=n(),he=p("p"),he.textContent=_i,Il=n(),me=p("p"),me.textContent=Ii,Cl=n(),de=p("ul"),de.innerHTML=Ci,kl=n(),ue=p("p"),ue.textContent=ki,Zl=n(),c(je.$$.fragment),vl=n(),fe=p("p"),fe.innerHTML=Zi,Gl=n(),c(ge.$$.fragment),Xl=n(),c(Me.$$.fragment),Vl=n(),ye=p("p"),ye.innerHTML=vi,Rl=n(),c(we.$$.fragment),Nl=n(),be=p("p"),be.innerHTML=Gi,Yl=n(),Te=p("p"),Te.innerHTML=Xi,Fl=n(),Je=p("p"),Je.innerHTML=Vi,Ql=n(),c(Ue.$$.fragment),Wl=n(),c(xe.$$.fragment),Bl=n(),$e=p("p"),$e.innerHTML=Ri,zl=n(),_e=p("p"),_e.textContent=Ni,ql=n(),c(Ie.$$.fragment),El=n(),Ce=p("p"),Ce.innerHTML=Yi,Hl=n(),c(ke.$$.fragment),Al=n(),c(Ze.$$.fragment),Sl=n(),ve=p("p"),ve.textContent=Fi,Ll=n(),Ge=p("table"),Ge.innerHTML=Qi,Dl=n(),Xe=p("p"),Xe.textContent=Wi,Pl=n(),c(Ve.$$.fragment),Kl=n(),c(Re.$$.fragment),Ol=n(),Ne=p("p"),this.h()},l(s){const a=Ki("svelte-u9bgzb",document.head);f=i(a,"META",{name:!0,content:!0}),a.forEach(e),y=l(s),g=i(s,"P",{}),Hi(g).forEach(e),w=l(s),o($.$$.fragment,s),Ye=l(s),_=i(s,"P",{"data-svelte-h":!0}),r(_)!=="svelte-o0c0lx"&&(_.textContent=tp),Fe=l(s),I=i(s,"P",{"data-svelte-h":!0}),r(I)!=="svelte-1aff4p7"&&(I.textContent=np),Qe=l(s),C=i(s,"UL",{"data-svelte-h":!0}),r(C)!=="svelte-141dx8c"&&(C.innerHTML=lp),We=l(s),k=i(s,"P",{"data-svelte-h":!0}),r(k)!=="svelte-1xlvt1h"&&(k.innerHTML=pp),Be=l(s),Z=i(s,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-1bplt66"&&(Z.textContent=ip),ze=l(s),o(v.$$.fragment,s),qe=l(s),o(T.$$.fragment,s),Ee=l(s),o(G.$$.fragment,s),He=l(s),X=i(s,"P",{"data-svelte-h":!0}),r(X)!=="svelte-1bmil1o"&&(X.textContent=rp),Ae=l(s),o(V.$$.fragment,s),Se=l(s),R=i(s,"P",{"data-svelte-h":!0}),r(R)!=="svelte-jb9fc4"&&(R.innerHTML=cp),Le=l(s),o(N.$$.fragment,s),De=l(s),Y=i(s,"P",{"data-svelte-h":!0}),r(Y)!=="svelte-50nyg6"&&(Y.textContent=op),Pe=l(s),o(F.$$.fragment,s),Ke=l(s),Q=i(s,"P",{"data-svelte-h":!0}),r(Q)!=="svelte-u6b5b9"&&(Q.innerHTML=hp),Oe=l(s),o(W.$$.fragment,s),st=l(s),B=i(s,"P",{"data-svelte-h":!0}),r(B)!=="svelte-qsycuj"&&(B.innerHTML=mp),at=l(s),o(z.$$.fragment,s),et=l(s),o(q.$$.fragment,s),tt=l(s),E=i(s,"P",{"data-svelte-h":!0}),r(E)!=="svelte-1xp8kbl"&&(E.innerHTML=dp),nt=l(s),H=i(s,"UL",{"data-svelte-h":!0}),r(H)!=="svelte-jwccy9"&&(H.innerHTML=up),lt=l(s),o(A.$$.fragment,s),pt=l(s),S=i(s,"UL",{"data-svelte-h":!0}),r(S)!=="svelte-jsssrj"&&(S.innerHTML=jp),it=l(s),o(L.$$.fragment,s),rt=l(s),D=i(s,"P",{"data-svelte-h":!0}),r(D)!=="svelte-1n4t64x"&&(D.innerHTML=fp),ct=l(s),o(P.$$.fragment,s),ot=l(s),K=i(s,"P",{"data-svelte-h":!0}),r(K)!=="svelte-1y27i4k"&&(K.textContent=gp),ht=l(s),o(O.$$.fragment,s),mt=l(s),ss=i(s,"P",{"data-svelte-h":!0}),r(ss)!=="svelte-2el6oy"&&(ss.innerHTML=Mp),dt=l(s),o(as.$$.fragment,s),ut=l(s),es=i(s,"P",{"data-svelte-h":!0}),r(es)!=="svelte-kxs7ja"&&(es.innerHTML=yp),jt=l(s),o(ts.$$.fragment,s),ft=l(s),ns=i(s,"P",{"data-svelte-h":!0}),r(ns)!=="svelte-115fkfh"&&(ns.innerHTML=wp),gt=l(s),ls=i(s,"P",{"data-svelte-h":!0}),r(ls)!=="svelte-irelh5"&&(ls.innerHTML=bp),Mt=l(s),o(ps.$$.fragment,s),yt=l(s),is=i(s,"P",{"data-svelte-h":!0}),r(is)!=="svelte-189aje2"&&(is.textContent=Tp),wt=l(s),o(rs.$$.fragment,s),bt=l(s),o(cs.$$.fragment,s),Tt=l(s),os=i(s,"P",{"data-svelte-h":!0}),r(os)!=="svelte-1vk4iy9"&&(os.textContent=Jp),Jt=l(s),o(hs.$$.fragment,s),Ut=l(s),ms=i(s,"P",{"data-svelte-h":!0}),r(ms)!=="svelte-1ujzo4y"&&(ms.innerHTML=Up),xt=l(s),ds=i(s,"P",{"data-svelte-h":!0}),r(ds)!=="svelte-1r7ncst"&&(ds.innerHTML=xp),$t=l(s),o(us.$$.fragment,s),_t=l(s),o(js.$$.fragment,s),It=l(s),fs=i(s,"P",{"data-svelte-h":!0}),r(fs)!=="svelte-1xn3hsc"&&(fs.innerHTML=$p),Ct=l(s),o(gs.$$.fragment,s),kt=l(s),Ms=i(s,"P",{"data-svelte-h":!0}),r(Ms)!=="svelte-1tjj1il"&&(Ms.innerHTML=_p),Zt=l(s),o(ys.$$.fragment,s),vt=l(s),o(ws.$$.fragment,s),Gt=l(s),bs=i(s,"P",{"data-svelte-h":!0}),r(bs)!=="svelte-1ugnd02"&&(bs.innerHTML=Ip),Xt=l(s),o(Ts.$$.fragment,s),Vt=l(s),o(J.$$.fragment,s),Rt=l(s),Js=i(s,"P",{"data-svelte-h":!0}),r(Js)!=="svelte-nxk9k0"&&(Js.innerHTML=Cp),Nt=l(s),o(Us.$$.fragment,s),Yt=l(s),o(xs.$$.fragment,s),Ft=l(s),$s=i(s,"P",{"data-svelte-h":!0}),r($s)!=="svelte-68ctim"&&($s.textContent=kp),Qt=l(s),o(_s.$$.fragment,s),Wt=l(s),Is=i(s,"P",{"data-svelte-h":!0}),r(Is)!=="svelte-46feow"&&(Is.innerHTML=Zp),Bt=l(s),o(Cs.$$.fragment,s),zt=l(s),ks=i(s,"P",{"data-svelte-h":!0}),r(ks)!=="svelte-80t9a4"&&(ks.innerHTML=vp),qt=l(s),o(Zs.$$.fragment,s),Et=l(s),vs=i(s,"P",{"data-svelte-h":!0}),r(vs)!=="svelte-1mtb1oy"&&(vs.innerHTML=Gp),Ht=l(s),Gs=i(s,"P",{"data-svelte-h":!0}),r(Gs)!=="svelte-1tkgss"&&(Gs.innerHTML=Xp),At=l(s),Xs=i(s,"P",{"data-svelte-h":!0}),r(Xs)!=="svelte-1t98b4r"&&(Xs.innerHTML=Vp),St=l(s),o(Vs.$$.fragment,s),Lt=l(s),Rs=i(s,"P",{"data-svelte-h":!0}),r(Rs)!=="svelte-1xihth9"&&(Rs.innerHTML=Rp),Dt=l(s),o(Ns.$$.fragment,s),Pt=l(s),Ys=i(s,"P",{"data-svelte-h":!0}),r(Ys)!=="svelte-1pizh3h"&&(Ys.innerHTML=Np),Kt=l(s),Fs=i(s,"P",{"data-svelte-h":!0}),r(Fs)!=="svelte-1lpann7"&&(Fs.innerHTML=Yp),Ot=l(s),o(Qs.$$.fragment,s),sn=l(s),o(U.$$.fragment,s),an=l(s),Ws=i(s,"P",{"data-svelte-h":!0}),r(Ws)!=="svelte-w5enq1"&&(Ws.innerHTML=Fp),en=l(s),o(Bs.$$.fragment,s),tn=l(s),o(zs.$$.fragment,s),nn=l(s),qs=i(s,"P",{"data-svelte-h":!0}),r(qs)!=="svelte-b9yu5g"&&(qs.innerHTML=Qp),ln=l(s),o(Es.$$.fragment,s),pn=l(s),Hs=i(s,"P",{"data-svelte-h":!0}),r(Hs)!=="svelte-15i59cq"&&(Hs.innerHTML=Wp),rn=l(s),o(As.$$.fragment,s),cn=l(s),Ss=i(s,"P",{"data-svelte-h":!0}),r(Ss)!=="svelte-1k52pqi"&&(Ss.innerHTML=Bp),on=l(s),o(Ls.$$.fragment,s),hn=l(s),o(Ds.$$.fragment,s),mn=l(s),Ps=i(s,"P",{"data-svelte-h":!0}),r(Ps)!=="svelte-1a2slqx"&&(Ps.innerHTML=zp),dn=l(s),o(Ks.$$.fragment,s),un=l(s),Os=i(s,"P",{"data-svelte-h":!0}),r(Os)!=="svelte-1k1qy5p"&&(Os.textContent=qp),jn=l(s),sa=i(s,"OL",{"data-svelte-h":!0}),r(sa)!=="svelte-75f7q"&&(sa.innerHTML=Ep),fn=l(s),o(aa.$$.fragment,s),gn=l(s),ea=i(s,"P",{"data-svelte-h":!0}),r(ea)!=="svelte-vqkzbf"&&(ea.innerHTML=Hp),Mn=l(s),o(ta.$$.fragment,s),yn=l(s),na=i(s,"P",{"data-svelte-h":!0}),r(na)!=="svelte-cmzler"&&(na.textContent=Ap),wn=l(s),o(la.$$.fragment,s),bn=l(s),o(pa.$$.fragment,s),Tn=l(s),ia=i(s,"P",{"data-svelte-h":!0}),r(ia)!=="svelte-u0x91d"&&(ia.innerHTML=Sp),Jn=l(s),ra=i(s,"P",{"data-svelte-h":!0}),r(ra)!=="svelte-2g3b8l"&&(ra.innerHTML=Lp),Un=l(s),o(ca.$$.fragment,s),xn=l(s),oa=i(s,"P",{"data-svelte-h":!0}),r(oa)!=="svelte-17o5i9a"&&(oa.textContent=Dp),$n=l(s),o(ha.$$.fragment,s),_n=l(s),ma=i(s,"P",{"data-svelte-h":!0}),r(ma)!=="svelte-nwh7rf"&&(ma.innerHTML=Pp),In=l(s),o(da.$$.fragment,s),Cn=l(s),ua=i(s,"P",{"data-svelte-h":!0}),r(ua)!=="svelte-1ww14wc"&&(ua.innerHTML=Kp),kn=l(s),o(ja.$$.fragment,s),Zn=l(s),fa=i(s,"P",{"data-svelte-h":!0}),r(fa)!=="svelte-z6wstw"&&(fa.textContent=Op),vn=l(s),ga=i(s,"P",{"data-svelte-h":!0}),r(ga)!=="svelte-wyxl4p"&&(ga.innerHTML=si),Gn=l(s),o(Ma.$$.fragment,s),Xn=l(s),ya=i(s,"P",{"data-svelte-h":!0}),r(ya)!=="svelte-1cp101t"&&(ya.innerHTML=ai),Vn=l(s),wa=i(s,"P",{"data-svelte-h":!0}),r(wa)!=="svelte-5qbh2n"&&(wa.innerHTML=ei),Rn=l(s),ba=i(s,"P",{"data-svelte-h":!0}),r(ba)!=="svelte-2maj4"&&(ba.innerHTML=ti),Nn=l(s),o(Ta.$$.fragment,s),Yn=l(s),Ja=i(s,"P",{"data-svelte-h":!0}),r(Ja)!=="svelte-csp9bt"&&(Ja.innerHTML=ni),Fn=l(s),Ua=i(s,"P",{"data-svelte-h":!0}),r(Ua)!=="svelte-v83m45"&&(Ua.innerHTML=li),Qn=l(s),o(xa.$$.fragment,s),Wn=l(s),$a=i(s,"P",{"data-svelte-h":!0}),r($a)!=="svelte-1suwo7d"&&($a.innerHTML=pi),Bn=l(s),o(_a.$$.fragment,s),zn=l(s),o(Ia.$$.fragment,s),qn=l(s),Ca=i(s,"P",{"data-svelte-h":!0}),r(Ca)!=="svelte-a2zmsh"&&(Ca.innerHTML=ii),En=l(s),ka=i(s,"P",{"data-svelte-h":!0}),r(ka)!=="svelte-1jo5sei"&&(ka.innerHTML=ri),Hn=l(s),o(Za.$$.fragment,s),An=l(s),o(va.$$.fragment,s),Sn=l(s),Ga=i(s,"P",{"data-svelte-h":!0}),r(Ga)!=="svelte-1grzzpy"&&(Ga.innerHTML=ci),Ln=l(s),Xa=i(s,"P",{"data-svelte-h":!0}),r(Xa)!=="svelte-11s6yeq"&&(Xa.innerHTML=oi),Dn=l(s),o(Va.$$.fragment,s),Pn=l(s),Ra=i(s,"P",{"data-svelte-h":!0}),r(Ra)!=="svelte-1dww357"&&(Ra.innerHTML=hi),Kn=l(s),Na=i(s,"UL",{"data-svelte-h":!0}),r(Na)!=="svelte-1ip99b0"&&(Na.innerHTML=mi),On=l(s),Ya=i(s,"P",{"data-svelte-h":!0}),r(Ya)!=="svelte-1smfl08"&&(Ya.innerHTML=di),sl=l(s),o(Fa.$$.fragment,s),al=l(s),Qa=i(s,"P",{"data-svelte-h":!0}),r(Qa)!=="svelte-9fv8vq"&&(Qa.innerHTML=ui),el=l(s),o(Wa.$$.fragment,s),tl=l(s),Ba=i(s,"P",{"data-svelte-h":!0}),r(Ba)!=="svelte-qilcw"&&(Ba.innerHTML=ji),nl=l(s),o(za.$$.fragment,s),ll=l(s),o(qa.$$.fragment,s),pl=l(s),Ea=i(s,"P",{"data-svelte-h":!0}),r(Ea)!=="svelte-1231m7b"&&(Ea.innerHTML=fi),il=l(s),Ha=i(s,"P",{"data-svelte-h":!0}),r(Ha)!=="svelte-1k6sf3c"&&(Ha.textContent=gi),rl=l(s),o(Aa.$$.fragment,s),cl=l(s),Sa=i(s,"P",{"data-svelte-h":!0}),r(Sa)!=="svelte-13euv56"&&(Sa.innerHTML=Mi),ol=l(s),o(La.$$.fragment,s),hl=l(s),o(Da.$$.fragment,s),ml=l(s),Pa=i(s,"P",{"data-svelte-h":!0}),r(Pa)!=="svelte-1wr6v4s"&&(Pa.innerHTML=yi),dl=l(s),Ka=i(s,"P",{"data-svelte-h":!0}),r(Ka)!=="svelte-n6dynl"&&(Ka.innerHTML=wi),ul=l(s),o(Oa.$$.fragment,s),jl=l(s),se=i(s,"P",{"data-svelte-h":!0}),r(se)!=="svelte-bxq9ue"&&(se.innerHTML=bi),fl=l(s),o(ae.$$.fragment,s),gl=l(s),ee=i(s,"P",{"data-svelte-h":!0}),r(ee)!=="svelte-1gqhw71"&&(ee.innerHTML=Ti),Ml=l(s),o(te.$$.fragment,s),yl=l(s),o(ne.$$.fragment,s),wl=l(s),le=i(s,"P",{"data-svelte-h":!0}),r(le)!=="svelte-olkdez"&&(le.textContent=Ji),bl=l(s),pe=i(s,"P",{"data-svelte-h":!0}),r(pe)!=="svelte-18l19i7"&&(pe.textContent=Ui),Tl=l(s),ie=i(s,"UL",{"data-svelte-h":!0}),r(ie)!=="svelte-1egnru7"&&(ie.innerHTML=xi),Jl=l(s),o(x.$$.fragment,s),Ul=l(s),re=i(s,"P",{"data-svelte-h":!0}),r(re)!=="svelte-1gnjh2u"&&(re.textContent=$i),xl=l(s),o(ce.$$.fragment,s),$l=l(s),o(oe.$$.fragment,s),_l=l(s),he=i(s,"P",{"data-svelte-h":!0}),r(he)!=="svelte-dti2j5"&&(he.textContent=_i),Il=l(s),me=i(s,"P",{"data-svelte-h":!0}),r(me)!=="svelte-1bcs4mw"&&(me.textContent=Ii),Cl=l(s),de=i(s,"UL",{"data-svelte-h":!0}),r(de)!=="svelte-17rybhy"&&(de.innerHTML=Ci),kl=l(s),ue=i(s,"P",{"data-svelte-h":!0}),r(ue)!=="svelte-qmjsud"&&(ue.textContent=ki),Zl=l(s),o(je.$$.fragment,s),vl=l(s),fe=i(s,"P",{"data-svelte-h":!0}),r(fe)!=="svelte-hk10p5"&&(fe.innerHTML=Zi),Gl=l(s),o(ge.$$.fragment,s),Xl=l(s),o(Me.$$.fragment,s),Vl=l(s),ye=i(s,"P",{"data-svelte-h":!0}),r(ye)!=="svelte-1xzjnjh"&&(ye.innerHTML=vi),Rl=l(s),o(we.$$.fragment,s),Nl=l(s),be=i(s,"P",{"data-svelte-h":!0}),r(be)!=="svelte-xk0o1c"&&(be.innerHTML=Gi),Yl=l(s),Te=i(s,"P",{"data-svelte-h":!0}),r(Te)!=="svelte-nvd5zg"&&(Te.innerHTML=Xi),Fl=l(s),Je=i(s,"P",{"data-svelte-h":!0}),r(Je)!=="svelte-14kj1ho"&&(Je.innerHTML=Vi),Ql=l(s),o(Ue.$$.fragment,s),Wl=l(s),o(xe.$$.fragment,s),Bl=l(s),$e=i(s,"P",{"data-svelte-h":!0}),r($e)!=="svelte-7l9nee"&&($e.innerHTML=Ri),zl=l(s),_e=i(s,"P",{"data-svelte-h":!0}),r(_e)!=="svelte-14rfihg"&&(_e.textContent=Ni),ql=l(s),o(Ie.$$.fragment,s),El=l(s),Ce=i(s,"P",{"data-svelte-h":!0}),r(Ce)!=="svelte-1uj6eug"&&(Ce.innerHTML=Yi),Hl=l(s),o(ke.$$.fragment,s),Al=l(s),o(Ze.$$.fragment,s),Sl=l(s),ve=i(s,"P",{"data-svelte-h":!0}),r(ve)!=="svelte-t9rz5l"&&(ve.textContent=Fi),Ll=l(s),Ge=i(s,"TABLE",{"data-svelte-h":!0}),r(Ge)!=="svelte-1d1ouhd"&&(Ge.innerHTML=Qi),Dl=l(s),Xe=i(s,"P",{"data-svelte-h":!0}),r(Xe)!=="svelte-1w51t97"&&(Xe.textContent=Wi),Pl=l(s),o(Ve.$$.fragment,s),Kl=l(s),o(Re.$$.fragment,s),Ol=l(s),Ne=i(s,"P",{}),Hi(Ne).forEach(e),this.h()},h(){Ai(f,"name","hf:doc:metadata"),Ai(f,"content",pr)},m(s,a){Oi(document.head,f),t(s,y,a),t(s,g,a),t(s,w,a),h($,s,a),t(s,Ye,a),t(s,_,a),t(s,Fe,a),t(s,I,a),t(s,Qe,a),t(s,C,a),t(s,We,a),t(s,k,a),t(s,Be,a),t(s,Z,a),t(s,ze,a),h(v,s,a),t(s,qe,a),h(T,s,a),t(s,Ee,a),h(G,s,a),t(s,He,a),t(s,X,a),t(s,Ae,a),h(V,s,a),t(s,Se,a),t(s,R,a),t(s,Le,a),h(N,s,a),t(s,De,a),t(s,Y,a),t(s,Pe,a),h(F,s,a),t(s,Ke,a),t(s,Q,a),t(s,Oe,a),h(W,s,a),t(s,st,a),t(s,B,a),t(s,at,a),h(z,s,a),t(s,et,a),h(q,s,a),t(s,tt,a),t(s,E,a),t(s,nt,a),t(s,H,a),t(s,lt,a),h(A,s,a),t(s,pt,a),t(s,S,a),t(s,it,a),h(L,s,a),t(s,rt,a),t(s,D,a),t(s,ct,a),h(P,s,a),t(s,ot,a),t(s,K,a),t(s,ht,a),h(O,s,a),t(s,mt,a),t(s,ss,a),t(s,dt,a),h(as,s,a),t(s,ut,a),t(s,es,a),t(s,jt,a),h(ts,s,a),t(s,ft,a),t(s,ns,a),t(s,gt,a),t(s,ls,a),t(s,Mt,a),h(ps,s,a),t(s,yt,a),t(s,is,a),t(s,wt,a),h(rs,s,a),t(s,bt,a),h(cs,s,a),t(s,Tt,a),t(s,os,a),t(s,Jt,a),h(hs,s,a),t(s,Ut,a),t(s,ms,a),t(s,xt,a),t(s,ds,a),t(s,$t,a),h(us,s,a),t(s,_t,a),h(js,s,a),t(s,It,a),t(s,fs,a),t(s,Ct,a),h(gs,s,a),t(s,kt,a),t(s,Ms,a),t(s,Zt,a),h(ys,s,a),t(s,vt,a),h(ws,s,a),t(s,Gt,a),t(s,bs,a),t(s,Xt,a),h(Ts,s,a),t(s,Vt,a),h(J,s,a),t(s,Rt,a),t(s,Js,a),t(s,Nt,a),h(Us,s,a),t(s,Yt,a),h(xs,s,a),t(s,Ft,a),t(s,$s,a),t(s,Qt,a),h(_s,s,a),t(s,Wt,a),t(s,Is,a),t(s,Bt,a),h(Cs,s,a),t(s,zt,a),t(s,ks,a),t(s,qt,a),h(Zs,s,a),t(s,Et,a),t(s,vs,a),t(s,Ht,a),t(s,Gs,a),t(s,At,a),t(s,Xs,a),t(s,St,a),h(Vs,s,a),t(s,Lt,a),t(s,Rs,a),t(s,Dt,a),h(Ns,s,a),t(s,Pt,a),t(s,Ys,a),t(s,Kt,a),t(s,Fs,a),t(s,Ot,a),h(Qs,s,a),t(s,sn,a),h(U,s,a),t(s,an,a),t(s,Ws,a),t(s,en,a),h(Bs,s,a),t(s,tn,a),h(zs,s,a),t(s,nn,a),t(s,qs,a),t(s,ln,a),h(Es,s,a),t(s,pn,a),t(s,Hs,a),t(s,rn,a),h(As,s,a),t(s,cn,a),t(s,Ss,a),t(s,on,a),h(Ls,s,a),t(s,hn,a),h(Ds,s,a),t(s,mn,a),t(s,Ps,a),t(s,dn,a),h(Ks,s,a),t(s,un,a),t(s,Os,a),t(s,jn,a),t(s,sa,a),t(s,fn,a),h(aa,s,a),t(s,gn,a),t(s,ea,a),t(s,Mn,a),h(ta,s,a),t(s,yn,a),t(s,na,a),t(s,wn,a),h(la,s,a),t(s,bn,a),h(pa,s,a),t(s,Tn,a),t(s,ia,a),t(s,Jn,a),t(s,ra,a),t(s,Un,a),h(ca,s,a),t(s,xn,a),t(s,oa,a),t(s,$n,a),h(ha,s,a),t(s,_n,a),t(s,ma,a),t(s,In,a),h(da,s,a),t(s,Cn,a),t(s,ua,a),t(s,kn,a),h(ja,s,a),t(s,Zn,a),t(s,fa,a),t(s,vn,a),t(s,ga,a),t(s,Gn,a),h(Ma,s,a),t(s,Xn,a),t(s,ya,a),t(s,Vn,a),t(s,wa,a),t(s,Rn,a),t(s,ba,a),t(s,Nn,a),h(Ta,s,a),t(s,Yn,a),t(s,Ja,a),t(s,Fn,a),t(s,Ua,a),t(s,Qn,a),h(xa,s,a),t(s,Wn,a),t(s,$a,a),t(s,Bn,a),h(_a,s,a),t(s,zn,a),h(Ia,s,a),t(s,qn,a),t(s,Ca,a),t(s,En,a),t(s,ka,a),t(s,Hn,a),h(Za,s,a),t(s,An,a),h(va,s,a),t(s,Sn,a),t(s,Ga,a),t(s,Ln,a),t(s,Xa,a),t(s,Dn,a),h(Va,s,a),t(s,Pn,a),t(s,Ra,a),t(s,Kn,a),t(s,Na,a),t(s,On,a),t(s,Ya,a),t(s,sl,a),h(Fa,s,a),t(s,al,a),t(s,Qa,a),t(s,el,a),h(Wa,s,a),t(s,tl,a),t(s,Ba,a),t(s,nl,a),h(za,s,a),t(s,ll,a),h(qa,s,a),t(s,pl,a),t(s,Ea,a),t(s,il,a),t(s,Ha,a),t(s,rl,a),h(Aa,s,a),t(s,cl,a),t(s,Sa,a),t(s,ol,a),h(La,s,a),t(s,hl,a),h(Da,s,a),t(s,ml,a),t(s,Pa,a),t(s,dl,a),t(s,Ka,a),t(s,ul,a),h(Oa,s,a),t(s,jl,a),t(s,se,a),t(s,fl,a),h(ae,s,a),t(s,gl,a),t(s,ee,a),t(s,Ml,a),h(te,s,a),t(s,yl,a),h(ne,s,a),t(s,wl,a),t(s,le,a),t(s,bl,a),t(s,pe,a),t(s,Tl,a),t(s,ie,a),t(s,Jl,a),h(x,s,a),t(s,Ul,a),t(s,re,a),t(s,xl,a),h(ce,s,a),t(s,$l,a),h(oe,s,a),t(s,_l,a),t(s,he,a),t(s,Il,a),t(s,me,a),t(s,Cl,a),t(s,de,a),t(s,kl,a),t(s,ue,a),t(s,Zl,a),h(je,s,a),t(s,vl,a),t(s,fe,a),t(s,Gl,a),h(ge,s,a),t(s,Xl,a),h(Me,s,a),t(s,Vl,a),t(s,ye,a),t(s,Rl,a),h(we,s,a),t(s,Nl,a),t(s,be,a),t(s,Yl,a),t(s,Te,a),t(s,Fl,a),t(s,Je,a),t(s,Ql,a),h(Ue,s,a),t(s,Wl,a),h(xe,s,a),t(s,Bl,a),t(s,$e,a),t(s,zl,a),t(s,_e,a),t(s,ql,a),h(Ie,s,a),t(s,El,a),t(s,Ce,a),t(s,Hl,a),h(ke,s,a),t(s,Al,a),h(Ze,s,a),t(s,Sl,a),t(s,ve,a),t(s,Ll,a),t(s,Ge,a),t(s,Dl,a),t(s,Xe,a),t(s,Pl,a),h(Ve,s,a),t(s,Kl,a),h(Re,s,a),t(s,Ol,a),t(s,Ne,a),sp=!0},p(s,[a]){const Bi={};a&2&&(Bi.$$scope={dirty:a,ctx:s}),T.$set(Bi);const zi={};a&2&&(zi.$$scope={dirty:a,ctx:s}),J.$set(zi);const qi={};a&2&&(qi.$$scope={dirty:a,ctx:s}),U.$set(qi);const Ei={};a&2&&(Ei.$$scope={dirty:a,ctx:s}),x.$set(Ei)},i(s){sp||(m($.$$.fragment,s),m(v.$$.fragment,s),m(T.$$.fragment,s),m(G.$$.fragment,s),m(V.$$.fragment,s),m(N.$$.fragment,s),m(F.$$.fragment,s),m(W.$$.fragment,s),m(z.$$.fragment,s),m(q.$$.fragment,s),m(A.$$.fragment,s),m(L.$$.fragment,s),m(P.$$.fragment,s),m(O.$$.fragment,s),m(as.$$.fragment,s),m(ts.$$.fragment,s),m(ps.$$.fragment,s),m(rs.$$.fragment,s),m(cs.$$.fragment,s),m(hs.$$.fragment,s),m(us.$$.fragment,s),m(js.$$.fragment,s),m(gs.$$.fragment,s),m(ys.$$.fragment,s),m(ws.$$.fragment,s),m(Ts.$$.fragment,s),m(J.$$.fragment,s),m(Us.$$.fragment,s),m(xs.$$.fragment,s),m(_s.$$.fragment,s),m(Cs.$$.fragment,s),m(Zs.$$.fragment,s),m(Vs.$$.fragment,s),m(Ns.$$.fragment,s),m(Qs.$$.fragment,s),m(U.$$.fragment,s),m(Bs.$$.fragment,s),m(zs.$$.fragment,s),m(Es.$$.fragment,s),m(As.$$.fragment,s),m(Ls.$$.fragment,s),m(Ds.$$.fragment,s),m(Ks.$$.fragment,s),m(aa.$$.fragment,s),m(ta.$$.fragment,s),m(la.$$.fragment,s),m(pa.$$.fragment,s),m(ca.$$.fragment,s),m(ha.$$.fragment,s),m(da.$$.fragment,s),m(ja.$$.fragment,s),m(Ma.$$.fragment,s),m(Ta.$$.fragment,s),m(xa.$$.fragment,s),m(_a.$$.fragment,s),m(Ia.$$.fragment,s),m(Za.$$.fragment,s),m(va.$$.fragment,s),m(Va.$$.fragment,s),m(Fa.$$.fragment,s),m(Wa.$$.fragment,s),m(za.$$.fragment,s),m(qa.$$.fragment,s),m(Aa.$$.fragment,s),m(La.$$.fragment,s),m(Da.$$.fragment,s),m(Oa.$$.fragment,s),m(ae.$$.fragment,s),m(te.$$.fragment,s),m(ne.$$.fragment,s),m(x.$$.fragment,s),m(ce.$$.fragment,s),m(oe.$$.fragment,s),m(je.$$.fragment,s),m(ge.$$.fragment,s),m(Me.$$.fragment,s),m(we.$$.fragment,s),m(Ue.$$.fragment,s),m(xe.$$.fragment,s),m(Ie.$$.fragment,s),m(ke.$$.fragment,s),m(Ze.$$.fragment,s),m(Ve.$$.fragment,s),m(Re.$$.fragment,s),sp=!0)},o(s){d($.$$.fragment,s),d(v.$$.fragment,s),d(T.$$.fragment,s),d(G.$$.fragment,s),d(V.$$.fragment,s),d(N.$$.fragment,s),d(F.$$.fragment,s),d(W.$$.fragment,s),d(z.$$.fragment,s),d(q.$$.fragment,s),d(A.$$.fragment,s),d(L.$$.fragment,s),d(P.$$.fragment,s),d(O.$$.fragment,s),d(as.$$.fragment,s),d(ts.$$.fragment,s),d(ps.$$.fragment,s),d(rs.$$.fragment,s),d(cs.$$.fragment,s),d(hs.$$.fragment,s),d(us.$$.fragment,s),d(js.$$.fragment,s),d(gs.$$.fragment,s),d(ys.$$.fragment,s),d(ws.$$.fragment,s),d(Ts.$$.fragment,s),d(J.$$.fragment,s),d(Us.$$.fragment,s),d(xs.$$.fragment,s),d(_s.$$.fragment,s),d(Cs.$$.fragment,s),d(Zs.$$.fragment,s),d(Vs.$$.fragment,s),d(Ns.$$.fragment,s),d(Qs.$$.fragment,s),d(U.$$.fragment,s),d(Bs.$$.fragment,s),d(zs.$$.fragment,s),d(Es.$$.fragment,s),d(As.$$.fragment,s),d(Ls.$$.fragment,s),d(Ds.$$.fragment,s),d(Ks.$$.fragment,s),d(aa.$$.fragment,s),d(ta.$$.fragment,s),d(la.$$.fragment,s),d(pa.$$.fragment,s),d(ca.$$.fragment,s),d(ha.$$.fragment,s),d(da.$$.fragment,s),d(ja.$$.fragment,s),d(Ma.$$.fragment,s),d(Ta.$$.fragment,s),d(xa.$$.fragment,s),d(_a.$$.fragment,s),d(Ia.$$.fragment,s),d(Za.$$.fragment,s),d(va.$$.fragment,s),d(Va.$$.fragment,s),d(Fa.$$.fragment,s),d(Wa.$$.fragment,s),d(za.$$.fragment,s),d(qa.$$.fragment,s),d(Aa.$$.fragment,s),d(La.$$.fragment,s),d(Da.$$.fragment,s),d(Oa.$$.fragment,s),d(ae.$$.fragment,s),d(te.$$.fragment,s),d(ne.$$.fragment,s),d(x.$$.fragment,s),d(ce.$$.fragment,s),d(oe.$$.fragment,s),d(je.$$.fragment,s),d(ge.$$.fragment,s),d(Me.$$.fragment,s),d(we.$$.fragment,s),d(Ue.$$.fragment,s),d(xe.$$.fragment,s),d(Ie.$$.fragment,s),d(ke.$$.fragment,s),d(Ze.$$.fragment,s),d(Ve.$$.fragment,s),d(Re.$$.fragment,s),sp=!1},d(s){s&&(e(y),e(g),e(w),e(Ye),e(_),e(Fe),e(I),e(Qe),e(C),e(We),e(k),e(Be),e(Z),e(ze),e(qe),e(Ee),e(He),e(X),e(Ae),e(Se),e(R),e(Le),e(De),e(Y),e(Pe),e(Ke),e(Q),e(Oe),e(st),e(B),e(at),e(et),e(tt),e(E),e(nt),e(H),e(lt),e(pt),e(S),e(it),e(rt),e(D),e(ct),e(ot),e(K),e(ht),e(mt),e(ss),e(dt),e(ut),e(es),e(jt),e(ft),e(ns),e(gt),e(ls),e(Mt),e(yt),e(is),e(wt),e(bt),e(Tt),e(os),e(Jt),e(Ut),e(ms),e(xt),e(ds),e($t),e(_t),e(It),e(fs),e(Ct),e(kt),e(Ms),e(Zt),e(vt),e(Gt),e(bs),e(Xt),e(Vt),e(Rt),e(Js),e(Nt),e(Yt),e(Ft),e($s),e(Qt),e(Wt),e(Is),e(Bt),e(zt),e(ks),e(qt),e(Et),e(vs),e(Ht),e(Gs),e(At),e(Xs),e(St),e(Lt),e(Rs),e(Dt),e(Pt),e(Ys),e(Kt),e(Fs),e(Ot),e(sn),e(an),e(Ws),e(en),e(tn),e(nn),e(qs),e(ln),e(pn),e(Hs),e(rn),e(cn),e(Ss),e(on),e(hn),e(mn),e(Ps),e(dn),e(un),e(Os),e(jn),e(sa),e(fn),e(gn),e(ea),e(Mn),e(yn),e(na),e(wn),e(bn),e(Tn),e(ia),e(Jn),e(ra),e(Un),e(xn),e(oa),e($n),e(_n),e(ma),e(In),e(Cn),e(ua),e(kn),e(Zn),e(fa),e(vn),e(ga),e(Gn),e(Xn),e(ya),e(Vn),e(wa),e(Rn),e(ba),e(Nn),e(Yn),e(Ja),e(Fn),e(Ua),e(Qn),e(Wn),e($a),e(Bn),e(zn),e(qn),e(Ca),e(En),e(ka),e(Hn),e(An),e(Sn),e(Ga),e(Ln),e(Xa),e(Dn),e(Pn),e(Ra),e(Kn),e(Na),e(On),e(Ya),e(sl),e(al),e(Qa),e(el),e(tl),e(Ba),e(nl),e(ll),e(pl),e(Ea),e(il),e(Ha),e(rl),e(cl),e(Sa),e(ol),e(hl),e(ml),e(Pa),e(dl),e(Ka),e(ul),e(jl),e(se),e(fl),e(gl),e(ee),e(Ml),e(yl),e(wl),e(le),e(bl),e(pe),e(Tl),e(ie),e(Jl),e(Ul),e(re),e(xl),e($l),e(_l),e(he),e(Il),e(me),e(Cl),e(de),e(kl),e(ue),e(Zl),e(vl),e(fe),e(Gl),e(Xl),e(Vl),e(ye),e(Rl),e(Nl),e(be),e(Yl),e(Te),e(Fl),e(Je),e(Ql),e(Wl),e(Bl),e($e),e(zl),e(_e),e(ql),e(El),e(Ce),e(Hl),e(Al),e(Sl),e(ve),e(Ll),e(Ge),e(Dl),e(Xe),e(Pl),e(Kl),e(Ol),e(Ne)),e(f),u($,s),u(v,s),u(T,s),u(G,s),u(V,s),u(N,s),u(F,s),u(W,s),u(z,s),u(q,s),u(A,s),u(L,s),u(P,s),u(O,s),u(as,s),u(ts,s),u(ps,s),u(rs,s),u(cs,s),u(hs,s),u(us,s),u(js,s),u(gs,s),u(ys,s),u(ws,s),u(Ts,s),u(J,s),u(Us,s),u(xs,s),u(_s,s),u(Cs,s),u(Zs,s),u(Vs,s),u(Ns,s),u(Qs,s),u(U,s),u(Bs,s),u(zs,s),u(Es,s),u(As,s),u(Ls,s),u(Ds,s),u(Ks,s),u(aa,s),u(ta,s),u(la,s),u(pa,s),u(ca,s),u(ha,s),u(da,s),u(ja,s),u(Ma,s),u(Ta,s),u(xa,s),u(_a,s),u(Ia,s),u(Za,s),u(va,s),u(Va,s),u(Fa,s),u(Wa,s),u(za,s),u(qa,s),u(Aa,s),u(La,s),u(Da,s),u(Oa,s),u(ae,s),u(te,s),u(ne,s),u(x,s),u(ce,s),u(oe,s),u(je,s),u(ge,s),u(Me,s),u(we,s),u(Ue,s),u(xe,s),u(Ie,s),u(ke,s),u(Ze,s),u(Ve,s),u(Re,s)}}}const pr='{"title":"Process","local":"process","sections":[{"title":"Sort, shuffle, select, split, and shard","local":"sort-shuffle-select-split-and-shard","sections":[{"title":"Sort","local":"sort","sections":[],"depth":3},{"title":"Shuffle","local":"shuffle","sections":[],"depth":3},{"title":"Select and Filter","local":"select-and-filter","sections":[],"depth":3},{"title":"Split","local":"split","sections":[],"depth":3},{"title":"Shard","local":"shard","sections":[],"depth":3}],"depth":2},{"title":"Rename, remove, cast, and flatten","local":"rename-remove-cast-and-flatten","sections":[{"title":"Rename","local":"rename","sections":[],"depth":3},{"title":"Remove","local":"remove","sections":[],"depth":3},{"title":"Cast","local":"cast","sections":[],"depth":3},{"title":"Flatten","local":"flatten","sections":[],"depth":3}],"depth":2},{"title":"Map","local":"map","sections":[{"title":"Multiprocessing","local":"multiprocessing","sections":[],"depth":3},{"title":"Batch processing","local":"batch-processing","sections":[{"title":"Split long examples","local":"split-long-examples","sections":[],"depth":4},{"title":"Data augmentation","local":"data-augmentation","sections":[],"depth":4}],"depth":3},{"title":"Asynchronous processing","local":"asynchronous-processing","sections":[],"depth":3},{"title":"Process multiple splits","local":"process-multiple-splits","sections":[],"depth":3},{"title":"Distributed usage","local":"distributed-usage","sections":[],"depth":3}],"depth":2},{"title":"Batch","local":"batch","sections":[],"depth":2},{"title":"Concatenate","local":"concatenate","sections":[{"title":"Interleave","local":"interleave","sections":[],"depth":3}],"depth":2},{"title":"Format","local":"format","sections":[{"title":"Tensors formats","local":"tensors-formats","sections":[],"depth":3},{"title":"Tabular formats","local":"tabular-formats","sections":[],"depth":3},{"title":"Custom format transform","local":"custom-format-transform","sections":[],"depth":3}],"depth":2},{"title":"Save","local":"save","sections":[],"depth":2},{"title":"Export","local":"export","sections":[],"depth":2}],"depth":1}';function ir(b){return Li(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dr extends Di{constructor(f){super(),Pi(this,f,ir,lr,Si,{})}}export{dr as component};
