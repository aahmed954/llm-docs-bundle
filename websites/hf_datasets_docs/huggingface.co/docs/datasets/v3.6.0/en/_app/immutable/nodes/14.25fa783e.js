import{s as Jt,n as bt,o as Tt}from"../chunks/scheduler.bdbef820.js";import{S as Mt,i as jt,g as o,s as l,r as d,A as kt,h as i,f as a,c as n,j as ie,u as p,x as r,k as Ee,y as c,a as s,v as u,d as h,t as m,w as f}from"../chunks/index.c0aea24a.js";import{C as J}from"../chunks/CodeBlock.e814ab8d.js";import{H as Ye,E as vt}from"../chunks/index.89e522f3.js";function $t(De){let w,re,ne,de,k,pe,v,Ae='Sometimes, you may need to create a dataset if youâ€™re working with your own data. Creating a dataset with ðŸ¤— Datasets confers all the advantages of the library to your dataset: fast loading and processing, <a href="stream">stream enormous datasets</a>, <a href="https://huggingface.co/course/chapter5/4?fw=pt#the-magic-of-memory-mapping" rel="nofollow">memory-mapping</a>, and more. You can easily and rapidly create a dataset with ðŸ¤— Datasets low-code approaches, reducing the time it takes to start training a model. In many cases, it is as easy as <a href="upload_dataset#upload-with-the-hub-ui">dragging and dropping</a> your data files into a dataset repository on the Hub.',ce,$,Ke="In this tutorial, youâ€™ll learn how to use ðŸ¤— Datasets low-code methods for creating all types of datasets:",ue,U,Oe="<li>Folder-based builders for quickly creating an image or audio dataset</li> <li><code>from_</code> methods for creating datasets from local files</li>",he,G,me,_,et="ðŸ¤— Datasets supports many common formats such as <code>csv</code>, <code>json/jsonl</code>, <code>parquet</code>, <code>txt</code>.",fe,I,tt="For example it can read a dataset made up of one or several CSV files (in this case, pass your CSV files as a list):",ge,q,ye,Z,at='To get the list of supported formats and code examples, follow this guide <a href="https://huggingface.co/docs/datasets/loading#local-and-remote-files" rel="nofollow">here</a>.',we,C,Je,x,st="There are two folder-based builders, <code>ImageFolder</code> and <code>AudioFolder</code>. These are low-code methods for quickly creating an image or speech and audio dataset with several thousand examples. They are great for rapidly prototyping computer vision and speech models before scaling to a larger dataset. Folder-based builders takes your data and automatically generates the datasetâ€™s features, splits, and labels. Under the hood:",be,R,lt='<li><code>ImageFolder</code> uses the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Image">Image</a> feature to decode an image file. Many image extension formats are supported, such as jpg and png, but other formats are also supported. You can check the complete <a href="https://github.com/huggingface/datasets/blob/b5672a956d5de864e6f5550e493527d962d6ae55/src/datasets/packaged_modules/imagefolder/imagefolder.py#L39" rel="nofollow">list</a> of supported image extensions.</li> <li><code>AudioFolder</code> uses the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a> feature to decode an audio file. Audio extensions such as wav and mp3 are supported, and you can check the complete <a href="https://github.com/huggingface/datasets/blob/b5672a956d5de864e6f5550e493527d962d6ae55/src/datasets/packaged_modules/audiofolder/audiofolder.py#L39" rel="nofollow">list</a> of supported audio extensions.</li>',Te,F,nt="The dataset splits are generated from the repository structure, and the label names are automatically inferred from the directory name.",Me,X,ot="For example, if your image dataset (it is the same for an audio dataset) is stored like this:",je,B,ke,W,it="Then this is how the folder-based builder generates an example:",ve,b,rt='<img src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/datasets/folder-based-builder.png"/>',$e,H,dt='Create the image dataset by specifying <code>imagefolder</code> in <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a>:',Ue,Y,Ge,z,pt='An audio dataset is created in the same way, except you specify <code>audiofolder</code> in <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a> instead:',_e,L,Ie,N,ct="Any additional information about your dataset, such as text captions or transcriptions, can be included with a <code>metadata.csv</code> file in the folder containing your dataset. The metadata file needs to have a <code>file_name</code> column that links the image or audio file to its corresponding metadata:",qe,Q,Ze,V,ut='To learn more about each of these folder-based builders, check out the and <a href="https://huggingface.co/docs/datasets/image_dataset#imagefolder"><span class="underline decoration-yellow-400 decoration-2 font-semibold">ImageFolder</span></a> or <a href="https://huggingface.co/docs/datasets/audio_dataset#audiofolder"><span class="underline decoration-pink-400 decoration-2 font-semibold">AudioFolder</span></a> guides.',Ce,S,xe,P,ht="You can also create a dataset from data in Python dictionaries. There are two ways you can create a dataset using the <code>from_</code> methods:",Re,T,g,te,mt='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.from_generator">from_generator()</a> method is the most memory-efficient way to create a dataset from a <a href="https://wiki.python.org/moin/Generators" rel="nofollow">generator</a> due to a generators iterative behavior. This is especially useful when youâ€™re working with a really large dataset that may not fit in memory, since the dataset is generated on disk progressively and then memory-mapped.',ze,E,Le,ae,ft='A generator-based <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> needs to be iterated over with a <code>for</code> loop for example:',Ne,D,Qe,y,se,gt='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.from_dict">from_dict()</a> method is a straightforward way to create a dataset from a dictionary:',Ve,A,Se,le,yt='To create an image or audio dataset, chain the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.cast_column">cast_column()</a> method with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.from_dict">from_dict()</a> and specify the column and feature type. For example, to create an audio dataset:',Pe,K,Fe,O,wt="Now that you know how to create a dataset, consider sharing it on the Hub so the community can also benefit from your work! Go on to the next section to learn how to share your dataset.",Xe,ee,Be,oe,We;return k=new Ye({props:{title:"Create a dataset",local:"create-a-dataset",headingTag:"h1"}}),G=new Ye({props:{title:"File-based builders",local:"file-based-builders",headingTag:"h2"}}),q=new J({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjc3YlMjIlMkMlMjBkYXRhX2ZpbGVzJTNEJTIybXlfZmlsZS5jc3YlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.csv&quot;</span>)`,wrap:!1}}),C=new Ye({props:{title:"Folder-based builders",local:"folder-based-builders",headingTag:"h2"}}),B=new J({props:{code:"cG9rZW1vbiUyRnRyYWluJTJGZ3Jhc3MlMkZidWxiYXNhdXIucG5nJTBBcG9rZW1vbiUyRnRyYWluJTJGZmlyZSUyRmNoYXJtYW5kZXIucG5nJTBBcG9rZW1vbiUyRnRyYWluJTJGd2F0ZXIlMkZzcXVpcnRsZS5wbmclMEElMEFwb2tlbW9uJTJGdGVzdCUyRmdyYXNzJTJGaXZ5c2F1ci5wbmclMEFwb2tlbW9uJTJGdGVzdCUyRmZpcmUlMkZjaGFybWVsZW9uLnBuZyUwQXBva2Vtb24lMkZ0ZXN0JTJGd2F0ZXIlMkZ3YXJ0b3J0bGUucG5n",highlighted:`pokemon<span class="hljs-regexp">/train/g</span>rass/bulbasaur.png
pokemon<span class="hljs-regexp">/train/</span>fire/charmander.png
pokemon<span class="hljs-regexp">/train/</span>water/squirtle.png

pokemon<span class="hljs-regexp">/test/g</span>rass/ivysaur.png
pokemon<span class="hljs-regexp">/test/</span>fire/charmeleon.png
pokemon<span class="hljs-regexp">/test/</span>water/wartortle.png`,wrap:!1}}),Y=new J({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJpbWFnZWZvbGRlciUyMiUyQyUyMGRhdGFfZGlyJTNEJTIyJTJGcGF0aCUyRnRvJTJGcG9rZW1vbiUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/pokemon&quot;</span>)`,wrap:!1}}),L=new J({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJhdWRpb2ZvbGRlciUyMiUyQyUyMGRhdGFfZGlyJTNEJTIyJTJGcGF0aCUyRnRvJTJGZm9sZGVyJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;audiofolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)`,wrap:!1}}),Q=new J({props:{code:"ZmlsZV9uYW1lJTJDJTIwdGV4dCUwQWJ1bGJhc2F1ci5wbmclMkMlMjBUaGVyZSUyMGlzJTIwYSUyMHBsYW50JTIwc2VlZCUyMG9uJTIwaXRzJTIwYmFjayUyMHJpZ2h0JTIwZnJvbSUyMHRoZSUyMGRheSUyMHRoaXMlMjBQb2slQzMlQTltb24lMjBpcyUyMGJvcm4uJTBBY2hhcm1hbmRlci5wbmclMkMlMjBJdCUyMGhhcyUyMGElMjBwcmVmZXJlbmNlJTIwZm9yJTIwaG90JTIwdGhpbmdzLiUwQXNxdWlydGxlLnBuZyUyQyUyMFdoZW4lMjBpdCUyMHJldHJhY3RzJTIwaXRzJTIwbG9uZyUyMG5lY2slMjBpbnRvJTIwaXRzJTIwc2hlbGwlMkMlMjBpdCUyMHNxdWlydHMlMjBvdXQlMjB3YXRlciUyMHdpdGglMjB2aWdvcm91cyUyMGZvcmNlLg==",highlighted:`file_name, <span class="hljs-built_in">text</span>
bulbasaur.png, There <span class="hljs-keyword">is</span> a plant seed <span class="hljs-keyword">on</span> <span class="hljs-keyword">its</span> <span class="hljs-keyword">back</span> right <span class="hljs-keyword">from</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">day</span> this PokÃ©mon <span class="hljs-keyword">is</span> born.
charmander.png, It has a preference <span class="hljs-keyword">for</span> hot things.
squirtle.png, When <span class="hljs-keyword">it</span> retracts <span class="hljs-keyword">its</span> long neck <span class="hljs-keyword">into</span> <span class="hljs-keyword">its</span> shell, <span class="hljs-keyword">it</span> squirts out water <span class="hljs-keyword">with</span> vigorous force.`,wrap:!1}}),S=new Ye({props:{title:"From Python dictionaries",local:"from-python-dictionaries",headingTag:"h2"}}),E=new J({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUwQWRlZiUyMGdlbigpJTNBJTBBJTIwJTIwJTIwJTIweWllbGQlMjAlN0IlMjJwb2tlbW9uJTIyJTNBJTIwJTIyYnVsYmFzYXVyJTIyJTJDJTIwJTIydHlwZSUyMiUzQSUyMCUyMmdyYXNzJTIyJTdEJTBBJTIwJTIwJTIwJTIweWllbGQlMjAlN0IlMjJwb2tlbW9uJTIyJTNBJTIwJTIyc3F1aXJ0bGUlMjIlMkMlMjAlMjJ0eXBlJTIyJTNBJTIwJTIyd2F0ZXIlMjIlN0QlMEFkcyUyMCUzRCUyMERhdGFzZXQuZnJvbV9nZW5lcmF0b3IoZ2VuKSUwQWRzJTVCMCU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;pokemon&quot;</span>: <span class="hljs-string">&quot;bulbasaur&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;grass&quot;</span>}
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;pokemon&quot;</span>: <span class="hljs-string">&quot;squirtle&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;water&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_generator(gen)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&quot;pokemon&quot;</span>: <span class="hljs-string">&quot;bulbasaur&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;grass&quot;</span>}`,wrap:!1}}),D=new J({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwSXRlcmFibGVEYXRhc2V0JTBBZHMlMjAlM0QlMjBJdGVyYWJsZURhdGFzZXQuZnJvbV9nZW5lcmF0b3IoZ2VuKSUwQWZvciUyMGV4YW1wbGUlMjBpbiUyMGRzJTNBJTBBJTIwJTIwJTIwJTIwcHJpbnQoZXhhbXBsZSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> IterableDataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = IterableDataset.from_generator(gen)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> ds:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(example)
{<span class="hljs-string">&quot;pokemon&quot;</span>: <span class="hljs-string">&quot;bulbasaur&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;grass&quot;</span>}
{<span class="hljs-string">&quot;pokemon&quot;</span>: <span class="hljs-string">&quot;squirtle&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;water&quot;</span>}`,wrap:!1}}),A=new J({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUwQWRzJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIycG9rZW1vbiUyMiUzQSUyMCU1QiUyMmJ1bGJhc2F1ciUyMiUyQyUyMCUyMnNxdWlydGxlJTIyJTVEJTJDJTIwJTIydHlwZSUyMiUzQSUyMCU1QiUyMmdyYXNzJTIyJTJDJTIwJTIyd2F0ZXIlMjIlNUQlN0QpJTBBZHMlNUIwJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;pokemon&quot;</span>: [<span class="hljs-string">&quot;bulbasaur&quot;</span>, <span class="hljs-string">&quot;squirtle&quot;</span>], <span class="hljs-string">&quot;type&quot;</span>: [<span class="hljs-string">&quot;grass&quot;</span>, <span class="hljs-string">&quot;water&quot;</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&quot;pokemon&quot;</span>: <span class="hljs-string">&quot;bulbasaur&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;grass&quot;</span>}`,wrap:!1}}),K=new J({props:{code:"YXVkaW9fZGF0YXNldCUyMCUzRCUyMERhdGFzZXQuZnJvbV9kaWN0KCU3QiUyMmF1ZGlvJTIyJTNBJTIwJTVCJTIycGF0aCUyRnRvJTJGYXVkaW9fMSUyMiUyQyUyMC4uLiUyQyUyMCUyMnBhdGglMkZ0byUyRmF1ZGlvX24lMjIlNUQlN0QpLmNhc3RfY29sdW1uKCUyMmF1ZGlvJTIyJTJDJTIwQXVkaW8oKSk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>audio_dataset = Dataset.from_dict({<span class="hljs-string">&quot;audio&quot;</span>: [<span class="hljs-string">&quot;path/to/audio_1&quot;</span>, ..., <span class="hljs-string">&quot;path/to/audio_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio())',wrap:!1}}),ee=new vt({props:{source:"https://github.com/huggingface/datasets/blob/main/docs/source/create_dataset.mdx"}}),{c(){w=o("meta"),re=l(),ne=o("p"),de=l(),d(k.$$.fragment),pe=l(),v=o("p"),v.innerHTML=Ae,ce=l(),$=o("p"),$.textContent=Ke,ue=l(),U=o("ul"),U.innerHTML=Oe,he=l(),d(G.$$.fragment),me=l(),_=o("p"),_.innerHTML=et,fe=l(),I=o("p"),I.textContent=tt,ge=l(),d(q.$$.fragment),ye=l(),Z=o("p"),Z.innerHTML=at,we=l(),d(C.$$.fragment),Je=l(),x=o("p"),x.innerHTML=st,be=l(),R=o("ul"),R.innerHTML=lt,Te=l(),F=o("p"),F.textContent=nt,Me=l(),X=o("p"),X.textContent=ot,je=l(),d(B.$$.fragment),ke=l(),W=o("p"),W.textContent=it,ve=l(),b=o("div"),b.innerHTML=rt,$e=l(),H=o("p"),H.innerHTML=dt,Ue=l(),d(Y.$$.fragment),Ge=l(),z=o("p"),z.innerHTML=pt,_e=l(),d(L.$$.fragment),Ie=l(),N=o("p"),N.innerHTML=ct,qe=l(),d(Q.$$.fragment),Ze=l(),V=o("p"),V.innerHTML=ut,Ce=l(),d(S.$$.fragment),xe=l(),P=o("p"),P.innerHTML=ht,Re=l(),T=o("ul"),g=o("li"),te=o("p"),te.innerHTML=mt,ze=l(),d(E.$$.fragment),Le=l(),ae=o("p"),ae.innerHTML=ft,Ne=l(),d(D.$$.fragment),Qe=l(),y=o("li"),se=o("p"),se.innerHTML=gt,Ve=l(),d(A.$$.fragment),Se=l(),le=o("p"),le.innerHTML=yt,Pe=l(),d(K.$$.fragment),Fe=l(),O=o("p"),O.textContent=wt,Xe=l(),d(ee.$$.fragment),Be=l(),oe=o("p"),this.h()},l(e){const t=kt("svelte-u9bgzb",document.head);w=i(t,"META",{name:!0,content:!0}),t.forEach(a),re=n(e),ne=i(e,"P",{}),ie(ne).forEach(a),de=n(e),p(k.$$.fragment,e),pe=n(e),v=i(e,"P",{"data-svelte-h":!0}),r(v)!=="svelte-v9imqp"&&(v.innerHTML=Ae),ce=n(e),$=i(e,"P",{"data-svelte-h":!0}),r($)!=="svelte-1cv0g2h"&&($.textContent=Ke),ue=n(e),U=i(e,"UL",{"data-svelte-h":!0}),r(U)!=="svelte-1lzxsuu"&&(U.innerHTML=Oe),he=n(e),p(G.$$.fragment,e),me=n(e),_=i(e,"P",{"data-svelte-h":!0}),r(_)!=="svelte-109f0ey"&&(_.innerHTML=et),fe=n(e),I=i(e,"P",{"data-svelte-h":!0}),r(I)!=="svelte-1qx83so"&&(I.textContent=tt),ge=n(e),p(q.$$.fragment,e),ye=n(e),Z=i(e,"P",{"data-svelte-h":!0}),r(Z)!=="svelte-y2h2bt"&&(Z.innerHTML=at),we=n(e),p(C.$$.fragment,e),Je=n(e),x=i(e,"P",{"data-svelte-h":!0}),r(x)!=="svelte-gu1tts"&&(x.innerHTML=st),be=n(e),R=i(e,"UL",{"data-svelte-h":!0}),r(R)!=="svelte-1dkfb03"&&(R.innerHTML=lt),Te=n(e),F=i(e,"P",{"data-svelte-h":!0}),r(F)!=="svelte-v88ugk"&&(F.textContent=nt),Me=n(e),X=i(e,"P",{"data-svelte-h":!0}),r(X)!=="svelte-cn9wsj"&&(X.textContent=ot),je=n(e),p(B.$$.fragment,e),ke=n(e),W=i(e,"P",{"data-svelte-h":!0}),r(W)!=="svelte-5wcoi"&&(W.textContent=it),ve=n(e),b=i(e,"DIV",{class:!0,"data-svelte-h":!0}),r(b)!=="svelte-mid65z"&&(b.innerHTML=rt),$e=n(e),H=i(e,"P",{"data-svelte-h":!0}),r(H)!=="svelte-omh19y"&&(H.innerHTML=dt),Ue=n(e),p(Y.$$.fragment,e),Ge=n(e),z=i(e,"P",{"data-svelte-h":!0}),r(z)!=="svelte-19o32go"&&(z.innerHTML=pt),_e=n(e),p(L.$$.fragment,e),Ie=n(e),N=i(e,"P",{"data-svelte-h":!0}),r(N)!=="svelte-ai9qzj"&&(N.innerHTML=ct),qe=n(e),p(Q.$$.fragment,e),Ze=n(e),V=i(e,"P",{"data-svelte-h":!0}),r(V)!=="svelte-c9ukhj"&&(V.innerHTML=ut),Ce=n(e),p(S.$$.fragment,e),xe=n(e),P=i(e,"P",{"data-svelte-h":!0}),r(P)!=="svelte-8iho7z"&&(P.innerHTML=ht),Re=n(e),T=i(e,"UL",{});var He=ie(T);g=i(He,"LI",{});var M=ie(g);te=i(M,"P",{"data-svelte-h":!0}),r(te)!=="svelte-rbzucz"&&(te.innerHTML=mt),ze=n(M),p(E.$$.fragment,M),Le=n(M),ae=i(M,"P",{"data-svelte-h":!0}),r(ae)!=="svelte-kmdi30"&&(ae.innerHTML=ft),Ne=n(M),p(D.$$.fragment,M),M.forEach(a),Qe=n(He),y=i(He,"LI",{});var j=ie(y);se=i(j,"P",{"data-svelte-h":!0}),r(se)!=="svelte-1afnqve"&&(se.innerHTML=gt),Ve=n(j),p(A.$$.fragment,j),Se=n(j),le=i(j,"P",{"data-svelte-h":!0}),r(le)!=="svelte-kh1kfi"&&(le.innerHTML=yt),Pe=n(j),p(K.$$.fragment,j),j.forEach(a),He.forEach(a),Fe=n(e),O=i(e,"P",{"data-svelte-h":!0}),r(O)!=="svelte-uhu1ny"&&(O.textContent=wt),Xe=n(e),p(ee.$$.fragment,e),Be=n(e),oe=i(e,"P",{}),ie(oe).forEach(a),this.h()},h(){Ee(w,"name","hf:doc:metadata"),Ee(w,"content",Ut),Ee(b,"class","flex justify-center")},m(e,t){c(document.head,w),s(e,re,t),s(e,ne,t),s(e,de,t),u(k,e,t),s(e,pe,t),s(e,v,t),s(e,ce,t),s(e,$,t),s(e,ue,t),s(e,U,t),s(e,he,t),u(G,e,t),s(e,me,t),s(e,_,t),s(e,fe,t),s(e,I,t),s(e,ge,t),u(q,e,t),s(e,ye,t),s(e,Z,t),s(e,we,t),u(C,e,t),s(e,Je,t),s(e,x,t),s(e,be,t),s(e,R,t),s(e,Te,t),s(e,F,t),s(e,Me,t),s(e,X,t),s(e,je,t),u(B,e,t),s(e,ke,t),s(e,W,t),s(e,ve,t),s(e,b,t),s(e,$e,t),s(e,H,t),s(e,Ue,t),u(Y,e,t),s(e,Ge,t),s(e,z,t),s(e,_e,t),u(L,e,t),s(e,Ie,t),s(e,N,t),s(e,qe,t),u(Q,e,t),s(e,Ze,t),s(e,V,t),s(e,Ce,t),u(S,e,t),s(e,xe,t),s(e,P,t),s(e,Re,t),s(e,T,t),c(T,g),c(g,te),c(g,ze),u(E,g,null),c(g,Le),c(g,ae),c(g,Ne),u(D,g,null),c(T,Qe),c(T,y),c(y,se),c(y,Ve),u(A,y,null),c(y,Se),c(y,le),c(y,Pe),u(K,y,null),s(e,Fe,t),s(e,O,t),s(e,Xe,t),u(ee,e,t),s(e,Be,t),s(e,oe,t),We=!0},p:bt,i(e){We||(h(k.$$.fragment,e),h(G.$$.fragment,e),h(q.$$.fragment,e),h(C.$$.fragment,e),h(B.$$.fragment,e),h(Y.$$.fragment,e),h(L.$$.fragment,e),h(Q.$$.fragment,e),h(S.$$.fragment,e),h(E.$$.fragment,e),h(D.$$.fragment,e),h(A.$$.fragment,e),h(K.$$.fragment,e),h(ee.$$.fragment,e),We=!0)},o(e){m(k.$$.fragment,e),m(G.$$.fragment,e),m(q.$$.fragment,e),m(C.$$.fragment,e),m(B.$$.fragment,e),m(Y.$$.fragment,e),m(L.$$.fragment,e),m(Q.$$.fragment,e),m(S.$$.fragment,e),m(E.$$.fragment,e),m(D.$$.fragment,e),m(A.$$.fragment,e),m(K.$$.fragment,e),m(ee.$$.fragment,e),We=!1},d(e){e&&(a(re),a(ne),a(de),a(pe),a(v),a(ce),a($),a(ue),a(U),a(he),a(me),a(_),a(fe),a(I),a(ge),a(ye),a(Z),a(we),a(Je),a(x),a(be),a(R),a(Te),a(F),a(Me),a(X),a(je),a(ke),a(W),a(ve),a(b),a($e),a(H),a(Ue),a(Ge),a(z),a(_e),a(Ie),a(N),a(qe),a(Ze),a(V),a(Ce),a(xe),a(P),a(Re),a(T),a(Fe),a(O),a(Xe),a(Be),a(oe)),a(w),f(k,e),f(G,e),f(q,e),f(C,e),f(B,e),f(Y,e),f(L,e),f(Q,e),f(S,e),f(E),f(D),f(A),f(K),f(ee,e)}}}const Ut='{"title":"Create a dataset","local":"create-a-dataset","sections":[{"title":"File-based builders","local":"file-based-builders","sections":[],"depth":2},{"title":"Folder-based builders","local":"folder-based-builders","sections":[],"depth":2},{"title":"From Python dictionaries","local":"from-python-dictionaries","sections":[],"depth":2}],"depth":1}';function Gt(De){return Tt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ct extends Mt{constructor(w){super(),jt(this,w,Gt,$t,Jt,{})}}export{Ct as component};
