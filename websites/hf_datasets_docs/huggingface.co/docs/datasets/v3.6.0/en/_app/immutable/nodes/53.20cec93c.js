import{s as xs,n as Gs,o as vs}from"../chunks/scheduler.bdbef820.js";import{S as Bs,i as Ys,g as p,s as e,r,A as Qs,h as o,f as t,c as n,j as qs,u as i,x as c,k as Rs,y as Zs,a as l,v as m,d as h,t as u,w as j}from"../chunks/index.c0aea24a.js";import{C as X}from"../chunks/CodeBlock.e814ab8d.js";import{H as D,E as Es}from"../chunks/index.89e522f3.js";function Xs(fs){let M,S,H,L,d,F,f,ys=`This document is a quick introduction to using <code>datasets</code> with Polars, with a particular focus on how to process
datasets using Polars functions, and how to convert a dataset to Polars or from Polars.`,P,y,bs="This is particularly useful as it allows fast zero-copy operations, since both <code>datasets</code> and Polars use Arrow under the hood.",V,b,W,T,Ts="By default, datasets return regular Python objects: integers, floats, strings, lists, etc.",A,g,gs='To get Polars DataFrames or Series instead, you can set the format of the dataset to <code>polars</code> using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.with_format">Dataset.with_format()</a>:',N,J,K,w,Js="This also works for <code>IterableDataset</code> objects obtained e.g. using <code>load_dataset(..., streaming=True)</code>:",O,U,ss,$,as,_,ws='Polars functions are generally faster than regular hand-written python functions, and therefore they are a good option to optimize data processing. You can use Polars functions to process a dataset in <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">Dataset.map()</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.filter">Dataset.filter()</a>:',ts,I,ls,C,Us="We use <code>batched=True</code> because it is faster to process batches of data in Polars rather than row by row. It’s also possible to use <code>batch_size=</code> in <code>map()</code> to set the size of each <code>df</code>.",es,k,$s='This also works for <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.map">IterableDataset.map()</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.filter">IterableDataset.filter()</a>.',ns,q,ps,R,_s='Many functions are available in Polars and for any data type: string, floats, integers, etc. You can find the full list <a href="https://docs.pola.rs/api/python/stable/reference/expressions/functions.html" rel="nofollow">here</a>. Those functions are written in Rust and run on batches of data which enables fast data processing.',os,x,Is="Here is an example that shows a 5x speed boost using Polars instead of a regular python function to extract solutions from a LLM reasoning dataset:",rs,G,is,v,cs,B,Cs="To import data from Polars, you can use <code>Dataset.from_polars()</code>:",ms,Y,hs,Q,ks="And you can use <code>Dataset.to_polars()</code> to export a Dataset to a Polars DataFrame:",us,Z,js,E,Ms,z,ds;return d=new D({props:{title:"Use with Polars",local:"use-with-polars",headingTag:"h1"}}),b=new D({props:{title:"Dataset format",local:"dataset-format",headingTag:"h2"}}),J=new X({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUwQWRhdGElMjAlM0QlMjAlN0IlMjJjb2xfMCUyMiUzQSUyMCU1QiUyMmElMjIlMkMlMjAlMjJiJTIyJTJDJTIwJTIyYyUyMiUyQyUyMCUyMmQlMjIlNUQlMkMlMjAlMjJjb2xfMSUyMiUzQSUyMCU1QjAuJTJDJTIwMC4lMkMlMjAxLiUyQyUyMDEuJTVEJTdEJTBBZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdChkYXRhKSUwQWRzJTIwJTNEJTIwZHMud2l0aF9mb3JtYXQoJTIycG9sYXJzJTIyKSUwQWRzJTVCMCU1RCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMyUyMHBsLkRhdGFGcmFtZSUwQWRzJTVCJTNBMiU1RCUyMCUyMCUyMCUyMCUyMCUyMCUyMyUyMHBsLkRhdGFGcmFtZSUwQWRzJTVCJTIyZGF0YSUyMiU1RCUyMCUyMCUyMyUyMHBsLlNlcmllcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>data = {<span class="hljs-string">&quot;col_0&quot;</span>: [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>], <span class="hljs-string">&quot;col_1&quot;</span>: [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict(data)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;polars&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]       <span class="hljs-comment"># pl.DataFrame</span>
shape: (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)
┌───────┬───────┐
│ col_0 ┆ col_1 │
│ ---   ┆ ---   │
│ <span class="hljs-built_in">str</span>   ┆ f64   │
╞═══════╪═══════╡
│ a     ┆ <span class="hljs-number">0.0</span>   │
└───────┴───────┘
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>]      <span class="hljs-comment"># pl.DataFrame</span>
shape: (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)
┌───────┬───────┐
│ col_0 ┆ col_1 │
│ ---   ┆ ---   │
│ <span class="hljs-built_in">str</span>   ┆ f64   │
╞═══════╪═══════╡
│ a     ┆ <span class="hljs-number">0.0</span>   │
│ b     ┆ <span class="hljs-number">0.0</span>   │
└───────┴───────┘
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;data&quot;</span>]  <span class="hljs-comment"># pl.Series</span>
shape: (<span class="hljs-number">4</span>,)
Series: <span class="hljs-string">&#x27;col_0&#x27;</span> [<span class="hljs-built_in">str</span>]
[
        <span class="hljs-string">&quot;a&quot;</span>
        <span class="hljs-string">&quot;b&quot;</span>
        <span class="hljs-string">&quot;c&quot;</span>
        <span class="hljs-string">&quot;d&quot;</span>
]`,wrap:!1}}),U=new X({props:{code:"ZHMlMjAlM0QlMjBkcy53aXRoX2Zvcm1hdCglMjJwb2xhcnMlMjIpJTBBZm9yJTIwZGYlMjBpbiUyMGRzLml0ZXIoYmF0Y2hfc2l6ZSUzRDIpJTNBJTBBJTIwJTIwJTIwJTIwcHJpbnQoZGYpJTBBJTIwJTIwJTIwJTIwYnJlYWs=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;polars&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> df <span class="hljs-keyword">in</span> ds.<span class="hljs-built_in">iter</span>(batch_size=<span class="hljs-number">2</span>):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(df)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">break</span>
shape: (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)
┌───────┬───────┐
│ col_0 ┆ col_1 │
│ ---   ┆ ---   │
│ <span class="hljs-built_in">str</span>   ┆ f64   │
╞═══════╪═══════╡
│ a     ┆ <span class="hljs-number">0.0</span>   │
│ b     ┆ <span class="hljs-number">0.0</span>   │
└───────┴───────┘`,wrap:!1}}),$=new D({props:{title:"Process data",local:"process-data",headingTag:"h2"}}),I=new X({props:{code:"aW1wb3J0JTIwcG9sYXJzJTIwYXMlMjBwbCUwQWZyb20lMjBkYXRhc2V0cyUyMGltcG9ydCUyMERhdGFzZXQlMEFkYXRhJTIwJTNEJTIwJTdCJTIyY29sXzAlMjIlM0ElMjAlNUIlMjJhJTIyJTJDJTIwJTIyYiUyMiUyQyUyMCUyMmMlMjIlMkMlMjAlMjJkJTIyJTVEJTJDJTIwJTIyY29sXzElMjIlM0ElMjAlNUIwLiUyQyUyMDAuJTJDJTIwMS4lMkMlMjAxLiU1RCU3RCUwQWRzJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoZGF0YSklMEFkcyUyMCUzRCUyMGRzLndpdGhfZm9ybWF0KCUyMnBvbGFycyUyMiklMEFkcyUyMCUzRCUyMGRzLm1hcChsYW1iZGElMjBkZiUzQSUyMGRmLndpdGhfY29sdW1ucyhwbC5jb2woJTIyY29sXzElMjIpLmFkZCgxKS5hbGlhcyglMjJjb2xfMiUyMikpJTJDJTIwYmF0Y2hlZCUzRFRydWUpJTBBZHMlNUIlM0EyJTVEJTBBZHMlMjAlM0QlMjBkcy5maWx0ZXIobGFtYmRhJTIwZGYlM0ElMjBkZiU1QiUyMmNvbF8wJTIyJTVEJTIwJTNEJTNEJTIwJTIyYiUyMiUyQyUyMGJhdGNoZWQlM0RUcnVlKSUwQWRzJTVCMCU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> polars <span class="hljs-keyword">as</span> pl
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>data = {<span class="hljs-string">&quot;col_0&quot;</span>: [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>], <span class="hljs-string">&quot;col_1&quot;</span>: [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict(data)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;polars&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> df: df.with_columns(pl.col(<span class="hljs-string">&quot;col_1&quot;</span>).add(<span class="hljs-number">1</span>).alias(<span class="hljs-string">&quot;col_2&quot;</span>)), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>]
shape: (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)
┌───────┬───────┬───────┐
│ col_0 ┆ col_1 ┆ col_2 │
│ ---   ┆ ---   ┆ ---   │
│ <span class="hljs-built_in">str</span>   ┆ f64   ┆ f64   │
╞═══════╪═══════╪═══════╡
│ a     ┆ <span class="hljs-number">0.0</span>   ┆ <span class="hljs-number">1.0</span>   │
│ b     ┆ <span class="hljs-number">0.0</span>   ┆ <span class="hljs-number">1.0</span>   │
└───────┴───────┴───────┘
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> df: df[<span class="hljs-string">&quot;col_0&quot;</span>] == <span class="hljs-string">&quot;b&quot;</span>, batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
shape: (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)
┌───────┬───────┬───────┐
│ col_0 ┆ col_1 ┆ col_2 │
│ ---   ┆ ---   ┆ ---   │
│ <span class="hljs-built_in">str</span>   ┆ f64   ┆ f64   │
╞═══════╪═══════╪═══════╡
│ b     ┆ <span class="hljs-number">0.0</span>   ┆ <span class="hljs-number">1.0</span>   │
└───────┴───────┴───────┘`,wrap:!1}}),q=new D({props:{title:"Example: data extraction",local:"example-data-extraction",headingTag:"h3"}}),G=new X({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyU2VydmljZU5vdy1BSSUyRlIxLURpc3RpbGwtU0ZUJTIyJTJDJTIwJTIydjAlMjIlMkMlMjBzcGxpdCUzRCUyMnRyYWluJTIyKSUwQSUwQSUyMyUyMFVzaW5nJTIwYSUyMHJlZ3VsYXIlMjBweXRob24lMjBmdW5jdGlvbiUwQXBhdHRlcm4lMjAlM0QlMjByZS5jb21waWxlKCUyMmJveGVkJTVDJTVDJTdCKC4qKSU1QyU1QyU3RCUyMiklMEFyZXN1bHRfZHMlMjAlM0QlMjBkcy5tYXAobGFtYmRhJTIweCUzQSUyMCU3QiUyMnZhbHVlX3NvbHV0aW9uJTIyJTNBJTIwbS5ncm91cCgxKSUyMGlmJTIwKG0lM0ElM0RwYXR0ZXJuLnNlYXJjaCh4JTVCJTIyc29sdXRpb24lMjIlNUQpKSUyMGVsc2UlMjBOb25lJTdEKSUwQSUyMyUyMFRpbWUlM0ElMjAxMHMlMEElMEElMjMlMjBVc2luZyUyMGElMjBQb2xhcnMlMjBmdW5jdGlvbiUwQWV4cHIlMjAlM0QlMjBwbC5jb2woJTIyc29sdXRpb24lMjIpLnN0ci5leHRyYWN0KCUyMmJveGVkJTVDJTVDJTdCKC4qKSU1QyU1QyU3RCUyMikuYWxpYXMoJTIydmFsdWVfc29sdXRpb24lMjIpJTBBcmVzdWx0X2RzJTIwJTNEJTIwZHMud2l0aF9mb3JtYXQoJTIycG9sYXJzJTIyKS5tYXAobGFtYmRhJTIwZGYlM0ElMjBkZi53aXRoX2NvbHVtbnMoZXhwciklMkMlMjBiYXRjaGVkJTNEVHJ1ZSklMEElMjMlMjBUaW1lJTNBJTIwMnM=",highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

ds = load_dataset(<span class="hljs-string">&quot;ServiceNow-AI/R1-Distill-SFT&quot;</span>, <span class="hljs-string">&quot;v0&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)

<span class="hljs-comment"># Using a regular python function</span>
pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;boxed\\\\{(.*)\\\\}&quot;</span>)
result_ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: {<span class="hljs-string">&quot;value_solution&quot;</span>: m.group(<span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> (m:=pattern.search(x[<span class="hljs-string">&quot;solution&quot;</span>])) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>})
<span class="hljs-comment"># Time: 10s</span>

<span class="hljs-comment"># Using a Polars function</span>
expr = pl.col(<span class="hljs-string">&quot;solution&quot;</span>).<span class="hljs-built_in">str</span>.extract(<span class="hljs-string">&quot;boxed\\\\{(.*)\\\\}&quot;</span>).alias(<span class="hljs-string">&quot;value_solution&quot;</span>)
result_ds = ds.with_format(<span class="hljs-string">&quot;polars&quot;</span>).<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> df: df.with_columns(expr), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># Time: 2s</span>`,wrap:!1}}),v=new D({props:{title:"Import or Export from Polars",local:"import-or-export-from-polars",headingTag:"h2"}}),Y=new X({props:{code:"ZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fcG9sYXJzKGRmKQ==",highlighted:"ds = Dataset.from_polars(df)",wrap:!1}}),Z=new X({props:{code:"ZGYlMjAlM0QlMjBEYXRhc2V0LnRvX3BvbGFycyhkcyk=",highlighted:"df = Dataset.to_polars(ds)",wrap:!1}}),E=new Es({props:{source:"https://github.com/huggingface/datasets/blob/main/docs/source/use_with_polars.mdx"}}),{c(){M=p("meta"),S=e(),H=p("p"),L=e(),r(d.$$.fragment),F=e(),f=p("p"),f.innerHTML=ys,P=e(),y=p("p"),y.innerHTML=bs,V=e(),r(b.$$.fragment),W=e(),T=p("p"),T.textContent=Ts,A=e(),g=p("p"),g.innerHTML=gs,N=e(),r(J.$$.fragment),K=e(),w=p("p"),w.innerHTML=Js,O=e(),r(U.$$.fragment),ss=e(),r($.$$.fragment),as=e(),_=p("p"),_.innerHTML=ws,ts=e(),r(I.$$.fragment),ls=e(),C=p("p"),C.innerHTML=Us,es=e(),k=p("p"),k.innerHTML=$s,ns=e(),r(q.$$.fragment),ps=e(),R=p("p"),R.innerHTML=_s,os=e(),x=p("p"),x.textContent=Is,rs=e(),r(G.$$.fragment),is=e(),r(v.$$.fragment),cs=e(),B=p("p"),B.innerHTML=Cs,ms=e(),r(Y.$$.fragment),hs=e(),Q=p("p"),Q.innerHTML=ks,us=e(),r(Z.$$.fragment),js=e(),r(E.$$.fragment),Ms=e(),z=p("p"),this.h()},l(s){const a=Qs("svelte-u9bgzb",document.head);M=o(a,"META",{name:!0,content:!0}),a.forEach(t),S=n(s),H=o(s,"P",{}),qs(H).forEach(t),L=n(s),i(d.$$.fragment,s),F=n(s),f=o(s,"P",{"data-svelte-h":!0}),c(f)!=="svelte-16svw65"&&(f.innerHTML=ys),P=n(s),y=o(s,"P",{"data-svelte-h":!0}),c(y)!=="svelte-ypkj15"&&(y.innerHTML=bs),V=n(s),i(b.$$.fragment,s),W=n(s),T=o(s,"P",{"data-svelte-h":!0}),c(T)!=="svelte-ej8pz8"&&(T.textContent=Ts),A=n(s),g=o(s,"P",{"data-svelte-h":!0}),c(g)!=="svelte-u5fksa"&&(g.innerHTML=gs),N=n(s),i(J.$$.fragment,s),K=n(s),w=o(s,"P",{"data-svelte-h":!0}),c(w)!=="svelte-2qljfh"&&(w.innerHTML=Js),O=n(s),i(U.$$.fragment,s),ss=n(s),i($.$$.fragment,s),as=n(s),_=o(s,"P",{"data-svelte-h":!0}),c(_)!=="svelte-xnif8j"&&(_.innerHTML=ws),ts=n(s),i(I.$$.fragment,s),ls=n(s),C=o(s,"P",{"data-svelte-h":!0}),c(C)!=="svelte-gjuiu1"&&(C.innerHTML=Us),es=n(s),k=o(s,"P",{"data-svelte-h":!0}),c(k)!=="svelte-5bmcft"&&(k.innerHTML=$s),ns=n(s),i(q.$$.fragment,s),ps=n(s),R=o(s,"P",{"data-svelte-h":!0}),c(R)!=="svelte-88snhv"&&(R.innerHTML=_s),os=n(s),x=o(s,"P",{"data-svelte-h":!0}),c(x)!=="svelte-1seljjf"&&(x.textContent=Is),rs=n(s),i(G.$$.fragment,s),is=n(s),i(v.$$.fragment,s),cs=n(s),B=o(s,"P",{"data-svelte-h":!0}),c(B)!=="svelte-1djltp1"&&(B.innerHTML=Cs),ms=n(s),i(Y.$$.fragment,s),hs=n(s),Q=o(s,"P",{"data-svelte-h":!0}),c(Q)!=="svelte-1odzkea"&&(Q.innerHTML=ks),us=n(s),i(Z.$$.fragment,s),js=n(s),i(E.$$.fragment,s),Ms=n(s),z=o(s,"P",{}),qs(z).forEach(t),this.h()},h(){Rs(M,"name","hf:doc:metadata"),Rs(M,"content",Hs)},m(s,a){Zs(document.head,M),l(s,S,a),l(s,H,a),l(s,L,a),m(d,s,a),l(s,F,a),l(s,f,a),l(s,P,a),l(s,y,a),l(s,V,a),m(b,s,a),l(s,W,a),l(s,T,a),l(s,A,a),l(s,g,a),l(s,N,a),m(J,s,a),l(s,K,a),l(s,w,a),l(s,O,a),m(U,s,a),l(s,ss,a),m($,s,a),l(s,as,a),l(s,_,a),l(s,ts,a),m(I,s,a),l(s,ls,a),l(s,C,a),l(s,es,a),l(s,k,a),l(s,ns,a),m(q,s,a),l(s,ps,a),l(s,R,a),l(s,os,a),l(s,x,a),l(s,rs,a),m(G,s,a),l(s,is,a),m(v,s,a),l(s,cs,a),l(s,B,a),l(s,ms,a),m(Y,s,a),l(s,hs,a),l(s,Q,a),l(s,us,a),m(Z,s,a),l(s,js,a),m(E,s,a),l(s,Ms,a),l(s,z,a),ds=!0},p:Gs,i(s){ds||(h(d.$$.fragment,s),h(b.$$.fragment,s),h(J.$$.fragment,s),h(U.$$.fragment,s),h($.$$.fragment,s),h(I.$$.fragment,s),h(q.$$.fragment,s),h(G.$$.fragment,s),h(v.$$.fragment,s),h(Y.$$.fragment,s),h(Z.$$.fragment,s),h(E.$$.fragment,s),ds=!0)},o(s){u(d.$$.fragment,s),u(b.$$.fragment,s),u(J.$$.fragment,s),u(U.$$.fragment,s),u($.$$.fragment,s),u(I.$$.fragment,s),u(q.$$.fragment,s),u(G.$$.fragment,s),u(v.$$.fragment,s),u(Y.$$.fragment,s),u(Z.$$.fragment,s),u(E.$$.fragment,s),ds=!1},d(s){s&&(t(S),t(H),t(L),t(F),t(f),t(P),t(y),t(V),t(W),t(T),t(A),t(g),t(N),t(K),t(w),t(O),t(ss),t(as),t(_),t(ts),t(ls),t(C),t(es),t(k),t(ns),t(ps),t(R),t(os),t(x),t(rs),t(is),t(cs),t(B),t(ms),t(hs),t(Q),t(us),t(js),t(Ms),t(z)),t(M),j(d,s),j(b,s),j(J,s),j(U,s),j($,s),j(I,s),j(q,s),j(G,s),j(v,s),j(Y,s),j(Z,s),j(E,s)}}}const Hs='{"title":"Use with Polars","local":"use-with-polars","sections":[{"title":"Dataset format","local":"dataset-format","sections":[],"depth":2},{"title":"Process data","local":"process-data","sections":[{"title":"Example: data extraction","local":"example-data-extraction","sections":[],"depth":3}],"depth":2},{"title":"Import or Export from Polars","local":"import-or-export-from-polars","sections":[],"depth":2}],"depth":1}';function zs(fs){return vs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ps extends Bs{constructor(M){super(),Ys(this,M,zs,Xs,xs,{})}}export{Ps as component};
