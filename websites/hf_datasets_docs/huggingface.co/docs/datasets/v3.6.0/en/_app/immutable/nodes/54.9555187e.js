import{s as Is,n as Us,o as qs}from"../chunks/scheduler.bdbef820.js";import{S as ks,i as As,g as p,s as l,r as i,A as Cs,h as o,f as t,c as n,j as Js,u as h,x as r,k as $s,y as vs,a as e,v as u,d as m,t as d,w as j}from"../chunks/index.c0aea24a.js";import{C as cs}from"../chunks/CodeBlock.e814ab8d.js";import{H as is,E as Es}from"../chunks/index.89e522f3.js";function Hs(hs){let c,Y,x,R,M,L,f,us=`This document is a quick introduction to using <code>datasets</code> with PyArrow, with a particular focus on how to process
datasets using Arrow compute functions, and how to convert a dataset to PyArrow or from PyArrow.`,z,w,ms="This is particularly useful as it allows fast zero-copy operations, since <code>datasets</code> uses PyArrow under the hood.",Z,y,F,g,ds="By default, datasets return regular Python objects: integers, floats, strings, lists, etc.",B,b,js='To get PyArrow Tables or Arrays instead, you can set the format of the dataset to <code>pyarrow</code> using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.with_format">Dataset.with_format()</a>:',X,T,G,_,Ms="This also works for <code>IterableDataset</code> objects obtained e.g. using <code>load_dataset(..., streaming=True)</code>:",W,J,S,$,N,I,fs='PyArrow functions are generally faster than regular hand-written python functions, and therefore they are a good option to optimize data processing. You can use Arrow compute functions to process a dataset in <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">Dataset.map()</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.filter">Dataset.filter()</a>:',V,U,K,q,ws="We use <code>batched=True</code> because it is faster to process batches of data in PyArrow rather than row by row. Itâ€™s also possible to use <code>batch_size=</code> in <code>map()</code> to set the size of each <code>table</code>.",O,k,ys='This also works for <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.map">IterableDataset.map()</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.filter">IterableDataset.filter()</a>.',ss,A,as,C,gs='A <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> is a wrapper of a PyArrow Table, you can instantiate a Dataset directly from the Table:',ts,v,es,E,bs='You can access the PyArrow Table of a dataset using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.data">Dataset.data</a>, which returns a <code>MemoryMappedTable</code> or a <code>InMemoryTable</code> or a <code>ConcatenationTable</code>, depending on the origin of the Arrow data and the operations that were applied.',ls,H,Ts='Those objects wrap the underlying PyArrow table accessible at <code>Dataset.data.table</code>. This table contains all the data of the dataset, but there might also be an indices mapping at <code>Dataset._indices</code> which maps the dataset rows indices to the PyArrow Table rows indices. This can happen if the dataset has been shuffled with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.shuffle">Dataset.shuffle()</a> or if only a subset of the rows are used (e.g. after a <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.select">Dataset.select()</a>).',ns,D,_s="In the general case, you can export a dataset to a PyArrow Table using <code>table = ds.with_format(&quot;arrow&quot;)[:]</code>.",ps,P,os,Q,rs;return M=new is({props:{title:"Use with PyArrow",local:"use-with-pyarrow",headingTag:"h1"}}),y=new is({props:{title:"Dataset format",local:"dataset-format",headingTag:"h2"}}),T=new cs({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUwQWRhdGElMjAlM0QlMjAlN0IlMjJjb2xfMCUyMiUzQSUyMCU1QiUyMmElMjIlMkMlMjAlMjJiJTIyJTJDJTIwJTIyYyUyMiUyQyUyMCUyMmQlMjIlNUQlMkMlMjAlMjJjb2xfMSUyMiUzQSUyMCU1QjAuJTJDJTIwMC4lMkMlMjAxLiUyQyUyMDEuJTVEJTdEJTBBZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdChkYXRhKSUwQWRzJTIwJTNEJTIwZHMud2l0aF9mb3JtYXQoJTIyYXJyb3clMjIpJTBBZHMlNUIwJTVEJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIzJTIwcGEuVGFibGUlMEFkcyU1QiUzQTIlNUQlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBwYS5UYWJsZSUwQWRzJTVCJTIyZGF0YSUyMiU1RCUyMCUyMCUyMyUyMHBhLmFycmF5",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>data = {<span class="hljs-string">&quot;col_0&quot;</span>: [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>], <span class="hljs-string">&quot;col_1&quot;</span>: [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict(data)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;arrow&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]       <span class="hljs-comment"># pa.Table</span>
pyarrow.Table
col_0: string
col_1: double
----
col_0: [[<span class="hljs-string">&quot;a&quot;</span>]]
col_1: [[<span class="hljs-number">0</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>]      <span class="hljs-comment"># pa.Table</span>
pyarrow.Table
col_0: string
col_1: double
----
col_0: [[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>]]
col_1: [[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;data&quot;</span>]  <span class="hljs-comment"># pa.array</span>
&lt;pyarrow.lib.ChunkedArray <span class="hljs-built_in">object</span> at <span class="hljs-number">0x1394312a0</span>&gt;
[
  [
    <span class="hljs-string">&quot;a&quot;</span>,
    <span class="hljs-string">&quot;b&quot;</span>,
    <span class="hljs-string">&quot;c&quot;</span>,
    <span class="hljs-string">&quot;d&quot;</span>
  ]
]`,wrap:!1}}),J=new cs({props:{code:"ZHMlMjAlM0QlMjBkcy53aXRoX2Zvcm1hdCglMjJhcnJvdyUyMiklMEFmb3IlMjB0YWJsZSUyMGluJTIwZHMuaXRlcihiYXRjaF9zaXplJTNEMiklM0ElMEElMjAlMjAlMjAlMjBwcmludCh0YWJsZSklMEElMjAlMjAlMjAlMjBicmVhaw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;arrow&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> table <span class="hljs-keyword">in</span> ds.<span class="hljs-built_in">iter</span>(batch_size=<span class="hljs-number">2</span>):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(table)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">break</span>
pyarrow.Table
col_0: string
col_1: double
----
col_0: [[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>]]
col_1: [[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`,wrap:!1}}),$=new is({props:{title:"Process data",local:"process-data",headingTag:"h2"}}),U=new cs({props:{code:"aW1wb3J0JTIwcHlhcnJvdy5jb21wdXRlJTIwYXMlMjBwYyUwQWZyb20lMjBkYXRhc2V0cyUyMGltcG9ydCUyMERhdGFzZXQlMEFkYXRhJTIwJTNEJTIwJTdCJTIyY29sXzAlMjIlM0ElMjAlNUIlMjJhJTIyJTJDJTIwJTIyYiUyMiUyQyUyMCUyMmMlMjIlMkMlMjAlMjJkJTIyJTVEJTJDJTIwJTIyY29sXzElMjIlM0ElMjAlNUIwLiUyQyUyMDAuJTJDJTIwMS4lMkMlMjAxLiU1RCU3RCUwQWRzJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoZGF0YSklMEFkcyUyMCUzRCUyMGRzLndpdGhfZm9ybWF0KCUyMmFycm93JTIyKSUwQWRzJTIwJTNEJTIwZHMubWFwKGxhbWJkYSUyMHQlM0ElMjB0LmFwcGVuZF9jb2x1bW4oJTIyY29sXzIlMjIlMkMlMjBwYy5hZGQodCU1QiUyMmNvbF8xJTIyJTVEJTJDJTIwMSkpJTJDJTIwYmF0Y2hlZCUzRFRydWUpJTBBZHMlNUIlM0EyJTVEJTBBZHMlMjAlM0QlMjBkcy5maWx0ZXIobGFtYmRhJTIwdCUzQSUyMHBjLmVxdWFsKHQlNUIlMjJjb2xfMCUyMiU1RCUyQyUyMCUyMmIlMjIpJTJDJTIwYmF0Y2hlZCUzRFRydWUpJTBBZHMlNUIwJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pyarrow.compute <span class="hljs-keyword">as</span> pc
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>data = {<span class="hljs-string">&quot;col_0&quot;</span>: [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>], <span class="hljs-string">&quot;col_1&quot;</span>: [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict(data)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;arrow&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> t: t.append_column(<span class="hljs-string">&quot;col_2&quot;</span>, pc.add(t[<span class="hljs-string">&quot;col_1&quot;</span>], <span class="hljs-number">1</span>)), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>]
pyarrow.Table
col_0: string
col_1: double
col_2: double
----
col_0: [[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>]]
col_1: [[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]
col_2: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> t: pc.equal(t[<span class="hljs-string">&quot;col_0&quot;</span>], <span class="hljs-string">&quot;b&quot;</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
pyarrow.Table
col_0: string
col_1: double
col_2: double
----
col_0: [[<span class="hljs-string">&quot;b&quot;</span>]]
col_1: [[<span class="hljs-number">0</span>]]
col_2: [[<span class="hljs-number">1</span>]]`,wrap:!1}}),A=new is({props:{title:"Import or Export from PyArrow",local:"import-or-export-from-pyarrow",headingTag:"h2"}}),v=new cs({props:{code:"ZHMlMjAlM0QlMjBEYXRhc2V0KHRhYmxlKQ==",highlighted:"ds = Dataset(table)",wrap:!1}}),P=new Es({props:{source:"https://github.com/huggingface/datasets/blob/main/docs/source/use_with_pyarrow.mdx"}}),{c(){c=p("meta"),Y=l(),x=p("p"),R=l(),i(M.$$.fragment),L=l(),f=p("p"),f.innerHTML=us,z=l(),w=p("p"),w.innerHTML=ms,Z=l(),i(y.$$.fragment),F=l(),g=p("p"),g.textContent=ds,B=l(),b=p("p"),b.innerHTML=js,X=l(),i(T.$$.fragment),G=l(),_=p("p"),_.innerHTML=Ms,W=l(),i(J.$$.fragment),S=l(),i($.$$.fragment),N=l(),I=p("p"),I.innerHTML=fs,V=l(),i(U.$$.fragment),K=l(),q=p("p"),q.innerHTML=ws,O=l(),k=p("p"),k.innerHTML=ys,ss=l(),i(A.$$.fragment),as=l(),C=p("p"),C.innerHTML=gs,ts=l(),i(v.$$.fragment),es=l(),E=p("p"),E.innerHTML=bs,ls=l(),H=p("p"),H.innerHTML=Ts,ns=l(),D=p("p"),D.innerHTML=_s,ps=l(),i(P.$$.fragment),os=l(),Q=p("p"),this.h()},l(s){const a=Cs("svelte-u9bgzb",document.head);c=o(a,"META",{name:!0,content:!0}),a.forEach(t),Y=n(s),x=o(s,"P",{}),Js(x).forEach(t),R=n(s),h(M.$$.fragment,s),L=n(s),f=o(s,"P",{"data-svelte-h":!0}),r(f)!=="svelte-o6efn3"&&(f.innerHTML=us),z=n(s),w=o(s,"P",{"data-svelte-h":!0}),r(w)!=="svelte-syebji"&&(w.innerHTML=ms),Z=n(s),h(y.$$.fragment,s),F=n(s),g=o(s,"P",{"data-svelte-h":!0}),r(g)!=="svelte-ej8pz8"&&(g.textContent=ds),B=n(s),b=o(s,"P",{"data-svelte-h":!0}),r(b)!=="svelte-10z9keo"&&(b.innerHTML=js),X=n(s),h(T.$$.fragment,s),G=n(s),_=o(s,"P",{"data-svelte-h":!0}),r(_)!=="svelte-2qljfh"&&(_.innerHTML=Ms),W=n(s),h(J.$$.fragment,s),S=n(s),h($.$$.fragment,s),N=n(s),I=o(s,"P",{"data-svelte-h":!0}),r(I)!=="svelte-ehncot"&&(I.innerHTML=fs),V=n(s),h(U.$$.fragment,s),K=n(s),q=o(s,"P",{"data-svelte-h":!0}),r(q)!=="svelte-4b4wdc"&&(q.innerHTML=ws),O=n(s),k=o(s,"P",{"data-svelte-h":!0}),r(k)!=="svelte-5bmcft"&&(k.innerHTML=ys),ss=n(s),h(A.$$.fragment,s),as=n(s),C=o(s,"P",{"data-svelte-h":!0}),r(C)!=="svelte-zbfnd"&&(C.innerHTML=gs),ts=n(s),h(v.$$.fragment,s),es=n(s),E=o(s,"P",{"data-svelte-h":!0}),r(E)!=="svelte-oboc2z"&&(E.innerHTML=bs),ls=n(s),H=o(s,"P",{"data-svelte-h":!0}),r(H)!=="svelte-51at5j"&&(H.innerHTML=Ts),ns=n(s),D=o(s,"P",{"data-svelte-h":!0}),r(D)!=="svelte-oy3ykb"&&(D.innerHTML=_s),ps=n(s),h(P.$$.fragment,s),os=n(s),Q=o(s,"P",{}),Js(Q).forEach(t),this.h()},h(){$s(c,"name","hf:doc:metadata"),$s(c,"content",Ds)},m(s,a){vs(document.head,c),e(s,Y,a),e(s,x,a),e(s,R,a),u(M,s,a),e(s,L,a),e(s,f,a),e(s,z,a),e(s,w,a),e(s,Z,a),u(y,s,a),e(s,F,a),e(s,g,a),e(s,B,a),e(s,b,a),e(s,X,a),u(T,s,a),e(s,G,a),e(s,_,a),e(s,W,a),u(J,s,a),e(s,S,a),u($,s,a),e(s,N,a),e(s,I,a),e(s,V,a),u(U,s,a),e(s,K,a),e(s,q,a),e(s,O,a),e(s,k,a),e(s,ss,a),u(A,s,a),e(s,as,a),e(s,C,a),e(s,ts,a),u(v,s,a),e(s,es,a),e(s,E,a),e(s,ls,a),e(s,H,a),e(s,ns,a),e(s,D,a),e(s,ps,a),u(P,s,a),e(s,os,a),e(s,Q,a),rs=!0},p:Us,i(s){rs||(m(M.$$.fragment,s),m(y.$$.fragment,s),m(T.$$.fragment,s),m(J.$$.fragment,s),m($.$$.fragment,s),m(U.$$.fragment,s),m(A.$$.fragment,s),m(v.$$.fragment,s),m(P.$$.fragment,s),rs=!0)},o(s){d(M.$$.fragment,s),d(y.$$.fragment,s),d(T.$$.fragment,s),d(J.$$.fragment,s),d($.$$.fragment,s),d(U.$$.fragment,s),d(A.$$.fragment,s),d(v.$$.fragment,s),d(P.$$.fragment,s),rs=!1},d(s){s&&(t(Y),t(x),t(R),t(L),t(f),t(z),t(w),t(Z),t(F),t(g),t(B),t(b),t(X),t(G),t(_),t(W),t(S),t(N),t(I),t(V),t(K),t(q),t(O),t(k),t(ss),t(as),t(C),t(ts),t(es),t(E),t(ls),t(H),t(ns),t(D),t(ps),t(os),t(Q)),t(c),j(M,s),j(y,s),j(T,s),j(J,s),j($,s),j(U,s),j(A,s),j(v,s),j(P,s)}}}const Ds='{"title":"Use with PyArrow","local":"use-with-pyarrow","sections":[{"title":"Dataset format","local":"dataset-format","sections":[],"depth":2},{"title":"Process data","local":"process-data","sections":[],"depth":2},{"title":"Import or Export from PyArrow","local":"import-or-export-from-pyarrow","sections":[],"depth":2}],"depth":1}';function Ps(hs){return qs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ls extends ks{constructor(c){super(),As(this,c,Ps,Hs,Is,{})}}export{Ls as component};
