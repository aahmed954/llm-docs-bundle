import{s as Os,o as sa,n as Es}from"../chunks/scheduler.bdbef820.js";import{S as aa,i as ta,g as o,s as l,r as m,A as na,h as d,f as t,c as e,j as Ps,u as h,x as g,k as Ks,y as la,a as n,v as c,d as u,t as i,w as j}from"../chunks/index.c0aea24a.js";import{T as Xs}from"../chunks/Tip.31005f7d.js";import{C as b}from"../chunks/CodeBlock.e814ab8d.js";import{H as O,E as ea}from"../chunks/index.89e522f3.js";function pa(J){let p,y='A <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> object is a wrapper of an Arrow table, which allows fast reads from arrays in the dataset to NumPy arrays.';return{c(){p=o("p"),p.innerHTML=y},l(r){p=d(r,"P",{"data-svelte-h":!0}),g(p)!=="svelte-1gnpyoc"&&(p.innerHTML=y)},m(r,M){n(r,p,M)},p:Es,d(r){r&&t(p)}}}function ra(J){let p,y=`To use the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Image">Image</a> feature type, you’ll need to install the <code>vision</code> extra as
<code>pip install datasets[vision]</code>.`;return{c(){p=o("p"),p.innerHTML=y},l(r){p=d(r,"P",{"data-svelte-h":!0}),g(p)!=="svelte-m9evrg"&&(p.innerHTML=y)},m(r,M){n(r,p,M)},p:Es,d(r){r&&t(p)}}}function ma(J){let p,y=`To use the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a> feature type, you’ll need to install the <code>audio</code> extra as
<code>pip install datasets[audio]</code>.`;return{c(){p=o("p"),p.innerHTML=y},l(r){p=d(r,"P",{"data-svelte-h":!0}),g(p)!=="svelte-fbml0m"&&(p.innerHTML=y)},m(r,M){n(r,p,M)},p:Es,d(r){r&&t(p)}}}function ha(J){let p,y,r,M,w,as,$,Gs=`This document is a quick introduction to using <code>datasets</code> with NumPy, with a particular focus on how to get
<code>numpy.ndarray</code> objects out of our datasets, and how to use them to train models based on NumPy such as <code>scikit-learn</code> models.`,ts,C,ns,I,_s="By default, datasets return regular Python objects: integers, floats, strings, lists, etc..",ls,R,Vs="To get NumPy arrays instead, you can set the format of the dataset to <code>numpy</code>:",es,k,ps,U,rs,N,vs=`Note that the exact same procedure applies to <code>DatasetDict</code> objects, so that
when setting the format of a <code>DatasetDict</code> to <code>numpy</code>, all the <code>Dataset</code>s there
will be formatted as <code>numpy</code>:`,ms,Q,hs,Z,cs,q,zs="If your dataset consists of N-dimensional arrays, you will see that by default they are considered as the same array if the shape is fixed:",us,X,is,E,js,G,Fs=`However this logic often requires slow shape comparisons and data copies.
To avoid this, you must explicitly use the <code>Array</code> feature type and specify the shape of your tensors:`,os,_,ds,V,gs,v,xs='<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.ClassLabel">ClassLabel</a> data is properly converted to arrays:',ys,z,Ms,F,Ws="String and binary objects are unchanged, since NumPy only supports numbers.",bs,x,Ys='The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Image">Image</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a> feature types are also supported.',Js,f,Us,W,fs,T,Ts,Y,ws,D,$s,A,Ds='NumPy doesn’t have any built-in data loading capabilities, so you’ll either need to materialize the NumPy arrays like <code>X, y</code> to use in <code>scikit-learn</code> or use a library such as <a href="https://pytorch.org/" rel="nofollow">PyTorch</a> to load your data using a <code>DataLoader</code>.',Cs,B,Is,H,As=`The easiest way to get NumPy arrays out of a dataset is to use the <code>with_format(&#39;numpy&#39;)</code> method. Lets assume
that we want to train a neural network on the <a href="http://yann.lecun.com/exdb/mnist/" rel="nofollow">MNIST dataset</a> available
at the HuggingFace Hub at <a href="https://huggingface.co/datasets/mnist" rel="nofollow">https://huggingface.co/datasets/mnist</a>.`,Rs,S,ks,L,Bs=`Once the format is set we can feed the dataset to the model based on NumPy in batches using the <code>Dataset.iter()</code>
method:`,Ns,P,Qs,K,Zs,ss,qs;return w=new O({props:{title:"Use with NumPy",local:"use-with-numpy",headingTag:"h1"}}),C=new O({props:{title:"Dataset format",local:"dataset-format",headingTag:"h2"}}),k=new b({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUwQWRhdGElMjAlM0QlMjAlNUIlNUIxJTJDJTIwMiU1RCUyQyUyMCU1QjMlMkMlMjA0JTVEJTVEJTBBZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJkYXRhJTIyJTNBJTIwZGF0YSU3RCklMEFkcyUyMCUzRCUyMGRzLndpdGhfZm9ybWF0KCUyMm51bXB5JTIyKSUwQWRzJTVCMCU1RCUwQWRzJTVCJTNBMiU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>data = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;data&quot;</span>: data})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;numpy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;data&#x27;</span>: array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>])}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>]
{<span class="hljs-string">&#x27;data&#x27;</span>: array([
    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
    [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])}`,wrap:!1}}),U=new Xs({props:{$$slots:{default:[pa]},$$scope:{ctx:J}}}),Q=new b({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldERpY3QlMEFkYXRhJTIwJTNEJTIwJTdCJTIydHJhaW4lMjIlM0ElMjAlN0IlMjJkYXRhJTIyJTNBJTIwJTVCJTVCMSUyQyUyMDIlNUQlMkMlMjAlNUIzJTJDJTIwNCU1RCU1RCU3RCUyQyUyMCUyMnRlc3QlMjIlM0ElMjAlN0IlMjJkYXRhJTIyJTNBJTIwJTVCJTVCNSUyQyUyMDYlNUQlMkMlMjAlNUI3JTJDJTIwOCU1RCU1RCU3RCU3RCUwQWRkcyUyMCUzRCUyMERhdGFzZXREaWN0LmZyb21fZGljdChkYXRhKSUwQWRkcyUyMCUzRCUyMGRkcy53aXRoX2Zvcm1hdCglMjJudW1weSUyMiklMEFkZHMlNUIlMjJ0cmFpbiUyMiU1RCU1QiUzQTIlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>data = {<span class="hljs-string">&quot;train&quot;</span>: {<span class="hljs-string">&quot;data&quot;</span>: [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]}, <span class="hljs-string">&quot;test&quot;</span>: {<span class="hljs-string">&quot;data&quot;</span>: [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]}}
<span class="hljs-meta">&gt;&gt;&gt; </span>dds = DatasetDict.from_dict(data)
<span class="hljs-meta">&gt;&gt;&gt; </span>dds = dds.with_format(<span class="hljs-string">&quot;numpy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dds[<span class="hljs-string">&quot;train&quot;</span>][:<span class="hljs-number">2</span>]
{<span class="hljs-string">&#x27;data&#x27;</span>: array([
    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
    [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])}`,wrap:!1}}),Z=new O({props:{title:"N-dimensional arrays",local:"n-dimensional-arrays",headingTag:"h3"}}),X=new b({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUwQWRhdGElMjAlM0QlMjAlNUIlNUIlNUIxJTJDJTIwMiU1RCUyQyU1QjMlMkMlMjA0JTVEJTVEJTJDJTIwJTVCJTVCNSUyQyUyMDYlNUQlMkMlNUI3JTJDJTIwOCU1RCU1RCU1RCUyMCUyMCUyMyUyMGZpeGVkJTIwc2hhcGUlMEFkcyUyMCUzRCUyMERhdGFzZXQuZnJvbV9kaWN0KCU3QiUyMmRhdGElMjIlM0ElMjBkYXRhJTdEKSUwQWRzJTIwJTNEJTIwZHMud2l0aF9mb3JtYXQoJTIybnVtcHklMjIpJTBBZHMlNUIwJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>data = [[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>],[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]]  <span class="hljs-comment"># fixed shape</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;data&quot;</span>: data})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;numpy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;data&#x27;</span>: array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])}`,wrap:!1}}),E=new b({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUwQWRhdGElMjAlM0QlMjAlNUIlNUIlNUIxJTJDJTIwMiU1RCUyQyU1QjMlNUQlNUQlMkMlMjAlNUIlNUI0JTJDJTIwNSUyQyUyMDYlNUQlMkMlNUI3JTJDJTIwOCU1RCU1RCU1RCUyMCUyMCUyMyUyMHZhcnlpbmclMjBzaGFwZSUwQWRzJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIyZGF0YSUyMiUzQSUyMGRhdGElN0QpJTBBZHMlMjAlM0QlMjBkcy53aXRoX2Zvcm1hdCglMjJudW1weSUyMiklMEFkcyU1QjAlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>data = [[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],[<span class="hljs-number">3</span>]], [[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]]  <span class="hljs-comment"># varying shape</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;data&quot;</span>: data})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;numpy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;data&#x27;</span>: array([array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]), array([<span class="hljs-number">3</span>])], dtype=<span class="hljs-built_in">object</span>)}`,wrap:!1}}),_=new b({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMEZlYXR1cmVzJTJDJTIwQXJyYXkyRCUwQWRhdGElMjAlM0QlMjAlNUIlNUIlNUIxJTJDJTIwMiU1RCUyQyU1QjMlMkMlMjA0JTVEJTVEJTJDJTVCJTVCNSUyQyUyMDYlNUQlMkMlNUI3JTJDJTIwOCU1RCU1RCU1RCUwQWZlYXR1cmVzJTIwJTNEJTIwRmVhdHVyZXMoJTdCJTIyZGF0YSUyMiUzQSUyMEFycmF5MkQoc2hhcGUlM0QoMiUyQyUyMDIpJTJDJTIwZHR5cGUlM0QnaW50MzInKSU3RCklMEFkcyUyMCUzRCUyMERhdGFzZXQuZnJvbV9kaWN0KCU3QiUyMmRhdGElMjIlM0ElMjBkYXRhJTdEJTJDJTIwZmVhdHVyZXMlM0RmZWF0dXJlcyklMEFkcyUyMCUzRCUyMGRzLndpdGhfZm9ybWF0KCUyMm51bXB5JTIyKSUwQWRzJTVCMCU1RCUwQWRzJTVCJTNBMiU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, Features, Array2D
<span class="hljs-meta">&gt;&gt;&gt; </span>data = [[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]],[[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>],[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]]
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&quot;data&quot;</span>: Array2D(shape=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;data&quot;</span>: data}, features=features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;numpy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;data&#x27;</span>: array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
        [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>]
{<span class="hljs-string">&#x27;data&#x27;</span>: array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
         [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]],
 
        [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>],
         [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])}`,wrap:!1}}),V=new O({props:{title:"Other feature types",local:"other-feature-types",headingTag:"h3"}}),z=new b({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMEZlYXR1cmVzJTJDJTIwQ2xhc3NMYWJlbCUwQWxhYmVscyUyMCUzRCUyMCU1QjAlMkMlMjAwJTJDJTIwMSU1RCUwQWZlYXR1cmVzJTIwJTNEJTIwRmVhdHVyZXMoJTdCJTIybGFiZWwlMjIlM0ElMjBDbGFzc0xhYmVsKG5hbWVzJTNEJTVCJTIybmVnYXRpdmUlMjIlMkMlMjAlMjJwb3NpdGl2ZSUyMiU1RCklN0QpJTBBZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJsYWJlbCUyMiUzQSUyMGxhYmVscyU3RCUyQyUyMGZlYXR1cmVzJTNEZmVhdHVyZXMpJTBBZHMlMjAlM0QlMjBkcy53aXRoX2Zvcm1hdCglMjJudW1weSUyMiklMEFkcyU1QiUzQTMlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, Features, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&quot;label&quot;</span>: ClassLabel(names=[<span class="hljs-string">&quot;negative&quot;</span>, <span class="hljs-string">&quot;positive&quot;</span>])})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;label&quot;</span>: labels}, features=features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;numpy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">3</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])}`,wrap:!1}}),f=new Xs({props:{$$slots:{default:[ra]},$$scope:{ctx:J}}}),W=new b({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMEZlYXR1cmVzJTJDJTIwSW1hZ2UlMEFpbWFnZXMlMjAlM0QlMjAlNUIlMjJwYXRoJTJGdG8lMkZpbWFnZS5wbmclMjIlNUQlMjAqJTIwMTAlMEFmZWF0dXJlcyUyMCUzRCUyMEZlYXR1cmVzKCU3QiUyMmltYWdlJTIyJTNBJTIwSW1hZ2UoKSU3RCklMEFkcyUyMCUzRCUyMERhdGFzZXQuZnJvbV9kaWN0KCU3QiUyMmltYWdlJTIyJTNBJTIwaW1hZ2VzJTdEJTJDJTIwZmVhdHVyZXMlM0RmZWF0dXJlcyklMEFkcyUyMCUzRCUyMGRzLndpdGhfZm9ybWF0KCUyMm51bXB5JTIyKSUwQWRzJTVCMCU1RCU1QiUyMmltYWdlJTIyJTVELnNoYXBlJTBBZHMlNUIwJTVEJTBBZHMlNUIlM0EyJTVEJTVCJTIyaW1hZ2UlMjIlNUQuc2hhcGUlMEFkcyU1QiUzQTIlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, Features, Image
<span class="hljs-meta">&gt;&gt;&gt; </span>images = [<span class="hljs-string">&quot;path/to/image.png&quot;</span>] * <span class="hljs-number">10</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&quot;image&quot;</span>: Image()})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: images}, features=features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;numpy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>].shape
(<span class="hljs-number">512</span>, <span class="hljs-number">512</span>, <span class="hljs-number">3</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;image&#x27;</span>: array([[[ <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>],
              [ <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>],
              ...,
              [ <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>],
              [ <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>]]], dtype=uint8)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>][<span class="hljs-string">&quot;image&quot;</span>].shape
(<span class="hljs-number">2</span>, <span class="hljs-number">512</span>, <span class="hljs-number">512</span>, <span class="hljs-number">3</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[:<span class="hljs-number">2</span>]
{<span class="hljs-string">&#x27;image&#x27;</span>: array([[[[ <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>],
              [ <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>],
              ...,
              [ <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>],
              [ <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>]]]], dtype=uint8)}`,wrap:!1}}),T=new Xs({props:{$$slots:{default:[ma]},$$scope:{ctx:J}}}),Y=new b({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMEZlYXR1cmVzJTJDJTIwQXVkaW8lMEFhdWRpbyUyMCUzRCUyMCU1QiUyMnBhdGglMkZ0byUyRmF1ZGlvLndhdiUyMiU1RCUyMColMjAxMCUwQWZlYXR1cmVzJTIwJTNEJTIwRmVhdHVyZXMoJTdCJTIyYXVkaW8lMjIlM0ElMjBBdWRpbygpJTdEKSUwQWRzJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIyYXVkaW8lMjIlM0ElMjBhdWRpbyU3RCUyQyUyMGZlYXR1cmVzJTNEZmVhdHVyZXMpJTBBZHMlMjAlM0QlMjBkcy53aXRoX2Zvcm1hdCglMjJudW1weSUyMiklMEFkcyU1QjAlNUQlNUIlMjJhdWRpbyUyMiU1RCU1QiUyMmFycmF5JTIyJTVEJTBBZHMlNUIwJTVEJTVCJTIyYXVkaW8lMjIlNUQlNUIlMjJzYW1wbGluZ19yYXRlJTIyJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, Features, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>audio = [<span class="hljs-string">&quot;path/to/audio.wav&quot;</span>] * <span class="hljs-number">10</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&quot;audio&quot;</span>: Audio()})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;audio&quot;</span>: audio}, features=features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;numpy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;array&quot;</span>]
array([-<span class="hljs-number">0.059021</span>  , -<span class="hljs-number">0.03894043</span>, -<span class="hljs-number">0.00735474</span>, ...,  <span class="hljs-number">0.0133667</span> ,
              <span class="hljs-number">0.01809692</span>,  <span class="hljs-number">0.00268555</span>], dtype=float32)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;sampling_rate&quot;</span>]
array(<span class="hljs-number">44100</span>, weak_type=<span class="hljs-literal">True</span>)`,wrap:!1}}),D=new O({props:{title:"Data loading",local:"data-loading",headingTag:"h2"}}),B=new O({props:{title:"Using with_format('numpy')",local:"using-withformatnumpy",headingTag:"h3"}}),S=new b({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIybW5pc3QlMjIpJTBBZHMlMjAlM0QlMjBkcy53aXRoX2Zvcm1hdCglMjJudW1weSUyMiklMEFkcyU1QiUyMnRyYWluJTIyJTVEJTVCMCU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;mnist&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;numpy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;image&#x27;</span>: array([[  <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, ...],
                       [  <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, ...],
                       ...,
                       [  <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, ...],
                       [  <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, ...]], dtype=uint8),
 <span class="hljs-string">&#x27;label&#x27;</span>: array(<span class="hljs-number">5</span>)}`,wrap:!1}}),P=new b({props:{code:"Zm9yJTIwZXBvY2glMjBpbiUyMHJhbmdlKGVwb2NocyklM0ElMEElMjAlMjAlMjAlMjBmb3IlMjBiYXRjaCUyMGluJTIwZHMlNUIlMjJ0cmFpbiUyMiU1RC5pdGVyKGJhdGNoX3NpemUlM0QzMiklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjB4JTJDJTIweSUyMCUzRCUyMGJhdGNoJTVCJTIyaW1hZ2UlMjIlNUQlMkMlMjBiYXRjaCU1QiUyMmxhYmVsJTIyJTVEJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwLi4u",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">iter</span>(batch_size=<span class="hljs-number">32</span>):
<span class="hljs-meta">... </span>        x, y = batch[<span class="hljs-string">&quot;image&quot;</span>], batch[<span class="hljs-string">&quot;label&quot;</span>]
<span class="hljs-meta">... </span>        ...`,wrap:!1}}),K=new ea({props:{source:"https://github.com/huggingface/datasets/blob/main/docs/source/use_with_numpy.mdx"}}),{c(){p=o("meta"),y=l(),r=o("p"),M=l(),m(w.$$.fragment),as=l(),$=o("p"),$.innerHTML=Gs,ts=l(),m(C.$$.fragment),ns=l(),I=o("p"),I.textContent=_s,ls=l(),R=o("p"),R.innerHTML=Vs,es=l(),m(k.$$.fragment),ps=l(),m(U.$$.fragment),rs=l(),N=o("p"),N.innerHTML=vs,ms=l(),m(Q.$$.fragment),hs=l(),m(Z.$$.fragment),cs=l(),q=o("p"),q.textContent=zs,us=l(),m(X.$$.fragment),is=l(),m(E.$$.fragment),js=l(),G=o("p"),G.innerHTML=Fs,os=l(),m(_.$$.fragment),ds=l(),m(V.$$.fragment),gs=l(),v=o("p"),v.innerHTML=xs,ys=l(),m(z.$$.fragment),Ms=l(),F=o("p"),F.textContent=Ws,bs=l(),x=o("p"),x.innerHTML=Ys,Js=l(),m(f.$$.fragment),Us=l(),m(W.$$.fragment),fs=l(),m(T.$$.fragment),Ts=l(),m(Y.$$.fragment),ws=l(),m(D.$$.fragment),$s=l(),A=o("p"),A.innerHTML=Ds,Cs=l(),m(B.$$.fragment),Is=l(),H=o("p"),H.innerHTML=As,Rs=l(),m(S.$$.fragment),ks=l(),L=o("p"),L.innerHTML=Bs,Ns=l(),m(P.$$.fragment),Qs=l(),m(K.$$.fragment),Zs=l(),ss=o("p"),this.h()},l(s){const a=na("svelte-u9bgzb",document.head);p=d(a,"META",{name:!0,content:!0}),a.forEach(t),y=e(s),r=d(s,"P",{}),Ps(r).forEach(t),M=e(s),h(w.$$.fragment,s),as=e(s),$=d(s,"P",{"data-svelte-h":!0}),g($)!=="svelte-movp6t"&&($.innerHTML=Gs),ts=e(s),h(C.$$.fragment,s),ns=e(s),I=d(s,"P",{"data-svelte-h":!0}),g(I)!=="svelte-jsr2ey"&&(I.textContent=_s),ls=e(s),R=d(s,"P",{"data-svelte-h":!0}),g(R)!=="svelte-tgh4v8"&&(R.innerHTML=Vs),es=e(s),h(k.$$.fragment,s),ps=e(s),h(U.$$.fragment,s),rs=e(s),N=d(s,"P",{"data-svelte-h":!0}),g(N)!=="svelte-19vwxv0"&&(N.innerHTML=vs),ms=e(s),h(Q.$$.fragment,s),hs=e(s),h(Z.$$.fragment,s),cs=e(s),q=d(s,"P",{"data-svelte-h":!0}),g(q)!=="svelte-n2lxj9"&&(q.textContent=zs),us=e(s),h(X.$$.fragment,s),is=e(s),h(E.$$.fragment,s),js=e(s),G=d(s,"P",{"data-svelte-h":!0}),g(G)!=="svelte-1gw41y9"&&(G.innerHTML=Fs),os=e(s),h(_.$$.fragment,s),ds=e(s),h(V.$$.fragment,s),gs=e(s),v=d(s,"P",{"data-svelte-h":!0}),g(v)!=="svelte-j0wlyb"&&(v.innerHTML=xs),ys=e(s),h(z.$$.fragment,s),Ms=e(s),F=d(s,"P",{"data-svelte-h":!0}),g(F)!=="svelte-1i7nqnr"&&(F.textContent=Ws),bs=e(s),x=d(s,"P",{"data-svelte-h":!0}),g(x)!=="svelte-bqalpq"&&(x.innerHTML=Ys),Js=e(s),h(f.$$.fragment,s),Us=e(s),h(W.$$.fragment,s),fs=e(s),h(T.$$.fragment,s),Ts=e(s),h(Y.$$.fragment,s),ws=e(s),h(D.$$.fragment,s),$s=e(s),A=d(s,"P",{"data-svelte-h":!0}),g(A)!=="svelte-14evha6"&&(A.innerHTML=Ds),Cs=e(s),h(B.$$.fragment,s),Is=e(s),H=d(s,"P",{"data-svelte-h":!0}),g(H)!=="svelte-kj9r2i"&&(H.innerHTML=As),Rs=e(s),h(S.$$.fragment,s),ks=e(s),L=d(s,"P",{"data-svelte-h":!0}),g(L)!=="svelte-117alrv"&&(L.innerHTML=Bs),Ns=e(s),h(P.$$.fragment,s),Qs=e(s),h(K.$$.fragment,s),Zs=e(s),ss=d(s,"P",{}),Ps(ss).forEach(t),this.h()},h(){Ks(p,"name","hf:doc:metadata"),Ks(p,"content",ca)},m(s,a){la(document.head,p),n(s,y,a),n(s,r,a),n(s,M,a),c(w,s,a),n(s,as,a),n(s,$,a),n(s,ts,a),c(C,s,a),n(s,ns,a),n(s,I,a),n(s,ls,a),n(s,R,a),n(s,es,a),c(k,s,a),n(s,ps,a),c(U,s,a),n(s,rs,a),n(s,N,a),n(s,ms,a),c(Q,s,a),n(s,hs,a),c(Z,s,a),n(s,cs,a),n(s,q,a),n(s,us,a),c(X,s,a),n(s,is,a),c(E,s,a),n(s,js,a),n(s,G,a),n(s,os,a),c(_,s,a),n(s,ds,a),c(V,s,a),n(s,gs,a),n(s,v,a),n(s,ys,a),c(z,s,a),n(s,Ms,a),n(s,F,a),n(s,bs,a),n(s,x,a),n(s,Js,a),c(f,s,a),n(s,Us,a),c(W,s,a),n(s,fs,a),c(T,s,a),n(s,Ts,a),c(Y,s,a),n(s,ws,a),c(D,s,a),n(s,$s,a),n(s,A,a),n(s,Cs,a),c(B,s,a),n(s,Is,a),n(s,H,a),n(s,Rs,a),c(S,s,a),n(s,ks,a),n(s,L,a),n(s,Ns,a),c(P,s,a),n(s,Qs,a),c(K,s,a),n(s,Zs,a),n(s,ss,a),qs=!0},p(s,[a]){const Hs={};a&2&&(Hs.$$scope={dirty:a,ctx:s}),U.$set(Hs);const Ss={};a&2&&(Ss.$$scope={dirty:a,ctx:s}),f.$set(Ss);const Ls={};a&2&&(Ls.$$scope={dirty:a,ctx:s}),T.$set(Ls)},i(s){qs||(u(w.$$.fragment,s),u(C.$$.fragment,s),u(k.$$.fragment,s),u(U.$$.fragment,s),u(Q.$$.fragment,s),u(Z.$$.fragment,s),u(X.$$.fragment,s),u(E.$$.fragment,s),u(_.$$.fragment,s),u(V.$$.fragment,s),u(z.$$.fragment,s),u(f.$$.fragment,s),u(W.$$.fragment,s),u(T.$$.fragment,s),u(Y.$$.fragment,s),u(D.$$.fragment,s),u(B.$$.fragment,s),u(S.$$.fragment,s),u(P.$$.fragment,s),u(K.$$.fragment,s),qs=!0)},o(s){i(w.$$.fragment,s),i(C.$$.fragment,s),i(k.$$.fragment,s),i(U.$$.fragment,s),i(Q.$$.fragment,s),i(Z.$$.fragment,s),i(X.$$.fragment,s),i(E.$$.fragment,s),i(_.$$.fragment,s),i(V.$$.fragment,s),i(z.$$.fragment,s),i(f.$$.fragment,s),i(W.$$.fragment,s),i(T.$$.fragment,s),i(Y.$$.fragment,s),i(D.$$.fragment,s),i(B.$$.fragment,s),i(S.$$.fragment,s),i(P.$$.fragment,s),i(K.$$.fragment,s),qs=!1},d(s){s&&(t(y),t(r),t(M),t(as),t($),t(ts),t(ns),t(I),t(ls),t(R),t(es),t(ps),t(rs),t(N),t(ms),t(hs),t(cs),t(q),t(us),t(is),t(js),t(G),t(os),t(ds),t(gs),t(v),t(ys),t(Ms),t(F),t(bs),t(x),t(Js),t(Us),t(fs),t(Ts),t(ws),t($s),t(A),t(Cs),t(Is),t(H),t(Rs),t(ks),t(L),t(Ns),t(Qs),t(Zs),t(ss)),t(p),j(w,s),j(C,s),j(k,s),j(U,s),j(Q,s),j(Z,s),j(X,s),j(E,s),j(_,s),j(V,s),j(z,s),j(f,s),j(W,s),j(T,s),j(Y,s),j(D,s),j(B,s),j(S,s),j(P,s),j(K,s)}}}const ca=`{"title":"Use with NumPy","local":"use-with-numpy","sections":[{"title":"Dataset format","local":"dataset-format","sections":[{"title":"N-dimensional arrays","local":"n-dimensional-arrays","sections":[],"depth":3},{"title":"Other feature types","local":"other-feature-types","sections":[],"depth":3}],"depth":2},{"title":"Data loading","local":"data-loading","sections":[{"title":"Using with_format('numpy')","local":"using-withformatnumpy","sections":[],"depth":3}],"depth":2}],"depth":1}`;function ua(J){return sa(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ya extends aa{constructor(p){super(),ta(this,p,ua,ha,Os,{})}}export{ya as component};
