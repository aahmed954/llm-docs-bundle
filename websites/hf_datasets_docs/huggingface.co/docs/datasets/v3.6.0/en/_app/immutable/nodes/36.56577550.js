import{s as LG,c as PG,u as KG,g as OG,d as e5,o as t5,n as D}from"../chunks/scheduler.bdbef820.js";import{S as SG,i as AG,r as g,u as f,v as b,d as h,t as u,w as _,g as p,m as rU,s as l,h as d,j as w,n as oU,f as i,c as r,k as M,a as $,y as s,o as s5,A as a5,x}from"../chunks/index.c0aea24a.js";import{T as cU}from"../chunks/Tip.31005f7d.js";import{D as k}from"../chunks/Docstring.a4266085.js";import{C as I}from"../chunks/CodeBlock.e814ab8d.js";import{E as C}from"../chunks/ExampleCodeBlock.8633afcb.js";import{H as fe,E as n5}from"../chunks/index.89e522f3.js";function l5(v){let t,y,o,a,c;const e=v[1].default,m=PG(e,v,v[2],null);return{c(){t=p("p"),y=rU("Added in "),o=rU(v[0]),a=l(),m&&m.c(),this.h()},l(B){t=d(B,"P",{class:!0});var V=w(t);y=oU(V,"Added in "),o=oU(V,v[0]),V.forEach(i),a=r(B),m&&m.l(B),this.h()},h(){M(t,"class","font-medium")},m(B,V){$(B,t,V),s(t,y),s(t,o),$(B,a,V),m&&m.m(B,V),c=!0},p(B,V){(!c||V&1)&&s5(o,B[0]),m&&m.p&&(!c||V&4)&&KG(m,e,B,B[2],c?e5(e,B[2],V,null):OG(B[2]),null)},i(B){c||(h(m,B),c=!0)},o(B){u(m,B),c=!1},d(B){B&&(i(t),i(a)),m&&m.d(B)}}}function r5(v){let t,y;return t=new cU({props:{$$slots:{default:[l5]},$$scope:{ctx:v}}}),{c(){g(t.$$.fragment)},l(o){f(t.$$.fragment,o)},m(o,a){b(t,o,a),y=!0},p(o,[a]){const c={};a&5&&(c.$$scope={dirty:a,ctx:o}),t.$set(c)},i(o){y||(h(t.$$.fragment,o),y=!0)},o(o){u(t.$$.fragment,o),y=!1},d(o){_(t,o)}}}function o5(v,t,y){let{$$slots:o={},$$scope:a}=t,{version:c}=t;return v.$$set=e=>{"version"in e&&y(0,c=e.version),"$$scope"in e&&y(2,a=e.$$scope)},[c,o,a]}class YG extends SG{constructor(t){super(),AG(this,t,o5,r5,LG,{version:0})}}function c5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldEluZm8lMEFkc19pbmZvJTIwJTNEJTIwRGF0YXNldEluZm8uZnJvbV9kaXJlY3RvcnkoJTIyJTJGcGF0aCUyRnRvJTJGZGlyZWN0b3J5JTJGJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_info = DatasetInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function p5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5pbmZvLndyaXRlX3RvX2RpcmVjdG9yeSglMjIlMkZwYXRoJTJGdG8lMkZkaXJlY3RvcnklMkYlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function d5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFtb3JlX3RleHQlMjAlM0QlMjBkcyU1QiUyMnRleHQlMjIlNUQlMEFkcy5hZGRfY29sdW1uKG5hbWUlM0QlMjJ0ZXh0XzIlMjIlMkMlMjBjb2x1bW4lM0Rtb3JlX3RleHQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>more_text = ds[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_column(name=<span class="hljs-string">&quot;text_2&quot;</span>, column=more_text)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text_2&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function i5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFuZXdfcmV2aWV3JTIwJTNEJTIwJTdCJ2xhYmVsJyUzQSUyMDAlMkMlMjAndGV4dCclM0ElMjAndGhpcyUyMG1vdmllJTIwaXMlMjB0aGUlMjBhYnNvbHV0ZSUyMHdvcnN0JTIwdGhpbmclMjBJJTIwaGF2ZSUyMGV2ZXIlMjBzZWVuJyU3RCUwQWRzJTIwJTNEJTIwZHMuYWRkX2l0ZW0obmV3X3JldmlldyklMEFkcyU1Qi0xJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>new_review = {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.add_item(new_review)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[-<span class="hljs-number">1</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function m5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fcGFuZGFzKGRmKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_pandas(df)',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function h5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZGVmJTIwZ2VuKCklM0ElMEElMjAlMjAlMjAlMjB5aWVsZCUyMCU3QiUyMnRleHQlMjIlM0ElMjAlMjJHb29kJTIyJTJDJTIwJTIybGFiZWwlMjIlM0ElMjAwJTdEJTBBJTIwJTIwJTIwJTIweWllbGQlMjAlN0IlMjJ0ZXh0JTIyJTNBJTIwJTIyQmFkJTIyJTJDJTIwJTIybGFiZWwlMjIlM0ElMjAxJTdEJTBBZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZ2VuZXJhdG9yKGdlbik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Good&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Bad&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_generator(gen)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function u5(v){let t,y;return t=new I({props:{code:"ZGVmJTIwZ2VuKHNoYXJkcyklM0ElMEElMjAlMjAlMjAlMjBmb3IlMjBzaGFyZCUyMGluJTIwc2hhcmRzJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwd2l0aCUyMG9wZW4oc2hhcmQpJTIwYXMlMjBmJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZm9yJTIwbGluZSUyMGluJTIwZiUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHlpZWxkJTIwJTdCJTIybGluZSUyMiUzQSUyMGxpbmUlN0QlMEFzaGFyZHMlMjAlM0QlMjAlNUJmJTIyZGF0YSU3QmklN0QudHh0JTIyJTIwZm9yJTIwaSUyMGluJTIwcmFuZ2UoMzIpJTVEJTBBZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZ2VuZXJhdG9yKGdlbiUyQyUyMGdlbl9rd2FyZ3MlM0QlN0IlMjJzaGFyZHMlMjIlM0ElMjBzaGFyZHMlN0Qp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">shards</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> shard <span class="hljs-keyword">in</span> shards:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(shard) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:
<span class="hljs-meta">... </span>                <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;line&quot;</span>: line}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>shards = [<span class="hljs-string">f&quot;data<span class="hljs-subst">{i}</span>.txt&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_generator(gen, gen_kwargs={<span class="hljs-string">&quot;shards&quot;</span>: shards})`,wrap:!1}}),{c(){g(t.$$.fragment)},l(o){f(t.$$.fragment,o)},m(o,a){b(t,o,a),y=!0},p:D,i(o){y||(h(t.$$.fragment,o),y=!0)},o(o){u(t.$$.fragment,o),y=!1},d(o){_(t,o)}}}function g5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5kYXRh",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data
MemoryMappedTable
text: string
label: int64
----
text: [[<span class="hljs-string">&quot;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&quot;</span>,<span class="hljs-string">&quot;the soundtrack alone is worth the price of admission .&quot;</span>,<span class="hljs-string">&quot;rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&quot;</span>,<span class="hljs-string">&quot;beneath the film&#x27;s obvious determination to shock at any cost lies considerable skill and determination , backed by sheer nerve .&quot;</span>,<span class="hljs-string">&quot;bielinsky is a filmmaker of impressive talent .&quot;</span>,<span class="hljs-string">&quot;so beautifully acted and directed , it&#x27;s clear that washington most certainly has a new career ahead of him if he so chooses .&quot;</span>,<span class="hljs-string">&quot;a visual spectacle full of stunning images and effects .&quot;</span>,<span class="hljs-string">&quot;a gentle and engrossing character study .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s enough to watch huppert scheming , with her small , intelligent eyes as steady as any noir villain , and to enjoy the perfectly pitched web of tension that chabrol spins .&quot;</span>,<span class="hljs-string">&quot;an engrossing portrait of uncompromising artists trying to create something original against the backdrop of a corporate music industry that only seems to care about the bottom line .&quot;</span>,...,<span class="hljs-string">&quot;ultimately , jane learns her place as a girl , softens up and loses some of the intensity that made her an interesting character to begin with .&quot;</span>,<span class="hljs-string">&quot;ah-nuld&#x27;s action hero days might be over .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s clear why deuces wild , which was shot two years ago , has been gathering dust on mgm&#x27;s shelf .&quot;</span>,<span class="hljs-string">&quot;feels like nothing quite so much as a middle-aged moviemaker&#x27;s attempt to surround himself with beautiful , half-naked women .&quot;</span>,<span class="hljs-string">&quot;when the precise nature of matthew&#x27;s predicament finally comes into sharp focus , the revelation fails to justify the build-up .&quot;</span>,<span class="hljs-string">&quot;this picture is murder by numbers , and as easy to be bored by as your abc&#x27;s , despite a few whopping shootouts .&quot;</span>,<span class="hljs-string">&quot;hilarious musical comedy though stymied by accents thick as mud .&quot;</span>,<span class="hljs-string">&quot;if you are into splatter movies , then you will probably have a reasonably good time with the salton sea .&quot;</span>,<span class="hljs-string">&quot;a dull , simple-minded and stereotypical tale of drugs , death and mind-numbing indifference on the inner-city streets .&quot;</span>,<span class="hljs-string">&quot;the feature-length stretch . . . strains the show&#x27;s concept .&quot;</span>]]
label: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,...,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function f5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5jYWNoZV9maWxlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
[{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function b5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5udW1fY29sdW1ucw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
<span class="hljs-number">2</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function _5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5udW1fcm93cw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
<span class="hljs-number">1066</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function x5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5jb2x1bW5fbmFtZXM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function y5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5zaGFwZQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
(<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function j5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy51bmlxdWUoJ2xhYmVsJyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&#x27;label&#x27;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function $5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIycmFqcHVya2FyJTJGc3F1YWQlMjIlMkMlMjBzcGxpdCUzRCUyMnRyYWluJTIyKSUwQWRzLmZlYXR1cmVzJTBBZHMuZmxhdHRlbigp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rajpurkar/squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
    num_rows: <span class="hljs-number">87599</span>
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function v5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwQ2xhc3NMYWJlbCUyQyUyMFZhbHVlJTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5mZWF0dXJlcyUwQW5ld19mZWF0dXJlcyUyMCUzRCUyMGRzLmZlYXR1cmVzLmNvcHkoKSUwQW5ld19mZWF0dXJlcyU1QidsYWJlbCclNUQlMjAlM0QlMjBDbGFzc0xhYmVsKG5hbWVzJTNEJTVCJ2JhZCclMkMlMjAnZ29vZCclNUQpJTBBbmV3X2ZlYXR1cmVzJTVCJ3RleHQnJTVEJTIwJTNEJTIwVmFsdWUoJ2xhcmdlX3N0cmluZycpJTBBZHMlMjAlM0QlMjBkcy5jYXN0KG5ld19mZWF0dXJlcyklMEFkcy5mZWF0dXJlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function w5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwQ2xhc3NMYWJlbCUwQWRzJTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMmNvcm5lbGwtbW92aWUtcmV2aWV3LWRhdGElMkZyb3R0ZW5fdG9tYXRvZXMlMjIlMkMlMjBzcGxpdCUzRCUyMnZhbGlkYXRpb24lMjIpJTBBZHMuZmVhdHVyZXMlMEFkcyUyMCUzRCUyMGRzLmNhc3RfY29sdW1uKCdsYWJlbCclMkMlMjBDbGFzc0xhYmVsKG5hbWVzJTNEJTVCJ2JhZCclMkMlMjAnZ29vZCclNUQpKSUwQWRzLmZlYXR1cmVz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function M5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcyUyMCUzRCUyMGRzLnJlbW92ZV9jb2x1bW5zKCdsYWJlbCcpJTBBZHMlMjAlM0QlMjBkcy5yZW1vdmVfY29sdW1ucyhjb2x1bW5fbmFtZXMlM0Rkcy5jb2x1bW5fbmFtZXMpJTIwJTIzJTIwUmVtb3ZpbmclMjBhbGwlMjB0aGUlMjBjb2x1bW5zJTIwcmV0dXJucyUyMGFuJTIwZW1wdHklMjBkYXRhc2V0JTIwd2l0aCUyMHRoZSUyMCU2MG51bV9yb3dzJTYwJTIwcHJvcGVydHklMjBzZXQlMjB0byUyMDA=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&#x27;label&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(column_names=ds.column_names) <span class="hljs-comment"># Removing all the columns returns an empty dataset with the \`num_rows\` property set to 0</span>
Dataset({
    features: [],
    num_rows: <span class="hljs-number">0</span>
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function k5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcyUyMCUzRCUyMGRzLnJlbmFtZV9jb2x1bW4oJ2xhYmVsJyUyQyUyMCdsYWJlbF9uZXcnKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function J5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcyUyMCUzRCUyMGRzLnJlbmFtZV9jb2x1bW5zKCU3Qid0ZXh0JyUzQSUyMCd0ZXh0X25ldyclMkMlMjAnbGFiZWwnJTNBJTIwJ2xhYmVsX25ldyclN0Qp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
Dataset({
    features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function T5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5zZWxlY3RfY29sdW1ucyglNUIndGV4dCclNUQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select_columns([<span class="hljs-string">&#x27;text&#x27;</span>])
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function D5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyYm9vbHElMjIlMkMlMjBzcGxpdCUzRCUyMnZhbGlkYXRpb24lMjIpJTBBZHMuZmVhdHVyZXMlMEFkcyUyMCUzRCUyMGRzLmNsYXNzX2VuY29kZV9jb2x1bW4oJ2Fuc3dlcicpJTBBZHMuZmVhdHVyZXM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&#x27;answer&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function C5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5fX2xlbl9f",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.__len__
&lt;bound method Dataset.__len__ of Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})&gt;`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function I5(v){let t,y="gets updated. In this case, if you apply <code>map</code> on a dataset to add a new column, then this column will be formatted as:",o,a,c;return a=new I({props:{code:"bmV3JTIwZm9ybWF0dGVkJTIwY29sdW1ucyUyMCUzRCUyMChhbGwlMjBjb2x1bW5zJTIwLSUyMHByZXZpb3VzbHklMjB1bmZvcm1hdHRlZCUyMGNvbHVtbnMp",highlighted:'<span class="hljs-built_in">new</span> formatted <span class="hljs-keyword">columns</span> = (<span class="hljs-keyword">all</span> <span class="hljs-keyword">columns</span> - previously unformatted <span class="hljs-keyword">columns</span>)',wrap:!1}}),{c(){t=p("p"),t.innerHTML=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-bzwixd"&&(t.innerHTML=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function U5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjb3JuZWxsLW1vdmllLXJldmlldy1kYXRhJTJGcm90dGVuX3RvbWF0b2VzJTIyJTJDJTIwc3BsaXQlM0QlMjJ2YWxpZGF0aW9uJTIyKSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMmJlcnQtYmFzZS1jYXNlZCUyMiklMEFkcyUyMCUzRCUyMGRzLm1hcChsYW1iZGElMjB4JTNBJTIwdG9rZW5pemVyKHglNUIndGV4dCclNUQlMkMlMjB0cnVuY2F0aW9uJTNEVHJ1ZSUyQyUyMHBhZGRpbmclM0RUcnVlKSUyQyUyMGJhdGNoZWQlM0RUcnVlKSUwQWRzLnNldF9mb3JtYXQodHlwZSUzRCdudW1weSclMkMlMjBjb2x1bW5zJTNEJTVCJ3RleHQnJTJDJTIwJ2xhYmVsJyU1RCklMEFkcy5mb3JtYXQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>,
<span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function Z5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjb3JuZWxsLW1vdmllLXJldmlldy1kYXRhJTJGcm90dGVuX3RvbWF0b2VzJTIyJTJDJTIwc3BsaXQlM0QlMjJ2YWxpZGF0aW9uJTIyKSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCdiZXJ0LWJhc2UtdW5jYXNlZCcpJTBBZGVmJTIwZW5jb2RlKGJhdGNoKSUzQSUwQSUyMCUyMCUyMCUyMHJldHVybiUyMHRva2VuaXplcihiYXRjaCU1Qid0ZXh0JyU1RCUyQyUyMHBhZGRpbmclM0RUcnVlJTJDJTIwdHJ1bmNhdGlvbiUzRFRydWUlMkMlMjByZXR1cm5fdGVuc29ycyUzRCdwdCcpJTBBZHMuc2V0X3RyYW5zZm9ybShlbmNvZGUpJTBBZHMlNUIwJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&#x27;text&#x27;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">29353</span>,  <span class="hljs-number">2135</span>, <span class="hljs-number">15102</span>,  <span class="hljs-number">1996</span>,  <span class="hljs-number">9428</span>, <span class="hljs-number">20868</span>,  <span class="hljs-number">2890</span>,  <span class="hljs-number">8663</span>,  <span class="hljs-number">6895</span>,
         <span class="hljs-number">20470</span>,  <span class="hljs-number">2571</span>,  <span class="hljs-number">3663</span>,  <span class="hljs-number">2090</span>,  <span class="hljs-number">4603</span>,  <span class="hljs-number">3017</span>,  <span class="hljs-number">3008</span>,  <span class="hljs-number">1998</span>,  <span class="hljs-number">2037</span>, <span class="hljs-number">24211</span>,
         <span class="hljs-number">5637</span>,  <span class="hljs-number">1998</span>, <span class="hljs-number">11690</span>,  <span class="hljs-number">2336</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function R5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjb3JuZWxsLW1vdmllLXJldmlldy1kYXRhJTJGcm90dGVuX3RvbWF0b2VzJTIyJTJDJTIwc3BsaXQlM0QlMjJ2YWxpZGF0aW9uJTIyKSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMmJlcnQtYmFzZS1jYXNlZCUyMiklMEFkcyUyMCUzRCUyMGRzLm1hcChsYW1iZGElMjB4JTNBJTIwdG9rZW5pemVyKHglNUIndGV4dCclNUQlMkMlMjB0cnVuY2F0aW9uJTNEVHJ1ZSUyQyUyMHBhZGRpbmclM0RUcnVlKSUyQyUyMGJhdGNoZWQlM0RUcnVlKSUwQWRzLnNldF9mb3JtYXQodHlwZSUzRCdudW1weSclMkMlMjBjb2x1bW5zJTNEJTVCJ2lucHV0X2lkcyclMkMlMjAndG9rZW5fdHlwZV9pZHMnJTJDJTIwJ2F0dGVudGlvbl9tYXNrJyUyQyUyMCdsYWJlbCclNUQpJTBBZHMuZm9ybWF0JTBBZHMucmVzZXRfZm9ybWF0KCklMEFkcy5mb3JtYXQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function F5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjb3JuZWxsLW1vdmllLXJldmlldy1kYXRhJTJGcm90dGVuX3RvbWF0b2VzJTIyJTJDJTIwc3BsaXQlM0QlMjJ2YWxpZGF0aW9uJTIyKSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMmJlcnQtYmFzZS1jYXNlZCUyMiklMEFkcyUyMCUzRCUyMGRzLm1hcChsYW1iZGElMjB4JTNBJTIwdG9rZW5pemVyKHglNUIndGV4dCclNUQlMkMlMjB0cnVuY2F0aW9uJTNEVHJ1ZSUyQyUyMHBhZGRpbmclM0RUcnVlKSUyQyUyMGJhdGNoZWQlM0RUcnVlKSUwQWRzLmZvcm1hdCUwQWRzJTIwJTNEJTIwZHMud2l0aF9mb3JtYXQoJTIydG9yY2glMjIpJTBBZHMuZm9ybWF0JTBBZHMlNUIwJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;torch&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;label&#x27;</span>: tensor(<span class="hljs-number">1</span>),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
        <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
        <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]),
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
        <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function G5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjb3JuZWxsLW1vdmllLXJldmlldy1kYXRhJTJGcm90dGVuX3RvbWF0b2VzJTIyJTJDJTIwc3BsaXQlM0QlMjJ2YWxpZGF0aW9uJTIyKSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMmJlcnQtYmFzZS1jYXNlZCUyMiklMEFkZWYlMjBlbmNvZGUoZXhhbXBsZSklM0ElMEElMjAlMjAlMjAlMjByZXR1cm4lMjB0b2tlbml6ZXIoZXhhbXBsZSU1QiUyMnRleHQlMjIlNUQlMkMlMjBwYWRkaW5nJTNEVHJ1ZSUyQyUyMHRydW5jYXRpb24lM0RUcnVlJTJDJTIwcmV0dXJuX3RlbnNvcnMlM0QncHQnKSUwQWRzJTIwJTNEJTIwZHMud2l0aF90cmFuc2Zvcm0oZW5jb2RlKSUwQWRzJTVCMCU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
         <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
         <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function N5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5jbGVhbnVwX2NhY2hlX2ZpbGVzKCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
<span class="hljs-number">10</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function z5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkZWYlMjBhZGRfcHJlZml4KGV4YW1wbGUpJTNBJTBBJTIwJTIwJTIwJTIwZXhhbXBsZSU1QiUyMnRleHQlMjIlNUQlMjAlM0QlMjAlMjJSZXZpZXclM0ElMjAlMjIlMjAlMkIlMjBleGFtcGxlJTVCJTIydGV4dCUyMiU1RCUwQSUyMCUyMCUyMCUyMHJldHVybiUyMGV4YW1wbGUlMEFkcyUyMCUzRCUyMGRzLm1hcChhZGRfcHJlZml4KSUwQWRzJTVCMCUzQTMlNUQlNUIlMjJ0ZXh0JTIyJTVEJTBBJTBBZHMlMjAlM0QlMjBkcy5tYXAobGFtYmRhJTIwZXhhbXBsZSUzQSUyMHRva2VuaXplcihleGFtcGxlJTVCJTIydGV4dCUyMiU1RCklMkMlMjBiYXRjaGVkJTNEVHJ1ZSklMEFkcyUyMCUzRCUyMGRzLm1hcChhZGRfcHJlZml4JTJDJTIwbnVtX3Byb2MlM0Q0KQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the soundtrack alone is worth the price of admission .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function X5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5maWx0ZXIobGFtYmRhJTIweCUzQSUyMHglNUIlMjJsYWJlbCUyMiU1RCUyMCUzRCUzRCUyMDEp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function V5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcy5zZWxlY3QocmFuZ2UoNCkp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">4</span>
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function q5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJ2Nvcm5lbGwtbW92aWUtcmV2aWV3LWRhdGElMkZyb3R0ZW5fdG9tYXRvZXMnJTJDJTIwc3BsaXQlM0QndmFsaWRhdGlvbicpJTBBZHMlNUInbGFiZWwnJTVEJTVCJTNBMTAlNUQlMEFzb3J0ZWRfZHMlMjAlM0QlMjBkcy5zb3J0KCdsYWJlbCcpJTBBc29ydGVkX2RzJTVCJ2xhYmVsJyU1RCU1QiUzQTEwJTVEJTBBYW5vdGhlcl9zb3J0ZWRfZHMlMjAlM0QlMjBkcy5zb3J0KCU1QidsYWJlbCclMkMlMjAndGV4dCclNUQlMkMlMjByZXZlcnNlJTNEJTVCVHJ1ZSUyQyUyMEZhbHNlJTVEKSUwQWFub3RoZXJfc29ydGVkX2RzJTVCJ2xhYmVsJyU1RCU1QiUzQTEwJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;cornell-movie-review-data/rotten_tomatoes&#x27;</span>, split=<span class="hljs-string">&#x27;validation&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>another_sorted_ds = ds.sort([<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>], reverse=[<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>another_sorted_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function B5(v){let t,y="This may take a lot of time depending of the size of your dataset though:",o,a,c;return a=new I({props:{code:"bXlfZGF0YXNldCU1QjAlNUQlMjAlMjAlMjMlMjBmYXN0JTBBbXlfZGF0YXNldCUyMCUzRCUyMG15X2RhdGFzZXQuc2h1ZmZsZShzZWVkJTNENDIpJTBBbXlfZGF0YXNldCU1QjAlNUQlMjAlMjAlMjMlMjB1cCUyMHRvJTIwMTB4JTIwc2xvd2VyJTBBbXlfZGF0YXNldCUyMCUzRCUyMG15X2RhdGFzZXQuZmxhdHRlbl9pbmRpY2VzKCklMjAlMjAlMjMlMjByZXdyaXRlJTIwdGhlJTIwc2h1ZmZsZWQlMjBkYXRhc2V0JTIwb24lMjBkaXNrJTIwYXMlMjBjb250aWd1b3VzJTIwY2h1bmtzJTIwb2YlMjBkYXRhJTBBbXlfZGF0YXNldCU1QjAlNUQlMjAlMjAlMjMlMjBmYXN0JTIwYWdhaW4=",highlighted:`my_dataset[<span class="hljs-number">0</span>]  <span class="hljs-comment"># fast</span>
my_dataset = my_dataset.shuffle(seed=<span class="hljs-number">42</span>)
my_dataset[<span class="hljs-number">0</span>]  <span class="hljs-comment"># up to 10x slower</span>
my_dataset = my_dataset.flatten_indices()  <span class="hljs-comment"># rewrite the shuffled dataset on disk as contiguous chunks of data</span>
my_dataset[<span class="hljs-number">0</span>]  <span class="hljs-comment"># fast again</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-4lic98"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function W5(v){let t,y="It only shuffles the shards order and adds a shuffle buffer to your dataset, which keeps the speed of your dataset optimal:",o,a,c;return a=new I({props:{code:"bXlfaXRlcmFibGVfZGF0YXNldCUyMCUzRCUyMG15X2RhdGFzZXQudG9faXRlcmFibGVfZGF0YXNldChudW1fc2hhcmRzJTNEMTI4KSUwQWZvciUyMGV4YW1wbGUlMjBpbiUyMGVudW1lcmF0ZShteV9pdGVyYWJsZV9kYXRhc2V0KSUzQSUyMCUyMCUyMyUyMGZhc3QlMEElMjAlMjAlMjAlMjBwYXNzJTBBJTBBc2h1ZmZsZWRfaXRlcmFibGVfZGF0YXNldCUyMCUzRCUyMG15X2l0ZXJhYmxlX2RhdGFzZXQuc2h1ZmZsZShzZWVkJTNENDIlMkMlMjBidWZmZXJfc2l6ZSUzRDEwMCklMEElMEFmb3IlMjBleGFtcGxlJTIwaW4lMjBlbnVtZXJhdGUoc2h1ZmZsZWRfaXRlcmFibGVfZGF0YXNldCklM0ElMjAlMjAlMjMlMjBhcyUyMGZhc3QlMjBhcyUyMGJlZm9yZSUwQSUyMCUyMCUyMCUyMHBhc3M=",highlighted:`my_iterable_dataset = my_dataset.to_iterable_dataset(num_shards=<span class="hljs-number">128</span>)
<span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(my_iterable_dataset):  <span class="hljs-comment"># fast</span>
    <span class="hljs-keyword">pass</span>

shuffled_iterable_dataset = my_iterable_dataset.shuffle(seed=<span class="hljs-number">42</span>, buffer_size=<span class="hljs-number">100</span>)

<span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(shuffled_iterable_dataset):  <span class="hljs-comment"># as fast as before</span>
    <span class="hljs-keyword">pass</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-x7zi6r"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function H5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcyU1QidsYWJlbCclNUQlNUIlM0ExMCU1RCUwQSUwQXNodWZmbGVkX2RzJTIwJTNEJTIwZHMuc2h1ZmZsZShzZWVkJTNENDIpJTBBc2h1ZmZsZWRfZHMlNUInbGFiZWwnJTVEJTVCJTNBMTAlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function E5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBbGlzdChkcy50YWtlKDMpKSUwQWRzJTIwJTNEJTIwZHMuc2tpcCgxKSUwQWxpc3QoZHMudGFrZSgzKSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.skip(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;if you sometimes like to go to the movies to have fun , wasabi is a good place to start .&#x27;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function Q5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBc21hbGxfZHMlMjAlM0QlMjBkcy50YWtlKDIpJTBBbGlzdChzbWFsbF9kcyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>small_ds = ds.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(small_ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function Y5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcyUyMCUzRCUyMGRzLnRyYWluX3Rlc3Rfc3BsaXQodGVzdF9zaXplJTNEMC4yJTJDJTIwc2h1ZmZsZSUzRFRydWUpJTBBJTBBZHMlMjAlM0QlMjBkcy50cmFpbl90ZXN0X3NwbGl0KHRlc3Rfc2l6ZSUzRDAuMiUyQyUyMHNlZWQlM0Q0MiklMEElMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJpbWRiJTIyJTJDc3BsaXQlM0QlMjJ0cmFpbiUyMiklMEFkcyUyMCUzRCUyMGRzLnRyYWluX3Rlc3Rfc3BsaXQodGVzdF9zaXplJTNEMC4yJTJDJTIwc3RyYXRpZnlfYnlfY29sdW1uJTNEJTIybGFiZWwlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, shuffle=<span class="hljs-literal">True</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">852</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">214</span>
    })
})

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, seed=<span class="hljs-number">42</span>)

<span class="hljs-comment"># stratified split</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>,split=<span class="hljs-string">&quot;train&quot;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, stratify_by_column=<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">20000</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">5000</span>
    })
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function L5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydmFsaWRhdGlvbiUyMiklMEFkcyUwQWRzLnNoYXJkKG51bV9zaGFyZHMlM0QyJTJDJTIwaW5kZXglM0QwKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function S5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBZHMlMjAlM0QlMjBkcy50YWtlKDIpLnJlcGVhdCgyKSUwQWxpc3QoZHMp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.take(<span class="hljs-number">2</span>).repeat(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function A5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHNfdHJhaW4lMjAlM0QlMjBkcyU1QiUyMnRyYWluJTIyJTVELnRvX3RmX2RhdGFzZXQoJTBBJTIwJTIwJTIwY29sdW1ucyUzRCU1QidpbnB1dF9pZHMnJTJDJTIwJ3Rva2VuX3R5cGVfaWRzJyUyQyUyMCdhdHRlbnRpb25fbWFzayclMkMlMjAnbGFiZWwnJTVEJTJDJTBBJTIwJTIwJTIwc2h1ZmZsZSUzRFRydWUlMkMlMEElMjAlMjAlMjBiYXRjaF9zaXplJTNEMTYlMkMlMEElMjAlMjAlMjBjb2xsYXRlX2ZuJTNEZGF0YV9jb2xsYXRvciUyQyUwQSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds_train = ds[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>   columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-meta">... </span>   shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>   batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>   collate_fn=data_collator,
<span class="hljs-meta">... </span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function P5(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZGF0YXNldC5wdXNoX3RvX2h1YiglMjIlM0Nvcmdhbml6YXRpb24lM0UlMkYlM0NkYXRhc2V0X2lkJTNFJTIyKSUwQWRhdGFzZXRfZGljdC5wdXNoX3RvX2h1YiglMjIlM0Nvcmdhbml6YXRpb24lM0UlMkYlM0NkYXRhc2V0X2lkJTNFJTIyJTJDJTIwcHJpdmF0ZSUzRFRydWUpJTBBZGF0YXNldC5wdXNoX3RvX2h1YiglMjIlM0Nvcmdhbml6YXRpb24lM0UlMkYlM0NkYXRhc2V0X2lkJTNFJTIyJTJDJTIwbWF4X3NoYXJkX3NpemUlM0QlMjIxR0IlMjIpJTBBZGF0YXNldC5wdXNoX3RvX2h1YiglMjIlM0Nvcmdhbml6YXRpb24lM0UlMkYlM0NkYXRhc2V0X2lkJTNFJTIyJTJDJTIwbnVtX3NoYXJkcyUzRDEwMjQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, private=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, max_shard_size=<span class="hljs-string">&quot;1GB&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, num_shards=<span class="hljs-number">1024</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function K5(v){let t,y="If your dataset has multiple splits (e.g. train/validation/test):",o,a,c;return a=new I({props:{code:"dHJhaW5fZGF0YXNldC5wdXNoX3RvX2h1YiglMjIlM0Nvcmdhbml6YXRpb24lM0UlMkYlM0NkYXRhc2V0X2lkJTNFJTIyJTJDJTIwc3BsaXQlM0QlMjJ0cmFpbiUyMiklMEF2YWxfZGF0YXNldC5wdXNoX3RvX2h1YiglMjIlM0Nvcmdhbml6YXRpb24lM0UlMkYlM0NkYXRhc2V0X2lkJTNFJTIyJTJDJTIwc3BsaXQlM0QlMjJ2YWxpZGF0aW9uJTIyKSUwQSUyMyUyMGxhdGVyJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjIlM0Nvcmdhbml6YXRpb24lM0UlMkYlM0NkYXRhc2V0X2lkJTNFJTIyKSUwQXRyYWluX2RhdGFzZXQlMjAlM0QlMjBkYXRhc2V0JTVCJTIydHJhaW4lMjIlNUQlMEF2YWxfZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQlNUIlMjJ2YWxpZGF0aW9uJTIyJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>train_dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>val_dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># later</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_dataset = dataset[<span class="hljs-string">&quot;train&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>val_dataset = dataset[<span class="hljs-string">&quot;validation&quot;</span>]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-if431r"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function O5(v){let t,y="If you want to add a new configuration (or subset) to a dataset (e.g. if the dataset has multiple tasks/versions/languages):",o,a,c;return a=new I({props:{code:"ZW5nbGlzaF9kYXRhc2V0LnB1c2hfdG9faHViKCUyMiUzQ29yZ2FuaXphdGlvbiUzRSUyRiUzQ2RhdGFzZXRfaWQlM0UlMjIlMkMlMjAlMjJlbiUyMiklMEFmcmVuY2hfZGF0YXNldC5wdXNoX3RvX2h1YiglMjIlM0Nvcmdhbml6YXRpb24lM0UlMkYlM0NkYXRhc2V0X2lkJTNFJTIyJTJDJTIwJTIyZnIlMjIpJTBBJTIzJTIwbGF0ZXIlMEFlbmdsaXNoX2RhdGFzZXQlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyJTNDb3JnYW5pemF0aW9uJTNFJTJGJTNDZGF0YXNldF9pZCUzRSUyMiUyQyUyMCUyMmVuJTIyKSUwQWZyZW5jaF9kYXRhc2V0JTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMiUzQ29yZ2FuaXphdGlvbiUzRSUyRiUzQ2RhdGFzZXRfaWQlM0UlMjIlMkMlMjAlMjJmciUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>english_dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, <span class="hljs-string">&quot;en&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>french_dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, <span class="hljs-string">&quot;fr&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># later</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>english_dataset = load_dataset(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, <span class="hljs-string">&quot;en&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>french_dataset = load_dataset(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, <span class="hljs-string">&quot;fr&quot;</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-1l9vuim"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function eN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMuc2F2ZV90b19kaXNrKCUyMnBhdGglMkZ0byUyRmRhdGFzZXQlMkZkaXJlY3RvcnklMjIpJTBBZHMuc2F2ZV90b19kaXNrKCUyMnBhdGglMkZ0byUyRmRhdGFzZXQlMkZkaXJlY3RvcnklMjIlMkMlMjBtYXhfc2hhcmRfc2l6ZSUzRCUyMjFHQiUyMiklMEFkcy5zYXZlX3RvX2Rpc2soJTIycGF0aCUyRnRvJTJGZGF0YXNldCUyRmRpcmVjdG9yeSUyMiUyQyUyMG51bV9zaGFyZHMlM0QxMDI0KQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>, max_shard_size=<span class="hljs-string">&quot;1GB&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>, num_shards=<span class="hljs-number">1024</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function tN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMlMjAlM0QlMjBsb2FkX2Zyb21fZGlzayglMjJwYXRoJTJGdG8lMkZkYXRhc2V0JTJGZGlyZWN0b3J5JTIyKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function sN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMudG9fY3N2KCUyMnBhdGglMkZ0byUyRmRhdGFzZXQlMkZkaXJlY3RvcnklMjIp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_csv(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function aN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMudG9fcGFuZGFzKCk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_pandas()',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function nN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMudG9fZGljdCgp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_dict()',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function lN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMudG9fanNvbiglMjJwYXRoJTJGdG8lMkZkYXRhc2V0JTJGZGlyZWN0b3J5JTJGZmlsZW5hbWUuanNvbmwlMjIp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_json(<span class="hljs-string">&quot;path/to/dataset/directory/filename.jsonl&quot;</span>)',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function rN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMudG9fcGFycXVldCglMjJwYXRoJTJGdG8lMkZkYXRhc2V0JTJGZGlyZWN0b3J5JTIyKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_parquet(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function oN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"JTIzJTIwY29uJTIwcHJvdmlkZWQlMjBhcyUyMGElMjBjb25uZWN0aW9uJTIwVVJJJTIwc3RyaW5nJTBBZHMudG9fc3FsKCUyMmRhdGElMjIlMkMlMjAlMjJzcWxpdGUlM0ElMkYlMkYlMkZteV9vd25fZGIuc3FsJTIyKSUwQSUyMyUyMGNvbiUyMHByb3ZpZGVkJTIwYXMlMjBhJTIwc3FsaXRlMyUyMGNvbm5lY3Rpb24lMjBvYmplY3QlMEFpbXBvcnQlMjBzcWxpdGUzJTBBY29uJTIwJTNEJTIwc3FsaXRlMy5jb25uZWN0KCUyMm15X293bl9kYi5zcWwlMjIpJTBBd2l0aCUyMGNvbiUzQSUwQSUyMCUyMCUyMCUyMGRzLnRvX3NxbCglMjJkYXRhJTIyJTJDJTIwY29uKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># con provided as a connection URI string</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_sql(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;sqlite:///my_own_db.sql&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># con provided as a sqlite3 connection object</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sqlite3
<span class="hljs-meta">&gt;&gt;&gt; </span>con = sqlite3.connect(<span class="hljs-string">&quot;my_own_db.sql&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> con:
<span class="hljs-meta">... </span>    ds.to_sql(<span class="hljs-string">&quot;data&quot;</span>, con)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function cN(v){let t,y="Basic usage:",o,a,c;return a=new I({props:{code:"aWRzJTIwJTNEJTIwZHMudG9faXRlcmFibGVfZGF0YXNldCgpJTBBZm9yJTIwZXhhbXBsZSUyMGluJTIwaWRzJTNBJTBBJTIwJTIwJTIwJTIwcGFzcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ds.to_iterable_dataset()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> ids:
<span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-1aguo8v"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function pN(v){let t,y="With lazy filtering and processing:",o,a,c;return a=new I({props:{code:"aWRzJTIwJTNEJTIwZHMudG9faXRlcmFibGVfZGF0YXNldCgpJTBBaWRzJTIwJTNEJTIwaWRzLmZpbHRlcihmaWx0ZXJfZm4pLm1hcChwcm9jZXNzX2ZuKSUyMCUyMCUyMyUyMHdpbGwlMjBmaWx0ZXIlMjBhbmQlMjBwcm9jZXNzJTIwb24tdGhlLWZseSUyMHdoZW4lMjB5b3UlMjBzdGFydCUyMGl0ZXJhdGluZyUyMG92ZXIlMjB0aGUlMjBpdGVyYWJsZSUyMGRhdGFzZXQlMEFmb3IlMjBleGFtcGxlJTIwaW4lMjBpZHMlM0ElMEElMjAlMjAlMjAlMjBwYXNz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ds.to_iterable_dataset()
<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ids.<span class="hljs-built_in">filter</span>(filter_fn).<span class="hljs-built_in">map</span>(process_fn)  <span class="hljs-comment"># will filter and process on-the-fly when you start iterating over the iterable dataset</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> ids:
<span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-1hwce9a"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function dN(v){let t,y="With sharding to enable efficient shuffling:",o,a,c;return a=new I({props:{code:"aWRzJTIwJTNEJTIwZHMudG9faXRlcmFibGVfZGF0YXNldChudW1fc2hhcmRzJTNENjQpJTIwJTIwJTIzJTIwdGhlJTIwZGF0YXNldCUyMGlzJTIwc3BsaXQlMjBpbnRvJTIwNjQlMjBzaGFyZHMlMjB0byUyMGJlJTIwaXRlcmF0ZWQlMjBvdmVyJTBBaWRzJTIwJTNEJTIwaWRzLnNodWZmbGUoYnVmZmVyX3NpemUlM0QxMF8wMDApJTIwJTIwJTIzJTIwd2lsbCUyMHNodWZmbGUlMjB0aGUlMjBzaGFyZHMlMjBvcmRlciUyMGFuZCUyMHVzZSUyMGElMjBzaHVmZmxlJTIwYnVmZmVyJTIwZm9yJTIwZmFzdCUyMGFwcHJveGltYXRlJTIwc2h1ZmZsaW5nJTIwd2hlbiUyMHlvdSUyMHN0YXJ0JTIwaXRlcmF0aW5nJTBBZm9yJTIwZXhhbXBsZSUyMGluJTIwaWRzJTNBJTBBJTIwJTIwJTIwJTIwcGFzcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ds.to_iterable_dataset(num_shards=<span class="hljs-number">64</span>)  <span class="hljs-comment"># the dataset is split into 64 shards to be iterated over</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ids.shuffle(buffer_size=<span class="hljs-number">10_000</span>)  <span class="hljs-comment"># will shuffle the shards order and use a shuffle buffer for fast approximate shuffling when you start iterating</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> ids:
<span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-995aun"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function iN(v){let t,y="With a PyTorch DataLoader:",o,a,c;return a=new I({props:{code:"aW1wb3J0JTIwdG9yY2glMEFpZHMlMjAlM0QlMjBkcy50b19pdGVyYWJsZV9kYXRhc2V0KG51bV9zaGFyZHMlM0Q2NCklMEFpZHMlMjAlM0QlMjBpZHMuZmlsdGVyKGZpbHRlcl9mbikubWFwKHByb2Nlc3NfZm4pJTBBZGF0YWxvYWRlciUyMCUzRCUyMHRvcmNoLnV0aWxzLmRhdGEuRGF0YUxvYWRlcihpZHMlMkMlMjBudW1fd29ya2VycyUzRDQpJTIwJTIwJTIzJTIwd2lsbCUyMGFzc2lnbiUyMDY0JTIwJTJGJTIwNCUyMCUzRCUyMDE2JTIwc2hhcmRzJTIwdG8lMjBlYWNoJTIwd29ya2VyJTIwdG8lMjBsb2FkJTJDJTIwZmlsdGVyJTIwYW5kJTIwcHJvY2VzcyUyMHdoZW4lMjB5b3UlMjBzdGFydCUyMGl0ZXJhdGluZyUwQWZvciUyMGV4YW1wbGUlMjBpbiUyMGlkcyUzQSUwQSUyMCUyMCUyMCUyMHBhc3M=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ds.to_iterable_dataset(num_shards=<span class="hljs-number">64</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ids.<span class="hljs-built_in">filter</span>(filter_fn).<span class="hljs-built_in">map</span>(process_fn)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = torch.utils.data.DataLoader(ids, num_workers=<span class="hljs-number">4</span>)  <span class="hljs-comment"># will assign 64 / 4 = 16 shards to each worker to load, filter and process when you start iterating</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> ids:
<span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-ri12p1"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function mN(v){let t,y="With a PyTorch DataLoader and shuffling:",o,a,c;return a=new I({props:{code:"aW1wb3J0JTIwdG9yY2glMEFpZHMlMjAlM0QlMjBkcy50b19pdGVyYWJsZV9kYXRhc2V0KG51bV9zaGFyZHMlM0Q2NCklMEFpZHMlMjAlM0QlMjBpZHMuc2h1ZmZsZShidWZmZXJfc2l6ZSUzRDEwXzAwMCklMjAlMjAlMjMlMjB3aWxsJTIwc2h1ZmZsZSUyMHRoZSUyMHNoYXJkcyUyMG9yZGVyJTIwYW5kJTIwdXNlJTIwYSUyMHNodWZmbGUlMjBidWZmZXIlMjB3aGVuJTIweW91JTIwc3RhcnQlMjBpdGVyYXRpbmclMEFkYXRhbG9hZGVyJTIwJTNEJTIwdG9yY2gudXRpbHMuZGF0YS5EYXRhTG9hZGVyKGlkcyUyQyUyMG51bV93b3JrZXJzJTNENCklMjAlMjAlMjMlMjB3aWxsJTIwYXNzaWduJTIwNjQlMjAlMkYlMjA0JTIwJTNEJTIwMTYlMjBzaGFyZHMlMjBmcm9tJTIwdGhlJTIwc2h1ZmZsZWQlMjBsaXN0JTIwb2YlMjBzaGFyZHMlMjB0byUyMGVhY2glMjB3b3JrZXIlMjB3aGVuJTIweW91JTIwc3RhcnQlMjBpdGVyYXRpbmclMEFmb3IlMjBleGFtcGxlJTIwaW4lMjBpZHMlM0ElMEElMjAlMjAlMjAlMjBwYXNz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ds.to_iterable_dataset(num_shards=<span class="hljs-number">64</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ids.shuffle(buffer_size=<span class="hljs-number">10_000</span>)  <span class="hljs-comment"># will shuffle the shards order and use a shuffle buffer when you start iterating</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = torch.utils.data.DataLoader(ids, num_workers=<span class="hljs-number">4</span>)  <span class="hljs-comment"># will assign 64 / 4 = 16 shards from the shuffled list of shards to each worker when you start iterating</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> ids:
<span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-dsklbq"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function hN(v){let t,y;return t=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzLmRpc3RyaWJ1dGVkJTIwaW1wb3J0JTIwc3BsaXRfZGF0YXNldF9ieV9ub2RlJTBBaWRzJTIwJTNEJTIwZHMudG9faXRlcmFibGVfZGF0YXNldChudW1fc2hhcmRzJTNENTEyKSUwQWlkcyUyMCUzRCUyMGlkcy5zaHVmZmxlKGJ1ZmZlcl9zaXplJTNEMTBfMDAwJTJDJTIwc2VlZCUzRDQyKSUyMCUyMCUyMyUyMHdpbGwlMjBzaHVmZmxlJTIwdGhlJTIwc2hhcmRzJTIwb3JkZXIlMjBhbmQlMjB1c2UlMjBhJTIwc2h1ZmZsZSUyMGJ1ZmZlciUyMHdoZW4lMjB5b3UlMjBzdGFydCUyMGl0ZXJhdGluZyUwQWlkcyUyMCUzRCUyMHNwbGl0X2RhdGFzZXRfYnlfbm9kZShkcyUyQyUyMHdvcmxkX3NpemUlM0Q4JTJDJTIwcmFuayUzRDApJTIwJTIwJTIzJTIwd2lsbCUyMGtlZXAlMjBvbmx5JTIwNTEyJTIwJTJGJTIwOCUyMCUzRCUyMDY0JTIwc2hhcmRzJTIwZnJvbSUyMHRoZSUyMHNodWZmbGVkJTIwbGlzdHMlMjBvZiUyMHNoYXJkcyUyMHdoZW4lMjB5b3UlMjBzdGFydCUyMGl0ZXJhdGluZyUwQWRhdGFsb2FkZXIlMjAlM0QlMjB0b3JjaC51dGlscy5kYXRhLkRhdGFMb2FkZXIoaWRzJTJDJTIwbnVtX3dvcmtlcnMlM0Q0KSUyMCUyMCUyMyUyMHdpbGwlMjBhc3NpZ24lMjA2NCUyMCUyRiUyMDQlMjAlM0QlMjAxNiUyMHNoYXJkcyUyMGZyb20lMjB0aGlzJTIwbm9kZSdzJTIwbGlzdCUyMG9mJTIwc2hhcmRzJTIwdG8lMjBlYWNoJTIwd29ya2VyJTIwd2hlbiUyMHlvdSUyMHN0YXJ0JTIwaXRlcmF0aW5nJTBBZm9yJTIwZXhhbXBsZSUyMGluJTIwaWRzJTNBJTBBJTIwJTIwJTIwJTIwcGFzcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.distributed <span class="hljs-keyword">import</span> split_dataset_by_node
<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ds.to_iterable_dataset(num_shards=<span class="hljs-number">512</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ids.shuffle(buffer_size=<span class="hljs-number">10_000</span>, seed=<span class="hljs-number">42</span>)  <span class="hljs-comment"># will shuffle the shards order and use a shuffle buffer when you start iterating</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ids = split_dataset_by_node(ds, world_size=<span class="hljs-number">8</span>, rank=<span class="hljs-number">0</span>)  <span class="hljs-comment"># will keep only 512 / 8 = 64 shards from the shuffled lists of shards when you start iterating</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = torch.utils.data.DataLoader(ids, num_workers=<span class="hljs-number">4</span>)  <span class="hljs-comment"># will assign 64 / 4 = 16 shards from this node&#x27;s list of shards to each worker when you start iterating</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> ids:
<span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span>`,wrap:!1}}),{c(){g(t.$$.fragment)},l(o){f(t.$$.fragment,o)},m(o,a){b(t,o,a),y=!0},p:D,i(o){y||(h(t.$$.fragment,o),y=!0)},o(o){u(t.$$.fragment,o),y=!1},d(o){_(t,o)}}}function uN(v){let t,y="With shuffling and multiple epochs:",o,a,c;return a=new I({props:{code:"aWRzJTIwJTNEJTIwZHMudG9faXRlcmFibGVfZGF0YXNldChudW1fc2hhcmRzJTNENjQpJTBBaWRzJTIwJTNEJTIwaWRzLnNodWZmbGUoYnVmZmVyX3NpemUlM0QxMF8wMDAlMkMlMjBzZWVkJTNENDIpJTIwJTIwJTIzJTIwd2lsbCUyMHNodWZmbGUlMjB0aGUlMjBzaGFyZHMlMjBvcmRlciUyMGFuZCUyMHVzZSUyMGElMjBzaHVmZmxlJTIwYnVmZmVyJTIwd2hlbiUyMHlvdSUyMHN0YXJ0JTIwaXRlcmF0aW5nJTBBZm9yJTIwZXBvY2glMjBpbiUyMHJhbmdlKG5fZXBvY2hzKSUzQSUwQSUyMCUyMCUyMCUyMGlkcy5zZXRfZXBvY2goZXBvY2gpJTIwJTIwJTIzJTIwd2lsbCUyMHVzZSUyMGVmZmVjdGl2ZV9zZWVkJTIwJTNEJTIwc2VlZCUyMCUyQiUyMGVwb2NoJTIwdG8lMjBzaHVmZmxlJTIwdGhlJTIwc2hhcmRzJTIwYW5kJTIwZm9yJTIwdGhlJTIwc2h1ZmZsZSUyMGJ1ZmZlciUyMHdoZW4lMjB5b3UlMjBzdGFydCUyMGl0ZXJhdGluZyUwQSUyMCUyMCUyMCUyMGZvciUyMGV4YW1wbGUlMjBpbiUyMGlkcyUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHBhc3M=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ds.to_iterable_dataset(num_shards=<span class="hljs-number">64</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ids = ids.shuffle(buffer_size=<span class="hljs-number">10_000</span>, seed=<span class="hljs-number">42</span>)  <span class="hljs-comment"># will shuffle the shards order and use a shuffle buffer when you start iterating</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_epochs):
<span class="hljs-meta">... </span>    ids.set_epoch(epoch)  <span class="hljs-comment"># will use effective_seed = seed + epoch to shuffle the shards and for the shuffle buffer when you start iterating</span>
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> ids:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">pass</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-1ul2v9x"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function gN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMlMjAlM0QlMjBkYXRhc2V0cy5sb2FkX2RhdGFzZXQoJ2NyaW1lX2FuZF9wdW5pc2gnJTJDJTIwc3BsaXQlM0QndHJhaW4nKSUwQWRzX3dpdGhfZW1iZWRkaW5ncyUyMCUzRCUyMGRzLm1hcChsYW1iZGElMjBleGFtcGxlJTNBJTIwJTdCJ2VtYmVkZGluZ3MnJTNBJTIwZW1iZWQoZXhhbXBsZSU1QidsaW5lJyU1RCU3RCkpJTBBZHNfd2l0aF9lbWJlZGRpbmdzLmFkZF9mYWlzc19pbmRleChjb2x1bW4lM0QnZW1iZWRkaW5ncycpJTBBJTIzJTIwcXVlcnklMEFzY29yZXMlMkMlMjByZXRyaWV2ZWRfZXhhbXBsZXMlMjAlM0QlMjBkc193aXRoX2VtYmVkZGluZ3MuZ2V0X25lYXJlc3RfZXhhbXBsZXMoJ2VtYmVkZGluZ3MnJTJDJTIwZW1iZWQoJ215JTIwbmV3JTIwcXVlcnknKSUyQyUyMGslM0QxMCklMEElMjMlMjBzYXZlJTIwaW5kZXglMEFkc193aXRoX2VtYmVkZGluZ3Muc2F2ZV9mYWlzc19pbmRleCgnZW1iZWRkaW5ncyclMkMlMjAnbXlfaW5kZXguZmFpc3MnKSUwQSUwQWRzJTIwJTNEJTIwZGF0YXNldHMubG9hZF9kYXRhc2V0KCdjcmltZV9hbmRfcHVuaXNoJyUyQyUyMHNwbGl0JTNEJ3RyYWluJyklMEElMjMlMjBsb2FkJTIwaW5kZXglMEFkcy5sb2FkX2ZhaXNzX2luZGV4KCdlbWJlZGRpbmdzJyUyQyUyMCdteV9pbmRleC5mYWlzcycpJTBBJTIzJTIwcXVlcnklMEFzY29yZXMlMkMlMjByZXRyaWV2ZWRfZXhhbXBsZXMlMjAlM0QlMjBkcy5nZXRfbmVhcmVzdF9leGFtcGxlcygnZW1iZWRkaW5ncyclMkMlMjBlbWJlZCgnbXklMjBuZXclMjBxdWVyeScpJTJDJTIwayUzRDEwKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function fN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZXNfY2xpZW50JTIwJTNEJTIwZWxhc3RpY3NlYXJjaC5FbGFzdGljc2VhcmNoKCklMEFkcyUyMCUzRCUyMGRhdGFzZXRzLmxvYWRfZGF0YXNldCgnY3JpbWVfYW5kX3B1bmlzaCclMkMlMjBzcGxpdCUzRCd0cmFpbicpJTBBZHMuYWRkX2VsYXN0aWNzZWFyY2hfaW5kZXgoY29sdW1uJTNEJ2xpbmUnJTJDJTIwZXNfY2xpZW50JTNEZXNfY2xpZW50JTJDJTIwZXNfaW5kZXhfbmFtZSUzRCUyMm15X2VzX2luZGV4JTIyKSUwQXNjb3JlcyUyQyUyMHJldHJpZXZlZF9leGFtcGxlcyUyMCUzRCUyMGRzLmdldF9uZWFyZXN0X2V4YW1wbGVzKCdsaW5lJyUyQyUyMCdteSUyMG5ldyUyMHF1ZXJ5JyUyQyUyMGslM0QxMCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function bN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fY3N2KCdwYXRoJTJGdG8lMkZkYXRhc2V0LmNzdicp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_csv(<span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>)',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function _N(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fanNvbigncGF0aCUyRnRvJTJGZGF0YXNldC5qc29uJyk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_json(<span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>)',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function xN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fcGFycXVldCgncGF0aCUyRnRvJTJGZGF0YXNldC5wYXJxdWV0Jyk=",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_parquet(<span class="hljs-string">&#x27;path/to/dataset.parquet&#x27;</span>)',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function yN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fdGV4dCgncGF0aCUyRnRvJTJGZGF0YXNldC50eHQnKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_text(<span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>)',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function jN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"JTIzJTIwRmV0Y2glMjBhJTIwZGF0YWJhc2UlMjB0YWJsZSUwQWRzJTIwJTNEJTIwRGF0YXNldC5mcm9tX3NxbCglMjJ0ZXN0X2RhdGElMjIlMkMlMjAlMjJwb3N0Z3JlcyUzQSUyRiUyRiUyRmRiX25hbWUlMjIpJTBBJTIzJTIwRXhlY3V0ZSUyMGElMjBTUUwlMjBxdWVyeSUyMG9uJTIwdGhlJTIwdGFibGUlMEFkcyUyMCUzRCUyMERhdGFzZXQuZnJvbV9zcWwoJTIyU0VMRUNUJTIwc2VudGVuY2UlMjBGUk9NJTIwdGVzdF9kYXRhJTIyJTJDJTIwJTIycG9zdGdyZXMlM0ElMkYlMkYlMkZkYl9uYW1lJTIyKSUwQSUyMyUyMFVzZSUyMGElMjBTZWxlY3RhYmxlJTIwb2JqZWN0JTIwdG8lMjBzcGVjaWZ5JTIwdGhlJTIwcXVlcnklMEFmcm9tJTIwc3FsYWxjaGVteSUyMGltcG9ydCUyMHNlbGVjdCUyQyUyMHRleHQlMEFzdG10JTIwJTNEJTIwc2VsZWN0KCU1QnRleHQoJTIyc2VudGVuY2UlMjIpJTVEKS5zZWxlY3RfZnJvbSh0ZXh0KCUyMnRlc3RfZGF0YSUyMikpJTBBZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fc3FsKHN0bXQlMkMlMjAlMjJwb3N0Z3JlcyUzQSUyRiUyRiUyRmRiX25hbWUlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Fetch a database table</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_sql(<span class="hljs-string">&quot;test_data&quot;</span>, <span class="hljs-string">&quot;postgres:///db_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Execute a SQL query on the table</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_sql(<span class="hljs-string">&quot;SELECT sentence FROM test_data&quot;</span>, <span class="hljs-string">&quot;postgres:///db_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Use a Selectable object to specify the query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> select, text
<span class="hljs-meta">&gt;&gt;&gt; </span>stmt = select([text(<span class="hljs-string">&quot;sentence&quot;</span>)]).select_from(text(<span class="hljs-string">&quot;test_data&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_sql(stmt, <span class="hljs-string">&quot;postgres:///db_name&quot;</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function $N(v){let t,y="The returned dataset can only be cached if <code>con</code> is specified as URI string.";return{c(){t=p("p"),t.innerHTML=y},l(o){t=d(o,"P",{"data-svelte-h":!0}),x(t)!=="svelte-1iojgz0"&&(t.innerHTML=y)},m(o,a){$(o,t,a)},p:D,d(o){o&&i(t)}}}function vN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"JTIzJTIwZGF0YXNldCUyMHdpdGglMjBtYXBwaW5nJTIwJTdCJ2VudGFpbG1lbnQnJTNBJTIwMCUyQyUyMCduZXV0cmFsJyUzQSUyMDElMkMlMjAnY29udHJhZGljdGlvbiclM0ElMjAyJTdEJTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIybnl1LW1sbCUyRmdsdWUlMjIlMkMlMjAlMjJtbmxpJTIyJTJDJTIwc3BsaXQlM0QlMjJ0cmFpbiUyMiklMEElMjMlMjBtYXBwaW5nJTIwdG8lMjBhbGlnbiUyMHdpdGglMEFsYWJlbDJpZCUyMCUzRCUyMCU3QidDT05UUkFESUNUSU9OJyUzQSUyMDAlMkMlMjAnTkVVVFJBTCclM0ElMjAxJTJDJTIwJ0VOVEFJTE1FTlQnJTNBJTIwMiU3RCUwQWRzX2FsaWduZWQlMjAlM0QlMjBkcy5hbGlnbl9sYWJlbHNfd2l0aF9tYXBwaW5nKGxhYmVsMmlkJTJDJTIwJTIybGFiZWwlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;nyu-mll/glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function wN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMzJTIwJTNEJTIwY29uY2F0ZW5hdGVfZGF0YXNldHMoJTVCZHMxJTJDJTIwZHMyJTVEKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds3 = concatenate_datasets([ds1, ds2])',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function MN(v){let t,y="For regular datasets (map-style):",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMGludGVybGVhdmVfZGF0YXNldHMlMEFkMSUyMCUzRCUyMERhdGFzZXQuZnJvbV9kaWN0KCU3QiUyMmElMjIlM0ElMjAlNUIwJTJDJTIwMSUyQyUyMDIlNUQlN0QpJTBBZDIlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJhJTIyJTNBJTIwJTVCMTAlMkMlMjAxMSUyQyUyMDEyJTVEJTdEKSUwQWQzJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIyYSUyMiUzQSUyMCU1QjIwJTJDJTIwMjElMkMlMjAyMiU1RCU3RCklMEFkYXRhc2V0JTIwJTNEJTIwaW50ZXJsZWF2ZV9kYXRhc2V0cyglNUJkMSUyQyUyMGQyJTJDJTIwZDMlNUQlMkMlMjBwcm9iYWJpbGl0aWVzJTNEJTVCMC43JTJDJTIwMC4yJTJDJTIwMC4xJTVEJTJDJTIwc2VlZCUzRDQyJTJDJTIwc3RvcHBpbmdfc3RyYXRlZ3klM0QlMjJhbGxfZXhoYXVzdGVkJTIyKSUwQWRhdGFzZXQlNUIlMjJhJTIyJTVEJTBBZGF0YXNldCUyMCUzRCUyMGludGVybGVhdmVfZGF0YXNldHMoJTVCZDElMkMlMjBkMiUyQyUyMGQzJTVEJTJDJTIwcHJvYmFiaWxpdGllcyUzRCU1QjAuNyUyQyUyMDAuMiUyQyUyMDAuMSU1RCUyQyUyMHNlZWQlM0Q0MiklMEFkYXRhc2V0JTVCJTIyYSUyMiU1RCUwQWRhdGFzZXQlMjAlM0QlMjBpbnRlcmxlYXZlX2RhdGFzZXRzKCU1QmQxJTJDJTIwZDIlMkMlMjBkMyU1RCklMEFkYXRhc2V0JTVCJTIyYSUyMiU1RCUwQWRhdGFzZXQlMjAlM0QlMjBpbnRlcmxlYXZlX2RhdGFzZXRzKCU1QmQxJTJDJTIwZDIlMkMlMjBkMyU1RCUyQyUyMHN0b3BwaW5nX3N0cmF0ZWd5JTNEJTIyYWxsX2V4aGF1c3RlZCUyMiklMEFkYXRhc2V0JTVCJTIyYSUyMiU1RCUwQWQxJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIyYSUyMiUzQSUyMCU1QjAlMkMlMjAxJTJDJTIwMiU1RCU3RCklMEFkMiUyMCUzRCUyMERhdGFzZXQuZnJvbV9kaWN0KCU3QiUyMmElMjIlM0ElMjAlNUIxMCUyQyUyMDExJTJDJTIwMTIlMkMlMjAxMyU1RCU3RCklMEFkMyUyMCUzRCUyMERhdGFzZXQuZnJvbV9kaWN0KCU3QiUyMmElMjIlM0ElMjAlNUIyMCUyQyUyMDIxJTJDJTIwMjIlMkMlMjAyMyUyQyUyMDI0JTVEJTdEKSUwQWRhdGFzZXQlMjAlM0QlMjBpbnRlcmxlYXZlX2RhdGFzZXRzKCU1QmQxJTJDJTIwZDIlMkMlMjBkMyU1RCklMEFkYXRhc2V0JTVCJTIyYSUyMiU1RCUwQWRhdGFzZXQlMjAlM0QlMjBpbnRlcmxlYXZlX2RhdGFzZXRzKCU1QmQxJTJDJTIwZDIlMkMlMjBkMyU1RCUyQyUyMHN0b3BwaW5nX3N0cmF0ZWd5JTNEJTIyYWxsX2V4aGF1c3RlZCUyMiklMEFkYXRhc2V0JTVCJTIyYSUyMiU1RCUwQWRhdGFzZXQlMjAlM0QlMjBpbnRlcmxlYXZlX2RhdGFzZXRzKCU1QmQxJTJDJTIwZDIlMkMlMjBkMyU1RCUyQyUyMHByb2JhYmlsaXRpZXMlM0QlNUIwLjclMkMlMjAwLjIlMkMlMjAwLjElNUQlMkMlMjBzZWVkJTNENDIpJTBBZGF0YXNldCU1QiUyMmElMjIlNUQlMEFkYXRhc2V0JTIwJTNEJTIwaW50ZXJsZWF2ZV9kYXRhc2V0cyglNUJkMSUyQyUyMGQyJTJDJTIwZDMlNUQlMkMlMjBwcm9iYWJpbGl0aWVzJTNEJTVCMC43JTJDJTIwMC4yJTJDJTIwMC4xJTVEJTJDJTIwc2VlZCUzRDQyJTJDJTIwc3RvcHBpbmdfc3RyYXRlZ3klM0QlMjJhbGxfZXhoYXVzdGVkJTIyKSUwQWRhdGFzZXQlNUIlMjJhJTIyJTVEJTBBJTBBZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwaW50ZXJsZWF2ZV9kYXRhc2V0cyUwQWQxJTIwJTNEJTIwbG9hZF9kYXRhc2V0KCdhbGxlbmFpJTJGYzQnJTJDJTIwJ2VzJyUyQyUyMHNwbGl0JTNEJ3RyYWluJyUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBZDIlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJ2FsbGVuYWklMkZjNCclMkMlMjAnZnInJTJDJTIwc3BsaXQlM0QndHJhaW4nJTJDJTIwc3RyZWFtaW5nJTNEVHJ1ZSklMEFkYXRhc2V0JTIwJTNEJTIwaW50ZXJsZWF2ZV9kYXRhc2V0cyglNUJkMSUyQyUyMGQyJTVEKSUwQWl0ZXJhdG9yJTIwJTNEJTIwaXRlcihkYXRhc2V0KSUwQW5leHQoaXRlcmF0b3IpJTBBbmV4dChpdGVyYXRvcik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>, stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">23</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">24</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>, stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, ..., <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>]
For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&#x27;allenai/c4&#x27;</span>, <span class="hljs-string">&#x27;es&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&#x27;allenai/c4&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Comprar Zapatillas para niña en chancla con goma por...&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Le sacre de philippe ier, 23 mai 1059 - Compte Rendu...&#x27;</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-1as9ud5"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function kN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy5kYXRh",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function JN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy5jYWNoZV9maWxlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
{<span class="hljs-string">&#x27;test&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-test.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;train&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-train.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function TN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy5udW1fY29sdW1ucw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">2</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function DN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy5udW1fcm93cw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">1066</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">8530</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">1066</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function CN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy5jb2x1bW5fbmFtZXM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function IN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy5zaGFwZQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
{<span class="hljs-string">&#x27;test&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;train&#x27;</span>: (<span class="hljs-number">8530</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;validation&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function UN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy51bmlxdWUoJTIybGFiZWwlMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&quot;label&quot;</span>)
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function ZN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy5jbGVhbnVwX2NhY2hlX2ZpbGVzKCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">0</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function RN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkZWYlMjBhZGRfcHJlZml4KGV4YW1wbGUpJTNBJTBBJTIwJTIwJTIwJTIwZXhhbXBsZSU1QiUyMnRleHQlMjIlNUQlMjAlM0QlMjAlMjJSZXZpZXclM0ElMjAlMjIlMjAlMkIlMjBleGFtcGxlJTVCJTIydGV4dCUyMiU1RCUwQSUyMCUyMCUyMCUyMHJldHVybiUyMGV4YW1wbGUlMEFkcyUyMCUzRCUyMGRzLm1hcChhZGRfcHJlZml4KSUwQWRzJTVCJTIydHJhaW4lMjIlNUQlNUIwJTNBMyU1RCU1QiUyMnRleHQlMjIlNUQlMEElMEFkcyUyMCUzRCUyMGRzLm1hcChsYW1iZGElMjBleGFtcGxlJTNBJTIwdG9rZW5pemVyKGV4YW1wbGUlNUIlMjJ0ZXh0JTIyJTVEKSUyQyUyMGJhdGNoZWQlM0RUcnVlKSUwQWRzJTIwJTNEJTIwZHMubWFwKGFkZF9wcmVmaXglMkMlMjBudW1fcHJvYyUzRDQp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function FN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy5maWx0ZXIobGFtYmRhJTIweCUzQSUyMHglNUIlMjJsYWJlbCUyMiU1RCUyMCUzRCUzRCUyMDEp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">4265</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function GN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJ2Nvcm5lbGwtbW92aWUtcmV2aWV3LWRhdGElMkZyb3R0ZW5fdG9tYXRvZXMnKSUwQWRzJTVCJ3RyYWluJyU1RCU1QidsYWJlbCclNUQlNUIlM0ExMCU1RCUwQXNvcnRlZF9kcyUyMCUzRCUyMGRzLnNvcnQoJ2xhYmVsJyklMEFzb3J0ZWRfZHMlNUIndHJhaW4nJTVEJTVCJ2xhYmVsJyU1RCU1QiUzQTEwJTVEJTBBYW5vdGhlcl9zb3J0ZWRfZHMlMjAlM0QlMjBkcy5zb3J0KCU1QidsYWJlbCclMkMlMjAndGV4dCclNUQlMkMlMjByZXZlcnNlJTNEJTVCVHJ1ZSUyQyUyMEZhbHNlJTVEKSUwQWFub3RoZXJfc29ydGVkX2RzJTVCJ3RyYWluJyU1RCU1QidsYWJlbCclNUQlNUIlM0ExMCU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&#x27;cornell-movie-review-data/rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;train&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&#x27;train&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>another_sorted_ds = ds.sort([<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>], reverse=[<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>another_sorted_ds[<span class="hljs-string">&#x27;train&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function NN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcyU1QiUyMnRyYWluJTIyJTVEJTVCJTIybGFiZWwlMjIlNUQlNUIlM0ExMCU1RCUwQSUwQXNodWZmbGVkX2RzJTIwJTNEJTIwZHMuc2h1ZmZsZShzZWVkJTNENDIpJTBBc2h1ZmZsZWRfZHMlNUIlMjJ0cmFpbiUyMiU1RCU1QiUyMmxhYmVsJTIyJTVEJTVCJTNBMTAlNUQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function zN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJiZXJ0LWJhc2UtY2FzZWQlMjIpJTBBZHMlMjAlM0QlMjBkcy5tYXAobGFtYmRhJTIweCUzQSUyMHRva2VuaXplcih4JTVCJTIydGV4dCUyMiU1RCUyQyUyMHRydW5jYXRpb24lM0RUcnVlJTJDJTIwcGFkZGluZyUzRFRydWUpJTJDJTIwYmF0Y2hlZCUzRFRydWUpJTBBZHMuc2V0X2Zvcm1hdCh0eXBlJTNEJTIybnVtcHklMjIlMkMlMjBjb2x1bW5zJTNEJTVCJ2lucHV0X2lkcyclMkMlMjAndG9rZW5fdHlwZV9pZHMnJTJDJTIwJ2F0dGVudGlvbl9tYXNrJyUyQyUyMCdsYWJlbCclNUQpJTBBZHMlNUIlMjJ0cmFpbiUyMiU1RC5mb3JtYXQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function XN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjb3JuZWxsLW1vdmllLXJldmlldy1kYXRhJTJGcm90dGVuX3RvbWF0b2VzJTIyKSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMmJlcnQtYmFzZS1jYXNlZCUyMiklMEFkcyUyMCUzRCUyMGRzLm1hcChsYW1iZGElMjB4JTNBJTIwdG9rZW5pemVyKHglNUIlMjJ0ZXh0JTIyJTVEJTJDJTIwdHJ1bmNhdGlvbiUzRFRydWUlMkMlMjBwYWRkaW5nJTNEVHJ1ZSklMkMlMjBiYXRjaGVkJTNEVHJ1ZSklMEFkcy5zZXRfZm9ybWF0KHR5cGUlM0QlMjJudW1weSUyMiUyQyUyMGNvbHVtbnMlM0QlNUInaW5wdXRfaWRzJyUyQyUyMCd0b2tlbl90eXBlX2lkcyclMkMlMjAnYXR0ZW50aW9uX21hc2snJTJDJTIwJ2xhYmVsJyU1RCklMEFkcyU1QiUyMnRyYWluJTIyJTVELmZvcm1hdCUwQWRzLnJlc2V0X2Zvcm1hdCgpJTBBZHMlNUIlMjJ0cmFpbiUyMiU1RC5mb3JtYXQ=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function VN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjb3JuZWxsLW1vdmllLXJldmlldy1kYXRhJTJGcm90dGVuX3RvbWF0b2VzJTIyKSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMmJlcnQtYmFzZS1jYXNlZCUyMiklMEFkcyUyMCUzRCUyMGRzLm1hcChsYW1iZGElMjB4JTNBJTIwdG9rZW5pemVyKHglNUIndGV4dCclNUQlMkMlMjB0cnVuY2F0aW9uJTNEVHJ1ZSUyQyUyMHBhZGRpbmclM0RUcnVlKSUyQyUyMGJhdGNoZWQlM0RUcnVlKSUwQWRzJTVCJTIydHJhaW4lMjIlNUQuZm9ybWF0JTBBZHMlMjAlM0QlMjBkcy53aXRoX2Zvcm1hdCglMjJ0b3JjaCUyMiklMEFkcyU1QiUyMnRyYWluJTIyJTVELmZvcm1hdCUwQWRzJTVCJTIydHJhaW4lMjIlNUQlNUIwJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;torch&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;label&#x27;</span>: tensor(<span class="hljs-number">1</span>),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
        <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
        <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]),
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
        <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function qN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjb3JuZWxsLW1vdmllLXJldmlldy1kYXRhJTJGcm90dGVuX3RvbWF0b2VzJTIyKSUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKCUyMmJlcnQtYmFzZS1jYXNlZCUyMiklMEFkZWYlMjBlbmNvZGUoZXhhbXBsZSklM0ElMEElMjAlMjAlMjAlMjByZXR1cm4lMjB0b2tlbml6ZXIoZXhhbXBsZSU1Qid0ZXh0JyU1RCUyQyUyMHRydW5jYXRpb24lM0RUcnVlJTJDJTIwcGFkZGluZyUzRFRydWUlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnB0JTIyKSUwQWRzJTIwJTNEJTIwZHMud2l0aF90cmFuc2Zvcm0oZW5jb2RlKSUwQWRzJTVCJTIydHJhaW4lMjIlNUQlNUIwJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">2067</span>,  <span class="hljs-number">1110</span>, <span class="hljs-number">17348</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1129</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">6880</span>,  <span class="hljs-number">1432</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1207</span>,   <span class="hljs-number">107</span>, <span class="hljs-number">14255</span>,  <span class="hljs-number">1389</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1105</span>,  <span class="hljs-number">1115</span>,  <span class="hljs-number">1119</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1280</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1294</span>,   <span class="hljs-number">170</span>, <span class="hljs-number">24194</span>,  <span class="hljs-number">1256</span>,  <span class="hljs-number">3407</span>,  <span class="hljs-number">1190</span>,
        <span class="hljs-number">170</span>, <span class="hljs-number">11791</span>,  <span class="hljs-number">5253</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1732</span>,  <span class="hljs-number">7200</span>, <span class="hljs-number">10947</span>, <span class="hljs-number">12606</span>,  <span class="hljs-number">2895</span>,   <span class="hljs-number">117</span>,
        <span class="hljs-number">179</span>,  <span class="hljs-number">7766</span>,   <span class="hljs-number">118</span>,   <span class="hljs-number">172</span>, <span class="hljs-number">15554</span>,  <span class="hljs-number">1181</span>,  <span class="hljs-number">3498</span>,  <span class="hljs-number">6961</span>,  <span class="hljs-number">3263</span>,  <span class="hljs-number">1137</span>,
        <span class="hljs-number">188</span>,  <span class="hljs-number">1566</span>,  <span class="hljs-number">7912</span>, <span class="hljs-number">14516</span>,  <span class="hljs-number">6997</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function BN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIycmFqcHVya2FyJTJGc3F1YWQlMjIpJTBBZHMlNUIlMjJ0cmFpbiUyMiU1RC5mZWF0dXJlcyUwQWRzLmZsYXR0ZW4oKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rajpurkar/squad&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function WN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwQ2xhc3NMYWJlbCUyQyUyMFZhbHVlJTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcyU1QiUyMnRyYWluJTIyJTVELmZlYXR1cmVzJTBBbmV3X2ZlYXR1cmVzJTIwJTNEJTIwZHMlNUIlMjJ0cmFpbiUyMiU1RC5mZWF0dXJlcy5jb3B5KCklMEFuZXdfZmVhdHVyZXMlNUInbGFiZWwnJTVEJTIwJTNEJTIwQ2xhc3NMYWJlbChuYW1lcyUzRCU1QidiYWQnJTJDJTIwJ2dvb2QnJTVEKSUwQW5ld19mZWF0dXJlcyU1Qid0ZXh0JyU1RCUyMCUzRCUyMFZhbHVlKCdsYXJnZV9zdHJpbmcnKSUwQWRzJTIwJTNEJTIwZHMuY2FzdChuZXdfZmVhdHVyZXMpJTBBZHMlNUIlMjJ0cmFpbiUyMiU1RC5mZWF0dXJlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function HN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwQ2xhc3NMYWJlbCUwQWRzJTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMmNvcm5lbGwtbW92aWUtcmV2aWV3LWRhdGElMkZyb3R0ZW5fdG9tYXRvZXMlMjIpJTBBZHMlNUIlMjJ0cmFpbiUyMiU1RC5mZWF0dXJlcyUwQWRzJTIwJTNEJTIwZHMuY2FzdF9jb2x1bW4oJ2xhYmVsJyUyQyUyMENsYXNzTGFiZWwobmFtZXMlM0QlNUInYmFkJyUyQyUyMCdnb29kJyU1RCkpJTBBZHMlNUIlMjJ0cmFpbiUyMiU1RC5mZWF0dXJlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function EN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcyUyMCUzRCUyMGRzLnJlbW92ZV9jb2x1bW5zKCUyMmxhYmVsJTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function QN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcyUyMCUzRCUyMGRzLnJlbmFtZV9jb2x1bW4oJTIybGFiZWwlMjIlMkMlMjAlMjJsYWJlbF9uZXclMjIp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;label_new&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function YN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy5yZW5hbWVfY29sdW1ucyglN0IndGV4dCclM0ElMjAndGV4dF9uZXcnJTJDJTIwJ2xhYmVsJyUzQSUyMCdsYWJlbF9uZXcnJTdEKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function LN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiklMEFkcy5zZWxlY3RfY29sdW1ucyglMjJ0ZXh0JTIyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select_columns(<span class="hljs-string">&quot;text&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function SN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyYm9vbHElMjIpJTBBZHMlNUIlMjJ0cmFpbiUyMiU1RC5mZWF0dXJlcyUwQWRzJTIwJTNEJTIwZHMuY2xhc3NfZW5jb2RlX2NvbHVtbiglMjJhbnN3ZXIlMjIpJTBBZHMlNUIlMjJ0cmFpbiUyMiU1RC5mZWF0dXJlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&quot;answer&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function AN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZGF0YXNldF9kaWN0LnB1c2hfdG9faHViKCUyMiUzQ29yZ2FuaXphdGlvbiUzRSUyRiUzQ2RhdGFzZXRfaWQlM0UlMjIpJTBBZGF0YXNldF9kaWN0LnB1c2hfdG9faHViKCUyMiUzQ29yZ2FuaXphdGlvbiUzRSUyRiUzQ2RhdGFzZXRfaWQlM0UlMjIlMkMlMjBwcml2YXRlJTNEVHJ1ZSklMEFkYXRhc2V0X2RpY3QucHVzaF90b19odWIoJTIyJTNDb3JnYW5pemF0aW9uJTNFJTJGJTNDZGF0YXNldF9pZCUzRSUyMiUyQyUyMG1heF9zaGFyZF9zaXplJTNEJTIyMUdCJTIyKSUwQWRhdGFzZXRfZGljdC5wdXNoX3RvX2h1YiglMjIlM0Nvcmdhbml6YXRpb24lM0UlMkYlM0NkYXRhc2V0X2lkJTNFJTIyJTJDJTIwbnVtX3NoYXJkcyUzRCU3QiUyMnRyYWluJTIyJTNBJTIwMTAyNCUyQyUyMCUyMnRlc3QlMjIlM0ElMjA4JTdEKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, private=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, max_shard_size=<span class="hljs-string">&quot;1GB&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, num_shards={<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-number">1024</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-number">8</span>})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function PN(v){let t,y="If you want to add a new configuration (or subset) to a dataset (e.g. if the dataset has multiple tasks/versions/languages):",o,a,c;return a=new I({props:{code:"ZW5nbGlzaF9kYXRhc2V0LnB1c2hfdG9faHViKCUyMiUzQ29yZ2FuaXphdGlvbiUzRSUyRiUzQ2RhdGFzZXRfaWQlM0UlMjIlMkMlMjAlMjJlbiUyMiklMEFmcmVuY2hfZGF0YXNldC5wdXNoX3RvX2h1YiglMjIlM0Nvcmdhbml6YXRpb24lM0UlMkYlM0NkYXRhc2V0X2lkJTNFJTIyJTJDJTIwJTIyZnIlMjIpJTBBJTIzJTIwbGF0ZXIlMEFlbmdsaXNoX2RhdGFzZXQlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyJTNDb3JnYW5pemF0aW9uJTNFJTJGJTNDZGF0YXNldF9pZCUzRSUyMiUyQyUyMCUyMmVuJTIyKSUwQWZyZW5jaF9kYXRhc2V0JTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMiUzQ29yZ2FuaXphdGlvbiUzRSUyRiUzQ2RhdGFzZXRfaWQlM0UlMjIlMkMlMjAlMjJmciUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>english_dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, <span class="hljs-string">&quot;en&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>french_dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, <span class="hljs-string">&quot;fr&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># later</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>english_dataset = load_dataset(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, <span class="hljs-string">&quot;en&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>french_dataset = load_dataset(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, <span class="hljs-string">&quot;fr&quot;</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-1l9vuim"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function KN(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZGF0YXNldF9kaWN0LnNhdmVfdG9fZGlzayglMjJwYXRoJTJGdG8lMkZkYXRhc2V0JTJGZGlyZWN0b3J5JTIyKSUwQWRhdGFzZXRfZGljdC5zYXZlX3RvX2Rpc2soJTIycGF0aCUyRnRvJTJGZGF0YXNldCUyRmRpcmVjdG9yeSUyMiUyQyUyMG1heF9zaGFyZF9zaXplJTNEJTIyMUdCJTIyKSUwQWRhdGFzZXRfZGljdC5zYXZlX3RvX2Rpc2soJTIycGF0aCUyRnRvJTJGZGF0YXNldCUyRmRpcmVjdG9yeSUyMiUyQyUyMG51bV9zaGFyZHMlM0QlN0IlMjJ0cmFpbiUyMiUzQSUyMDEwMjQlMkMlMjAlMjJ0ZXN0JTIyJTNBJTIwOCU3RCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>, max_shard_size=<span class="hljs-string">&quot;1GB&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>, num_shards={<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-number">1024</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-number">8</span>})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function ON(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMlMjAlM0QlMjBsb2FkX2Zyb21fZGlzaygncGF0aCUyRnRvJTJGZGF0YXNldCUyRmRpcmVjdG9yeScp",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)',wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function e9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldERpY3QlMEFkcyUyMCUzRCUyMERhdGFzZXREaWN0LmZyb21fY3N2KCU3Qid0cmFpbiclM0ElMjAncGF0aCUyRnRvJTJGZGF0YXNldC5jc3YnJTdEKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_csv({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function t9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldERpY3QlMEFkcyUyMCUzRCUyMERhdGFzZXREaWN0LmZyb21fanNvbiglN0IndHJhaW4nJTNBJTIwJ3BhdGglMkZ0byUyRmRhdGFzZXQuanNvbiclN0Qp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_json({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function s9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldERpY3QlMEFkcyUyMCUzRCUyMERhdGFzZXREaWN0LmZyb21fcGFycXVldCglN0IndHJhaW4nJTNBJTIwJ3BhdGglMkZ0byUyRmRhdGFzZXQlMkZwYXJxdWV0JyU3RCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_parquet({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset/parquet&#x27;</span>})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function a9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldERpY3QlMEFkcyUyMCUzRCUyMERhdGFzZXREaWN0LmZyb21fdGV4dCglN0IndHJhaW4nJTNBJTIwJ3BhdGglMkZ0byUyRmRhdGFzZXQudHh0JyU3RCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_text({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function n9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZGVmJTIwZ2VuKCklM0ElMEElMjAlMjAlMjAlMjB5aWVsZCUyMCU3QiUyMnRleHQlMjIlM0ElMjAlMjJHb29kJTIyJTJDJTIwJTIybGFiZWwlMjIlM0ElMjAwJTdEJTBBJTIwJTIwJTIwJTIweWllbGQlMjAlN0IlMjJ0ZXh0JTIyJTNBJTIwJTIyQmFkJTIyJTJDJTIwJTIybGFiZWwlMjIlM0ElMjAxJTdEJTBBZHMlMjAlM0QlMjBJdGVyYWJsZURhdGFzZXQuZnJvbV9nZW5lcmF0b3IoZ2VuKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Good&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Bad&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = IterableDataset.from_generator(gen)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function l9(v){let t,y;return t=new I({props:{code:"ZGVmJTIwZ2VuKHNoYXJkcyklM0ElMEElMjAlMjAlMjAlMjBmb3IlMjBzaGFyZCUyMGluJTIwc2hhcmRzJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwd2l0aCUyMG9wZW4oc2hhcmQpJTIwYXMlMjBmJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZm9yJTIwbGluZSUyMGluJTIwZiUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHlpZWxkJTIwJTdCJTIybGluZSUyMiUzQSUyMGxpbmUlN0QlMEFzaGFyZHMlMjAlM0QlMjAlNUJmJTIyZGF0YSU3QmklN0QudHh0JTIyJTIwZm9yJTIwaSUyMGluJTIwcmFuZ2UoMzIpJTVEJTBBZHMlMjAlM0QlMjBJdGVyYWJsZURhdGFzZXQuZnJvbV9nZW5lcmF0b3IoZ2VuJTJDJTIwZ2VuX2t3YXJncyUzRCU3QiUyMnNoYXJkcyUyMiUzQSUyMHNoYXJkcyU3RCklMEFkcyUyMCUzRCUyMGRzLnNodWZmbGUoc2VlZCUzRDQyJTJDJTIwYnVmZmVyX3NpemUlM0QxMF8wMDApJTIwJTIwJTIzJTIwc2h1ZmZsZXMlMjB0aGUlMjBzaGFyZHMlMjBvcmRlciUyMCUyQiUyMHVzZXMlMjBhJTIwc2h1ZmZsZSUyMGJ1ZmZlciUwQWZyb20lMjB0b3JjaC51dGlscy5kYXRhJTIwaW1wb3J0JTIwRGF0YUxvYWRlciUwQWRhdGFsb2FkZXIlMjAlM0QlMjBEYXRhTG9hZGVyKGRzLndpdGhfZm9ybWF0KCUyMnRvcmNoJTIyKSUyQyUyMG51bV93b3JrZXJzJTNENCklMjAlMjAlMjMlMjBnaXZlJTIwZWFjaCUyMHdvcmtlciUyMGElMjBzdWJzZXQlMjBvZiUyMDMyJTJGNCUzRDglMjBzaGFyZHM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">shards</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> shard <span class="hljs-keyword">in</span> shards:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(shard) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:
<span class="hljs-meta">... </span>                <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;line&quot;</span>: line}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>shards = [<span class="hljs-string">f&quot;data<span class="hljs-subst">{i}</span>.txt&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = IterableDataset.from_generator(gen, gen_kwargs={<span class="hljs-string">&quot;shards&quot;</span>: shards})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>, buffer_size=<span class="hljs-number">10_000</span>)  <span class="hljs-comment"># shuffles the shards order + uses a shuffle buffer</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = DataLoader(ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>), num_workers=<span class="hljs-number">4</span>)  <span class="hljs-comment"># give each worker a subset of 32/4=8 shards</span>`,wrap:!1}}),{c(){g(t.$$.fragment)},l(o){f(t.$$.fragment,o)},m(o,a){b(t,o,a),y=!0},p:D,i(o){y||(h(t.$$.fragment,o),y=!0)},o(o){u(t.$$.fragment,o),y=!1},d(o){_(t,o)}}}function r9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKSUwQW5leHQoaXRlcihkcykpJTBBZHMlMjAlM0QlMjBkcy5yZW1vdmVfY29sdW1ucyglMjJsYWJlbCUyMiklMEFuZXh0KGl0ZXIoZHMpKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function o9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKSUwQW5leHQoaXRlcihkcykpJTBBZHMlMjAlM0QlMjBkcy5zZWxlY3RfY29sdW1ucyglMjJ0ZXh0JTIyKSUwQW5leHQoaXRlcihkcykp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.select_columns(<span class="hljs-string">&quot;text&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function c9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwQXVkaW8lMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJQb2x5QUklMkZtaW5kczE0JTIyJTJDJTIwbmFtZSUzRCUyMmVuLVVTJTIyJTJDJTIwc3BsaXQlM0QlMjJ0cmFpbiUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBZHMuZmVhdHVyZXMlMEFkcyUyMCUzRCUyMGRzLmNhc3RfY29sdW1uKCUyMmF1ZGlvJTIyJTJDJTIwQXVkaW8oc2FtcGxpbmdfcmF0ZSUzRDE2MDAwKSklMEFkcy5mZWF0dXJlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">8000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function p9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwQ2xhc3NMYWJlbCUyQyUyMFZhbHVlJTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKSUwQWRzLmZlYXR1cmVzJTBBbmV3X2ZlYXR1cmVzJTIwJTNEJTIwZHMuZmVhdHVyZXMuY29weSgpJTBBbmV3X2ZlYXR1cmVzJTVCJTIybGFiZWwlMjIlNUQlMjAlM0QlMjBDbGFzc0xhYmVsKG5hbWVzJTNEJTVCJTIyYmFkJTIyJTJDJTIwJTIyZ29vZCUyMiU1RCklMEFuZXdfZmVhdHVyZXMlNUIlMjJ0ZXh0JTIyJTVEJTIwJTNEJTIwVmFsdWUoJTIybGFyZ2Vfc3RyaW5nJTIyKSUwQWRzJTIwJTNEJTIwZHMuY2FzdChuZXdfZmVhdHVyZXMpJTBBZHMuZmVhdHVyZXM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;bad&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;text&quot;</span>] = Value(<span class="hljs-string">&quot;large_string&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function d9(v){let t,y="Disable decoding:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyc3NoaDEyJTJGcGxhbmV0LXRleHR1cmVzJTIyJTJDJTIwc3BsaXQlM0QlMjJ0cmFpbiUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBbmV4dChpdGVyKGRzKSklMEFkcyUyMCUzRCUyMGRzLmRlY29kZShGYWxzZSklMEFkcy5mZWF0dXJlcyUwQW5leHQoaXRlcihkcykp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;sshh12/planet-textures&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;image&#x27;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGB size=2048x1024&gt;,
<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;A distant celestial object with an icy crust, displaying a light blue shade, covered with round pits and rugged terrains.&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.decode(<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;image&#x27;</span>: Image(mode=<span class="hljs-literal">None</span>, decode=<span class="hljs-literal">False</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{
  <span class="hljs-string">&#x27;image&#x27;</span>: {
    <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;hf://datasets/sshh12/planet-textures@69dc4cef7a5c4b2cfe387727ec8ea73d4bff7302/train/textures/0000.png&#x27;</span>,
    <span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>
  },
  <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;A distant celestial object with an icy crust, displaying a light blue shade, covered with round pits and rugged terrains.&#x27;</span>
}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-115ggyx"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function i9(v){let t,y="Speed up streaming with multithreading:",o,a,c;return a=new I({props:{code:"aW1wb3J0JTIwb3MlMEFmcm9tJTIwZGF0YXNldHMlMjBpbXBvcnQlMjBsb2FkX2RhdGFzZXQlMEFmcm9tJTIwdHFkbSUyMGltcG9ydCUyMHRxZG0lMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJzc2hoMTIlMkZwbGFuZXQtdGV4dHVyZXMlMjIlMkMlMjBzcGxpdCUzRCUyMnRyYWluJTIyJTJDJTIwc3RyZWFtaW5nJTNEVHJ1ZSklMEFudW1fdGhyZWFkcyUyMCUzRCUyMG1pbigzMiUyQyUyMChvcy5jcHVfY291bnQoKSUyMG9yJTIwMSklMjAlMkIlMjA0KSUwQWRzJTIwJTNEJTIwZHMuZGVjb2RlKG51bV90aHJlYWRzJTNEbnVtX3RocmVhZHMpJTBBZm9yJTIwXyUyMGluJTIwdHFkbShkcyklM0ElMjAlMjAlMjMlMjAyMCUyMHRpbWVzJTIwZmFzdGVyJTIwISUwQSUyMCUyMCUyMCUyMC4uLg==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;sshh12/planet-textures&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>num_threads = <span class="hljs-built_in">min</span>(<span class="hljs-number">32</span>, (os.cpu_count() <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>) + <span class="hljs-number">4</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.decode(num_threads=num_threads)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> tqdm(ds):  <span class="hljs-comment"># 20 times faster !</span>
<span class="hljs-meta">... </span>    ...`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-ybgh7n"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function m9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKSUwQWRlZiUyMGFkZF9wcmVmaXgoZXhhbXBsZSklM0ElMEElMjAlMjAlMjAlMjBleGFtcGxlJTVCJTIydGV4dCUyMiU1RCUyMCUzRCUyMCUyMlJldmlldyUzQSUyMCUyMiUyMCUyQiUyMGV4YW1wbGUlNUIlMjJ0ZXh0JTIyJTVEJTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwZXhhbXBsZSUwQWRzJTIwJTNEJTIwZHMubWFwKGFkZF9wcmVmaXgpJTBBbGlzdChkcy50YWtlKDMpKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function h9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKSUwQW5leHQoaXRlcihkcykpJTBBZHMlMjAlM0QlMjBkcy5yZW5hbWVfY29sdW1uKCUyMnRleHQlMjIlMkMlMjAlMjJtb3ZpZV9yZXZpZXclMjIpJTBBbmV4dChpdGVyKGRzKSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function u9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKSUwQWRzJTIwJTNEJTIwZHMuZmlsdGVyKGxhbWJkYSUyMHglM0ElMjB4JTVCJTIybGFiZWwlMjIlNUQlMjAlM0QlM0QlMjAwKSUwQWxpc3QoZHMudGFrZSgzKSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&quot;it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function g9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKSUwQWxpc3QoZHMudGFrZSgzKSklMEFzaHVmZmxlZF9kcyUyMCUzRCUyMGRzLnNodWZmbGUoc2VlZCUzRDQyKSUwQWxpc3Qoc2h1ZmZsZWRfZHMudGFrZSgzKSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(shuffled_ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function f9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyc29tZV9kYXRhc2V0JTIyJTJDJTIwc3RyZWFtaW5nJTNEVHJ1ZSklMEFiYXRjaGVkX2RzJTIwJTNEJTIwZHMuYmF0Y2goYmF0Y2hfc2l6ZSUzRDMyKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;some_dataset&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>batched_ds = ds.batch(batch_size=<span class="hljs-number">32</span>)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function b9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKSUwQWxpc3QoZHMudGFrZSgzKSklMEFkcyUyMCUzRCUyMGRzLnNraXAoMSklMEFsaXN0KGRzLnRha2UoMykp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.skip(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;if you sometimes like to go to the movies to have fun , wasabi is a good place to start .&#x27;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function _9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKSUwQXNtYWxsX2RzJTIwJTNEJTIwZHMudGFrZSgyKSUwQWxpc3Qoc21hbGxfZHMp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>small_ds = ds.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(small_ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function x9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyYW1hem9uX3BvbGFyaXR5JTIyJTJDJTIwc3BsaXQlM0QlMjJ0cmFpbiUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBZHMlMEFkcy5zaGFyZChudW1fc2hhcmRzJTNEMiUyQyUyMGluZGV4JTNEMCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;amazon_polarity&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>],
    num_shards: <span class="hljs-number">4</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>],
    num_shards: <span class="hljs-number">2</span>
})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function y9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBZHMlMjAlM0QlMjBkcy50YWtlKDIpLnJlcGVhdCgyKSUwQWxpc3QoZHMp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.take(<span class="hljs-number">2</span>).repeat(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function j9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMGNvbmNhdGVuYXRlX2RhdGFzZXRzJTBBZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJhJTIyJTNBJTIwcmFuZ2UoNiklN0QpLnRvX2l0ZXJhYmxlX2RhdGFzZXQobnVtX3NoYXJkcyUzRDMpJTBBZm9yJTIwaWR4JTJDJTIwZXhhbXBsZSUyMGluJTIwZW51bWVyYXRlKGRzKSUzQSUwQSUyMCUyMCUyMCUyMHByaW50KGV4YW1wbGUpJTBBJTIwJTIwJTIwJTIwaWYlMjBpZHglMjAlM0QlM0QlMjAyJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc3RhdGVfZGljdCUyMCUzRCUyMGRzLnN0YXRlX2RpY3QoKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHByaW50KCUyMmNoZWNrcG9pbnQlMjIpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwYnJlYWslMEFkcy5sb2FkX3N0YXRlX2RpY3Qoc3RhdGVfZGljdCklMEFwcmludChmJTIycmVzdGFydCUyMGZyb20lMjBjaGVja3BvaW50JTIyKSUwQWZvciUyMGV4YW1wbGUlMjBpbiUyMGRzJTNBJTBBJTIwJTIwJTIwJTIwcHJpbnQoZXhhbXBsZSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, concatenate_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>)}).to_iterable_dataset(num_shards=<span class="hljs-number">3</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> idx, example <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ds):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(example)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> idx == <span class="hljs-number">2</span>:
<span class="hljs-meta">... </span>        state_dict = ds.state_dict()
<span class="hljs-meta">... </span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;checkpoint&quot;</span>)
<span class="hljs-meta">... </span>        <span class="hljs-keyword">break</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_state_dict(state_dict)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;restart from checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> ds:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(example)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function $9(v){let t,y="which returns:",o,a,c;return a=new I({props:{code:"JTdCJ2EnJTNBJTIwMCU3RCUwQSU3QidhJyUzQSUyMDElN0QlMEElN0InYSclM0ElMjAyJTdEJTBBY2hlY2twb2ludCUwQXJlc3RhcnQlMjBmcm9tJTIwY2hlY2twb2ludCUwQSU3QidhJyUzQSUyMDMlN0QlMEElN0InYSclM0ElMjA0JTdEJTBBJTdCJ2EnJTNBJTIwNSU3RA==",highlighted:`{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">0</span>}
{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>}
{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-keyword">checkpoint</span>
<span class="hljs-keyword">restart</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">checkpoint</span>
{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>}
{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">4</span>}
{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">5</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-1pybjl4"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function v9(v){let t,y;return t=new I({props:{code:"ZnJvbSUyMHRvcmNoZGF0YS5zdGF0ZWZ1bF9kYXRhbG9hZGVyJTIwaW1wb3J0JTIwU3RhdGVmdWxEYXRhTG9hZGVyJTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyZGVlcG1pbmQlMkZjb2RlX2NvbnRlc3RzJTIyJTJDJTIwc3RyZWFtaW5nJTNEVHJ1ZSUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBZGF0YWxvYWRlciUyMCUzRCUyMFN0YXRlZnVsRGF0YUxvYWRlcihkcyUyQyUyMGJhdGNoX3NpemUlM0QzMiUyQyUyMG51bV93b3JrZXJzJTNENCklMEElMjMlMjBjaGVja3BvaW50JTBBc3RhdGVfZGljdCUyMCUzRCUyMGRhdGFsb2FkZXIuc3RhdGVfZGljdCgpJTIwJTIwJTIzJTIwdXNlcyUyMGRzLnN0YXRlX2RpY3QoKSUyMHVuZGVyJTIwdGhlJTIwaG9vZCUwQSUyMyUyMHJlc3VtZSUyMGZyb20lMjBjaGVja3BvaW50JTBBZGF0YWxvYWRlci5sb2FkX3N0YXRlX2RpY3Qoc3RhdGVfZGljdCklMjAlMjAlMjMlMjB1c2VzJTIwZHMubG9hZF9zdGF0ZV9kaWN0KCklMjB1bmRlciUyMHRoZSUyMGhvb2Q=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torchdata.stateful_dataloader <span class="hljs-keyword">import</span> StatefulDataLoader
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;deepmind/code_contests&quot;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = StatefulDataLoader(ds, batch_size=<span class="hljs-number">32</span>, num_workers=<span class="hljs-number">4</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># checkpoint</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>state_dict = dataloader.state_dict()  <span class="hljs-comment"># uses ds.state_dict() under the hood</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># resume from checkpoint</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader.load_state_dict(state_dict)  <span class="hljs-comment"># uses ds.load_state_dict() under the hood</span>`,wrap:!1}}),{c(){g(t.$$.fragment)},l(o){f(t.$$.fragment,o)},m(o,a){b(t,o,a),y=!0},p:D,i(o){y||(h(t.$$.fragment,o),y=!0)},o(o){u(t.$$.fragment,o),y=!1},d(o){_(t,o)}}}function w9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMGNvbmNhdGVuYXRlX2RhdGFzZXRzJTBBZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJhJTIyJTNBJTIwcmFuZ2UoNiklN0QpLnRvX2l0ZXJhYmxlX2RhdGFzZXQobnVtX3NoYXJkcyUzRDMpJTBBZm9yJTIwaWR4JTJDJTIwZXhhbXBsZSUyMGluJTIwZW51bWVyYXRlKGRzKSUzQSUwQSUyMCUyMCUyMCUyMHByaW50KGV4YW1wbGUpJTBBJTIwJTIwJTIwJTIwaWYlMjBpZHglMjAlM0QlM0QlMjAyJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc3RhdGVfZGljdCUyMCUzRCUyMGRzLnN0YXRlX2RpY3QoKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHByaW50KCUyMmNoZWNrcG9pbnQlMjIpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwYnJlYWslMEFkcy5sb2FkX3N0YXRlX2RpY3Qoc3RhdGVfZGljdCklMEFwcmludChmJTIycmVzdGFydCUyMGZyb20lMjBjaGVja3BvaW50JTIyKSUwQWZvciUyMGV4YW1wbGUlMjBpbiUyMGRzJTNBJTBBJTIwJTIwJTIwJTIwcHJpbnQoZXhhbXBsZSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, concatenate_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>)}).to_iterable_dataset(num_shards=<span class="hljs-number">3</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> idx, example <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(ds):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(example)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">if</span> idx == <span class="hljs-number">2</span>:
<span class="hljs-meta">... </span>        state_dict = ds.state_dict()
<span class="hljs-meta">... </span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;checkpoint&quot;</span>)
<span class="hljs-meta">... </span>        <span class="hljs-keyword">break</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_state_dict(state_dict)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;restart from checkpoint&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> ds:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(example)`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function M9(v){let t,y="which returns:",o,a,c;return a=new I({props:{code:"JTdCJ2EnJTNBJTIwMCU3RCUwQSU3QidhJyUzQSUyMDElN0QlMEElN0InYSclM0ElMjAyJTdEJTBBY2hlY2twb2ludCUwQXJlc3RhcnQlMjBmcm9tJTIwY2hlY2twb2ludCUwQSU3QidhJyUzQSUyMDMlN0QlMEElN0InYSclM0ElMjA0JTdEJTBBJTdCJ2EnJTNBJTIwNSU3RA==",highlighted:`{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">0</span>}
{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span>}
{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-keyword">checkpoint</span>
<span class="hljs-keyword">restart</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">checkpoint</span>
{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>}
{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">4</span>}
{<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">5</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-1pybjl4"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function k9(v){let t,y;return t=new I({props:{code:"ZnJvbSUyMHRvcmNoZGF0YS5zdGF0ZWZ1bF9kYXRhbG9hZGVyJTIwaW1wb3J0JTIwU3RhdGVmdWxEYXRhTG9hZGVyJTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyZGVlcG1pbmQlMkZjb2RlX2NvbnRlc3RzJTIyJTJDJTIwc3RyZWFtaW5nJTNEVHJ1ZSUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBZGF0YWxvYWRlciUyMCUzRCUyMFN0YXRlZnVsRGF0YUxvYWRlcihkcyUyQyUyMGJhdGNoX3NpemUlM0QzMiUyQyUyMG51bV93b3JrZXJzJTNENCklMEElMjMlMjBjaGVja3BvaW50JTBBc3RhdGVfZGljdCUyMCUzRCUyMGRhdGFsb2FkZXIuc3RhdGVfZGljdCgpJTIwJTIwJTIzJTIwdXNlcyUyMGRzLnN0YXRlX2RpY3QoKSUyMHVuZGVyJTIwdGhlJTIwaG9vZCUwQSUyMyUyMHJlc3VtZSUyMGZyb20lMjBjaGVja3BvaW50JTBBZGF0YWxvYWRlci5sb2FkX3N0YXRlX2RpY3Qoc3RhdGVfZGljdCklMjAlMjAlMjMlMjB1c2VzJTIwZHMubG9hZF9zdGF0ZV9kaWN0KCklMjB1bmRlciUyMHRoZSUyMGhvb2Q=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torchdata.stateful_dataloader <span class="hljs-keyword">import</span> StatefulDataLoader
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;deepmind/code_contests&quot;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = StatefulDataLoader(ds, batch_size=<span class="hljs-number">32</span>, num_workers=<span class="hljs-number">4</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># checkpoint</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>state_dict = dataloader.state_dict()  <span class="hljs-comment"># uses ds.state_dict() under the hood</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># resume from checkpoint</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader.load_state_dict(state_dict)  <span class="hljs-comment"># uses ds.load_state_dict() under the hood</span>`,wrap:!1}}),{c(){g(t.$$.fragment)},l(o){f(t.$$.fragment,o)},m(o,a){b(t,o,a),y=!0},p:D,i(o){y||(h(t.$$.fragment,o),y=!0)},o(o){u(t.$$.fragment,o),y=!1},d(o){_(t,o)}}}function J9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBZGVmJTIwYWRkX3ByZWZpeChleGFtcGxlKSUzQSUwQSUyMCUyMCUyMCUyMGV4YW1wbGUlNUIlMjJ0ZXh0JTIyJTVEJTIwJTNEJTIwJTIyUmV2aWV3JTNBJTIwJTIyJTIwJTJCJTIwZXhhbXBsZSU1QiUyMnRleHQlMjIlNUQlMEElMjAlMjAlMjAlMjByZXR1cm4lMjBleGFtcGxlJTBBZHMlMjAlM0QlMjBkcy5tYXAoYWRkX3ByZWZpeCklMEFuZXh0KGl0ZXIoZHMlNUIlMjJ0cmFpbiUyMiU1RCkp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function T9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBZHMlMjAlM0QlMjBkcy5maWx0ZXIobGFtYmRhJTIweCUzQSUyMHglNUIlMjJsYWJlbCUyMiU1RCUyMCUzRCUzRCUyMDApJTBBbGlzdChkcyU1QiUyMnRyYWluJTIyJTVELnRha2UoMykp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;Review: it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function D9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBbGlzdChkcyU1QiUyMnRyYWluJTIyJTVELnRha2UoMykpJTBBZHMlMjAlM0QlMjBkcy5zaHVmZmxlKHNlZWQlM0Q0MiklMEFsaXN0KGRzJTVCJTIydHJhaW4lMjIlNUQudGFrZSgzKSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function C9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJjb3JuZWxsLW1vdmllLXJldmlldy1kYXRhJTJGcm90dGVuX3RvbWF0b2VzJTIyJTJDJTIwc3BsaXQlM0QlMjJ2YWxpZGF0aW9uJTIyJTJDJTIwc3RyZWFtaW5nJTNEVHJ1ZSklMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJiZXJ0LWJhc2UtY2FzZWQlMjIpJTBBZHMlMjAlM0QlMjBkcy5tYXAobGFtYmRhJTIweCUzQSUyMHRva2VuaXplcih4JTVCJ3RleHQnJTVEJTJDJTIwdHJ1bmNhdGlvbiUzRFRydWUlMkMlMjBwYWRkaW5nJTNEVHJ1ZSklMkMlMjBiYXRjaGVkJTNEVHJ1ZSklMEFkcyUyMCUzRCUyMGRzLndpdGhfZm9ybWF0KCUyMnRvcmNoJTIyKSUwQW5leHQoaXRlcihkcykp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;label&#x27;</span>: tensor(<span class="hljs-number">1</span>),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
        <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
        <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,
            <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]),
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
        <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function I9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBZHMlNUIlMjJ0cmFpbiUyMiU1RC5mZWF0dXJlcyUwQW5ld19mZWF0dXJlcyUyMCUzRCUyMGRzJTVCJTIydHJhaW4lMjIlNUQuZmVhdHVyZXMuY29weSgpJTBBbmV3X2ZlYXR1cmVzJTVCJ2xhYmVsJyU1RCUyMCUzRCUyMENsYXNzTGFiZWwobmFtZXMlM0QlNUInYmFkJyUyQyUyMCdnb29kJyU1RCklMEFuZXdfZmVhdHVyZXMlNUIndGV4dCclNUQlMjAlM0QlMjBWYWx1ZSgnbGFyZ2Vfc3RyaW5nJyklMEFkcyUyMCUzRCUyMGRzLmNhc3QobmV3X2ZlYXR1cmVzKSUwQWRzJTVCJTIydHJhaW4lMjIlNUQuZmVhdHVyZXM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function U9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwQ2xhc3NMYWJlbCUwQWRzJTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMmNvcm5lbGwtbW92aWUtcmV2aWV3LWRhdGElMkZyb3R0ZW5fdG9tYXRvZXMlMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKSUwQWRzJTVCJTIydHJhaW4lMjIlNUQuZmVhdHVyZXMlMEFkcyUyMCUzRCUyMGRzLmNhc3RfY29sdW1uKCdsYWJlbCclMkMlMjBDbGFzc0xhYmVsKG5hbWVzJTNEJTVCJ2JhZCclMkMlMjAnZ29vZCclNUQpKSUwQWRzJTVCJTIydHJhaW4lMjIlNUQuZmVhdHVyZXM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function Z9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBZHMlMjAlM0QlMjBkcy5yZW1vdmVfY29sdW1ucyglMjJsYWJlbCUyMiklMEFuZXh0KGl0ZXIoZHMlNUIlMjJ0cmFpbiUyMiU1RCkp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function R9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBZHMlMjAlM0QlMjBkcy5yZW5hbWVfY29sdW1uKCUyMnRleHQlMjIlMkMlMjAlMjJtb3ZpZV9yZXZpZXclMjIpJTBBbmV4dChpdGVyKGRzJTVCJTIydHJhaW4lMjIlNUQpKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function F9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBZHMlMjAlM0QlMjBkcy5yZW5hbWVfY29sdW1ucyglN0IlMjJ0ZXh0JTIyJTNBJTIwJTIybW92aWVfcmV2aWV3JTIyJTJDJTIwJTIybGFiZWwlMjIlM0ElMjAlMjJyYXRpbmclMjIlN0QpJTBBbmV4dChpdGVyKGRzJTVCJTIydHJhaW4lMjIlNUQpKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_columns({<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;movie_review&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;rating&quot;</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;rating&#x27;</span>: <span class="hljs-number">1</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function G9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUpJTBBZHMlMjAlM0QlMjBkcy5zZWxlY3QoJTIydGV4dCUyMiklMEFuZXh0KGl0ZXIoZHMlNUIlMjJ0cmFpbiUyMiU1RCkp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.select(<span class="hljs-string">&quot;text&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function N9(v){let t,y=`A <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Sequence">Sequence</a> with an internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatibility layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don’t want this behavior, you can use a Python <code>list</code> or a <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.LargeList">LargeList</a>
instead of the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Sequence">Sequence</a>.`;return{c(){t=p("p"),t.innerHTML=y},l(o){t=d(o,"P",{"data-svelte-h":!0}),x(t)!=="svelte-ba12mw"&&(t.innerHTML=y)},m(o,a){$(o,t,a)},p:D,d(o){o&&i(t)}}}function z9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBY29weV9vZl9mZWF0dXJlcyUyMCUzRCUyMGRzLmZlYXR1cmVzLmNvcHkoKSUwQWNvcHlfb2ZfZmVhdHVyZXM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function X9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIycmFqcHVya2FyJTJGc3F1YWQlMjIlMkMlMjBzcGxpdCUzRCUyMnRyYWluJTIyKSUwQWRzLmZlYXR1cmVzLmZsYXR0ZW4oKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rajpurkar/squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features.flatten()
{<span class="hljs-string">&#x27;answers.answer_start&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;answers.text&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function V9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"RmVhdHVyZXMuZnJvbV9kaWN0KCU3QidfdHlwZSclM0ElMjAlN0InZHR5cGUnJTNBJTIwJ3N0cmluZyclMkMlMjAnaWQnJTNBJTIwTm9uZSUyQyUyMCdfdHlwZSclM0ElMjAnVmFsdWUnJTdEJTdEKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function q9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRmVhdHVyZXMlMkMlMjBTZXF1ZW5jZSUyQyUyMFZhbHVlJTBBJTIzJTIwbGV0J3MlMjBzYXklMjB3ZSUyMGhhdmUlMjB0d28lMjBmZWF0dXJlcyUyMHdpdGglMjBhJTIwZGlmZmVyZW50JTIwb3JkZXIlMjBvZiUyMG5lc3RlZCUyMGZpZWxkcyUyMChmb3IlMjBhJTIwYW5kJTIwYiUyMGZvciUyMGV4YW1wbGUpJTBBZjElMjAlM0QlMjBGZWF0dXJlcyglN0IlMjJyb290JTIyJTNBJTIwU2VxdWVuY2UoJTdCJTIyYSUyMiUzQSUyMFZhbHVlKCUyMnN0cmluZyUyMiklMkMlMjAlMjJiJTIyJTNBJTIwVmFsdWUoJTIyc3RyaW5nJTIyKSU3RCklN0QpJTBBZjIlMjAlM0QlMjBGZWF0dXJlcyglN0IlMjJyb290JTIyJTNBJTIwJTdCJTIyYiUyMiUzQSUyMFNlcXVlbmNlKFZhbHVlKCUyMnN0cmluZyUyMikpJTJDJTIwJTIyYSUyMiUzQSUyMFNlcXVlbmNlKFZhbHVlKCUyMnN0cmluZyUyMikpJTdEJTdEKSUwQWFzc2VydCUyMGYxLnR5cGUlMjAhJTNEJTIwZjIudHlwZSUwQSUyMyUyMHJlLW9yZGVyaW5nJTIwa2VlcHMlMjB0aGUlMjBiYXNlJTIwc3RydWN0dXJlJTIwKGhlcmUlMjBTZXF1ZW5jZSUyMGlzJTIwZGVmaW5lZCUyMGF0JTIwdGhlJTIwcm9vdCUyMGxldmVsKSUyQyUyMGJ1dCUyMG1ha2VzJTIwdGhlJTIwZmllbGRzJTIwb3JkZXIlMjBtYXRjaCUwQWYxLnJlb3JkZXJfZmllbGRzX2FzKGYyKSUwQWFzc2VydCUyMGYxLnJlb3JkZXJfZmllbGRzX2FzKGYyKS50eXBlJTIwJTNEJTNEJTIwZjIudHlwZQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have two features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but makes the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function B9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRmVhdHVyZXMlMEFmZWF0dXJlcyUyMCUzRCUyMEZlYXR1cmVzKCU3QidzdGFycyclM0ElMjBWYWx1ZShkdHlwZSUzRCdpbnQzMicpJTdEKSUwQWZlYXR1cmVz",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function W9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRmVhdHVyZXMlMkMlMjBDbGFzc0xhYmVsJTBBZmVhdHVyZXMlMjAlM0QlMjBGZWF0dXJlcyglN0InbGFiZWwnJTNBJTIwQ2xhc3NMYWJlbChudW1fY2xhc3NlcyUzRDMlMkMlMjBuYW1lcyUzRCU1QidiYWQnJTJDJTIwJ29rJyUyQyUyMCdnb29kJyU1RCklN0QpJTBBZmVhdHVyZXM=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function H9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBZHMuZmVhdHVyZXMlNUIlMjJsYWJlbCUyMiU1RC5pbnQyc3RyKDAp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].int2str(<span class="hljs-number">0</span>)
<span class="hljs-string">&#x27;neg&#x27;</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function E9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBZHMlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyY29ybmVsbC1tb3ZpZS1yZXZpZXctZGF0YSUyRnJvdHRlbl90b21hdG9lcyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBZHMuZmVhdHVyZXMlNUIlMjJsYWJlbCUyMiU1RC5zdHIyaW50KCduZWcnKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;cornell-movie-review-data/rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].str2int(<span class="hljs-string">&#x27;neg&#x27;</span>)
<span class="hljs-number">0</span>`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function Q9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRmVhdHVyZXMlMkMlMjBTZXF1ZW5jZSUyQyUyMFZhbHVlJTJDJTIwQ2xhc3NMYWJlbCUwQWZlYXR1cmVzJTIwJTNEJTIwRmVhdHVyZXMoJTdCJ3Bvc3QnJTNBJTIwU2VxdWVuY2UoZmVhdHVyZSUzRCU3Qid0ZXh0JyUzQSUyMFZhbHVlKGR0eXBlJTNEJ3N0cmluZycpJTJDJTIwJ3Vwdm90ZXMnJTNBJTIwVmFsdWUoZHR5cGUlM0QnaW50MzInKSUyQyUyMCdsYWJlbCclM0ElMjBDbGFzc0xhYmVsKG51bV9jbGFzc2VzJTNEMiUyQyUyMG5hbWVzJTNEJTVCJ2hvdCclMkMlMjAnY29sZCclNUQpJTdEKSU3RCklMEFmZWF0dXJlcw==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>])})})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function Y9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"JTIzJTIwQXQlMjBjb25zdHJ1Y3Rpb24lMjB0aW1lJTNBJTBBZGF0YXNldHMuZmVhdHVyZXMuVHJhbnNsYXRpb24obGFuZ3VhZ2VzJTNEJTVCJ2VuJyUyQyUyMCdmciclMkMlMjAnZGUnJTVEKSUwQSUyMyUyMER1cmluZyUyMGRhdGElMjBnZW5lcmF0aW9uJTNBJTBBeWllbGQlMjAlN0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAnZW4nJTNBJTIwJ3RoZSUyMGNhdCclMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAnZnInJTNBJTIwJ2xlJTIwY2hhdCclMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAnZGUnJTNBJTIwJ2RpZSUyMGthdHplJyUwQSU3RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function L9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"JTIzJTIwQXQlMjBjb25zdHJ1Y3Rpb24lMjB0aW1lJTNBJTBBZGF0YXNldHMuZmVhdHVyZXMuVHJhbnNsYXRpb25WYXJpYWJsZUxhbmd1YWdlcyhsYW5ndWFnZXMlM0QlNUInZW4nJTJDJTIwJ2ZyJyUyQyUyMCdkZSclNUQpJTBBJTIzJTIwRHVyaW5nJTIwZGF0YSUyMGdlbmVyYXRpb24lM0ElMEF5aWVsZCUyMCU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCdlbiclM0ElMjAndGhlJTIwY2F0JyUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCdmciclM0ElMjAlNUInbGUlMjBjaGF0JyUyQyUyMCdsYSUyMGNoYXR0ZSUyQyclNUQlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAnZGUnJTNBJTIwJ2RpZSUyMGthdHplJyUwQSU3RCUwQSUyMyUyMFRlbnNvciUyMHJldHVybmVkJTIwJTNBJTBBJTdCJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJ2xhbmd1YWdlJyUzQSUyMCU1QidlbiclMkMlMjAnZGUnJTJDJTIwJ2ZyJyUyQyUyMCdmciclNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAndHJhbnNsYXRpb24nJTNBJTIwJTVCJ3RoZSUyMGNhdCclMkMlMjAnZGllJTIwa2F0emUnJTJDJTIwJ2xhJTIwY2hhdHRlJyUyQyUyMCdsZSUyMGNoYXQnJTVEJTJDJTBBJTdE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.TranslationVariableLanguages(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function S9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRmVhdHVyZXMlMEFmZWF0dXJlcyUyMCUzRCUyMEZlYXR1cmVzKCU3Qid4JyUzQSUyMEFycmF5MkQoc2hhcGUlM0QoMSUyQyUyMDMpJTJDJTIwZHR5cGUlM0QnaW50MzInKSU3RCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array2D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function A9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRmVhdHVyZXMlMEFmZWF0dXJlcyUyMCUzRCUyMEZlYXR1cmVzKCU3Qid4JyUzQSUyMEFycmF5M0Qoc2hhcGUlM0QoMSUyQyUyMDIlMkMlMjAzKSUyQyUyMGR0eXBlJTNEJ2ludDMyJyklN0Qp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array3D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function P9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRmVhdHVyZXMlMEFmZWF0dXJlcyUyMCUzRCUyMEZlYXR1cmVzKCU3Qid4JyUzQSUyMEFycmF5NEQoc2hhcGUlM0QoMSUyQyUyMDIlMkMlMjAyJTJDJTIwMyklMkMlMjBkdHlwZSUzRCdpbnQzMicpJTdEKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array4D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function K9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRmVhdHVyZXMlMEFmZWF0dXJlcyUyMCUzRCUyMEZlYXR1cmVzKCU3Qid4JyUzQSUyMEFycmF5NUQoc2hhcGUlM0QoMSUyQyUyMDIlMkMlMjAyJTJDJTIwMyUyQyUyMDMpJTJDJTIwZHR5cGUlM0QnaW50MzInKSU3RCk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array5D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function O9(v){let t,y="Example:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwQXVkaW8lMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJQb2x5QUklMkZtaW5kczE0JTIyJTJDJTIwbmFtZSUzRCUyMmVuLVVTJTIyJTJDJTIwc3BsaXQlM0QlMjJ0cmFpbiUyMiklMEFkcyUyMCUzRCUyMGRzLmNhc3RfY29sdW1uKCUyMmF1ZGlvJTIyJTJDJTIwQXVkaW8oc2FtcGxpbmdfcmF0ZSUzRDE2MDAwKSklMEFkcyU1QjAlNUQlNUIlMjJhdWRpbyUyMiU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">2.3443763e-05</span>,  <span class="hljs-number">2.1729663e-04</span>,  <span class="hljs-number">2.2145823e-04</span>, ...,
     <span class="hljs-number">3.8356509e-05</span>, -<span class="hljs-number">7.3497440e-06</span>, -<span class="hljs-number">2.1754686e-05</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-11lpom8"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function e6(v){let t,y="Examples:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwSW1hZ2UlMEFkcyUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJBSS1MYWItTWFrZXJlcmUlMkZiZWFucyUyMiUyQyUyMHNwbGl0JTNEJTIydHJhaW4lMjIpJTBBZHMuZmVhdHVyZXMlNUIlMjJpbWFnZSUyMiU1RCUwQWRzJTVCMCU1RCU1QiUyMmltYWdlJTIyJTVEJTBBZHMlMjAlM0QlMjBkcy5jYXN0X2NvbHVtbignaW1hZ2UnJTJDJTIwSW1hZ2UoZGVjb2RlJTNERmFsc2UpKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;AI-Lab-Makerere/beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;image&quot;</span>]
Image(decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x500 at <span class="hljs-number">0x15E52E7F0</span>&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;image&#x27;</span>, Image(decode=<span class="hljs-literal">False</span>))
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/healthy/healthy_train.85.jpg&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-kvfsh7"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function t6(v){let t,y="Examples:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMFZpZGVvJTBBZHMlMjAlM0QlMjBEYXRhc2V0LmZyb21fZGljdCglN0IlMjJ2aWRlbyUyMiUzQSU1QiUyMnBhdGglMkZ0byUyRlNjcmVlbiUyMFJlY29yZGluZy5tb3YlMjIlNUQlN0QpLmNhc3RfY29sdW1uKCUyMnZpZGVvJTIyJTJDJTIwVmlkZW8oKSklMEFkcy5mZWF0dXJlcyU1QiUyMnZpZGVvJTIyJTVEJTBBZHMlNUIwJTVEJTVCJTIydmlkZW8lMjIlNUQlMEFkcyUyMCUzRCUyMGRzLmNhc3RfY29sdW1uKCd2aWRlbyclMkMlMjBWaWRlbyhkZWNvZGUlM0RGYWxzZSkp",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, Video
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;video&quot;</span>:[<span class="hljs-string">&quot;path/to/Screen Recording.mov&quot;</span>]}).cast_column(<span class="hljs-string">&quot;video&quot;</span>, Video())
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;video&quot;</span>]
Video(decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;video&quot;</span>]
&lt;torchvision.io.video_reader.VideoReader <span class="hljs-built_in">object</span> at <span class="hljs-number">0x325b1aae0</span>&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;video&#x27;</span>, Video(decode=<span class="hljs-literal">False</span>))
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;path/to/Screen Recording.mov&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-kvfsh7"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function s6(v){let t,y="Examples:",o,a,c;return a=new I({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMFBkZiUwQWRzJTIwJTNEJTIwRGF0YXNldC5mcm9tX2RpY3QoJTdCJTIycGRmJTIyJTNBJTIwJTVCJTIycGF0aCUyRnRvJTJGcGRmJTJGZmlsZS5wZGYlMjIlNUQlN0QpLmNhc3RfY29sdW1uKCUyMnBkZiUyMiUyQyUyMFBkZigpKSUwQWRzLmZlYXR1cmVzJTVCJTIycGRmJTIyJTVEJTBBZHMlNUIwJTVEJTVCJTIycGRmJTIyJTVEJTBBZHMlMjAlM0QlMjBkcy5jYXN0X2NvbHVtbiglMjJwZGYlMjIlMkMlMjBQZGYoZGVjb2RlJTNERmFsc2UpKSUwQWRzJTVCMCU1RCU1QiUyMnBkZiUyMiU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, Pdf
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_dict({<span class="hljs-string">&quot;pdf&quot;</span>: [<span class="hljs-string">&quot;path/to/pdf/file.pdf&quot;</span>]}).cast_column(<span class="hljs-string">&quot;pdf&quot;</span>, Pdf())
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;pdf&quot;</span>]
Pdf(decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;pdf&quot;</span>]
&lt;pdfplumber.pdf.PDF <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f8a1c2d8f40</span>&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;pdf&quot;</span>, Pdf(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;pdf&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
<span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;path/to/pdf/file.pdf&#x27;</span>}`,wrap:!1}}),{c(){t=p("p"),t.textContent=y,o=l(),g(a.$$.fragment)},l(e){t=d(e,"P",{"data-svelte-h":!0}),x(t)!=="svelte-kvfsh7"&&(t.textContent=y),o=r(e),f(a.$$.fragment,e)},m(e,m){$(e,t,m),$(e,o,m),b(a,e,m),c=!0},p:D,i(e){c||(h(a.$$.fragment,e),c=!0)},o(e){u(a.$$.fragment,e),c=!1},d(e){e&&(i(t),i(o)),_(a,e)}}}function a6(v){let t,y,o,a,c,e,m,B,V,Ec,O2,Yh,pU="Information about a dataset.",e$,Lh,dU=`<code>DatasetInfo</code> documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`,t$,Sh,iU="Not all fields are known on construction and may be updated later.",s$,Ve,Qc,a$,Ah,mU='Create <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a> from the JSON file in <code>dataset_info_dir</code>.',n$,Ph,hU=`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,…) of the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>.`,l$,Kh,uU="This will overwrite all previous metadata.",r$,sl,o$,ms,Yc,c$,Oh,gU="Write <code>DatasetInfo</code> and license (if present) as JSON files to <code>dataset_info_dir</code>.",p$,al,Uj,Lc,Zj,Sc,fU='The base class <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> implements a Dataset backed by an Apache Arrow table.',Rj,J,Ac,d$,eu,bU="A Dataset backed by an Arrow table.",i$,ft,Pc,m$,tu,_U="Add column to Dataset.",h$,Kc,u$,nl,g$,bt,Oc,f$,su,xU="Add item to Dataset.",b$,ep,_$,ll,x$,rl,tp,y$,au,yU="Instantiate a Dataset backed by an Arrow table at filename.",j$,ol,sp,$$,nu,jU="Instantiate a Dataset backed by an Arrow buffer.",v$,be,ap,w$,lu,$U='Convert <code>pandas.DataFrame</code> to a <code>pyarrow.Table</code> to create a <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a>.',M$,ru,vU=`The column types in the resulting Arrow Table are inferred from the dtypes of the <code>pandas.Series</code> in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of <code>object</code>, we need to guess the datatype by looking at the Python objects in this Series.`,k$,ou,wU=`Be aware that Series of the <code>object</code> dtype don’t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains <code>None/nan</code> objects, the type is set to <code>null</code>. This behavior can be avoided by constructing explicit
features and passing it to this function.`,J$,cu,MU=`Important: a dataset created with from_pandas() lives in memory
and therefore doesn’t have an associated cache directory.
This may change in the future, but in the meantime if you
want to reduce memory usage you should write it back on disk
and reload using e.g. save_to_disk / load_from_disk.`,T$,cl,D$,hs,np,C$,pu,kU='Convert <code>dict</code> to a <code>pyarrow.Table</code> to create a <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a>.',I$,du,JU=`Important: a dataset created with from_dict() lives in memory
and therefore doesn’t have an associated cache directory.
This may change in the future, but in the meantime if you
want to reduce memory usage you should write it back on disk
and reload using e.g. save_to_disk / load_from_disk.`,U$,_t,lp,Z$,iu,TU="Create a Dataset from a generator.",R$,pl,F$,dl,G$,us,rp,N$,mu,DU="The Apache Arrow table backing the dataset.",z$,il,X$,gs,op,V$,hu,CU="The cache files containing the Apache Arrow table backing the dataset.",q$,ml,B$,fs,cp,W$,uu,IU="Number of columns in the dataset.",H$,hl,E$,bs,pp,Q$,gu,UU='Number of rows in the dataset (same as <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.__len__">Dataset.<strong>len</strong>()</a>).',Y$,ul,L$,_s,dp,S$,fu,ZU="Names of the columns in the dataset.",A$,gl,P$,xs,ip,K$,bu,RU="Shape of the dataset (number of columns, number of rows).",O$,fl,e0,xt,mp,t0,_u,FU="Return a list of the unique elements in a column.",s0,xu,GU="This is implemented in the low-level backend and as such, very fast.",a0,bl,n0,ys,hp,l0,yu,NU=`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`,r0,_l,o0,js,up,c0,ju,zU="Cast the dataset to a new set of features.",p0,xl,d0,$s,gp,i0,$u,XU="Cast column to feature for decoding.",m0,yl,h0,yt,fp,u0,vu,VU="Remove one or several column(s) in the dataset and the features associated to them.",g0,wu,qU=`You can also remove a column using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> with <code>remove_columns</code> but the present method
doesn’t copy the data of the remaining columns and is thus faster.`,f0,jl,b0,vs,bp,_0,Mu,BU=`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`,x0,$l,y0,ws,_p,j0,ku,WU=`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`,$0,vl,v0,Ms,xp,w0,Ju,HU=`Select one or several column(s) in the dataset and the features
associated to them.`,M0,wl,k0,ks,yp,J0,Tu,EU='Casts the given column as <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.ClassLabel">ClassLabel</a> and updates the table.',T0,Ml,D0,Js,jp,C0,Du,QU="Number of rows in the dataset.",I0,kl,U0,Ts,$p,Z0,Cu,YU="Iterate through the examples.",R0,Iu,LU=`If a formatting is set with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_format">Dataset.set_format()</a> rows will be returned with the
selected format.`,F0,Ds,vp,G0,Uu,SU="Iterate through the batches of size <em>batch_size</em>.",N0,Zu,AU=`If a formatting is set with [<em>~datasets.Dataset.set_format</em>] rows will be returned with the
selected format.`,z0,Jl,wp,X0,Ru,PU="To be used in a <code>with</code> statement. Set <code>__getitem__</code> return format (type and columns).",V0,qe,Mp,q0,Fu,KU=`Set <code>__getitem__</code> return format (type and columns). The data formatting is applied on-the-fly.
The format <code>type</code> (for example “numpy”) is used to format batches when using <code>__getitem__</code>.
It’s also possible to use custom transforms for formatting using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_transform">set_transform()</a>.`,B0,Gu,OU='It is possible to call <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> after calling <code>set_format</code>. Since <code>map</code> may add new columns, then the list of formatted columns',W0,Tl,H0,Dl,E0,Cs,kp,Q0,Nu,eZ=`Set <code>__getitem__</code> return format using this transform. The transform is applied on-the-fly on batches when <code>__getitem__</code> is called.
As <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_format">set_format()</a>, this can be reset using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.reset_format">reset_format()</a>.`,Y0,Cl,L0,jt,Jp,S0,zu,tZ="Reset <code>__getitem__</code> return format to python objects and all columns.",A0,Xu,sZ="Same as <code>self.set_format()</code>",P0,Il,K0,Be,Tp,O0,Vu,aZ=`Set <code>__getitem__</code> return format (type and columns). The data formatting is applied on-the-fly.
The format <code>type</code> (for example “numpy”) is used to format batches when using <code>__getitem__</code>.`,e1,qu,nZ='It’s also possible to use custom transforms for formatting using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.with_transform">with_transform()</a>.',t1,Bu,lZ='Contrary to <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_format">set_format()</a>, <code>with_format</code> returns a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> object.',s1,Ul,a1,We,Dp,n1,Wu,rZ="Set <code>__getitem__</code> return format using this transform. The transform is applied on-the-fly on batches when <code>__getitem__</code> is called.",l1,Hu,oZ='As <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_format">set_format()</a>, this can be reset using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.reset_format">reset_format()</a>.',r1,Eu,cZ='Contrary to <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_transform">set_transform()</a>, <code>with_transform</code> returns a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> object.',o1,Zl,c1,Rl,Cp,p1,Qu,pZ="Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools).",d1,$t,Ip,i1,Yu,dZ=`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`,m1,Lu,iZ="Be careful when running this command that no other process is currently using other cache files.",h1,Fl,u1,_e,Up,g1,Su,mZ=`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`,f1,Au,hZ="You can specify whether the function should be batched or not with the <code>batched</code> parameter:",b1,Pu,uZ=`<li>If batched is <code>False</code>, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. <code>{&quot;text&quot;: &quot;Hello there !&quot;}</code>.</li> <li>If batched is <code>True</code> and <code>batch_size</code> is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is <code>{&quot;text&quot;: [&quot;Hello there !&quot;]}</code>.</li> <li>If batched is <code>True</code> and <code>batch_size</code> is <code>n &gt; 1</code>, then the function takes a batch of <code>n</code> examples as input and can return a batch with <code>n</code> examples, or with an arbitrary number of examples.
Note that the last batch may have less than <code>n</code> examples.
A batch is a dictionary, e.g. a batch of <code>n</code> examples is <code>{&quot;text&quot;: [&quot;Hello there !&quot;] * n}</code>.</li>`,_1,Ku,gZ=`If the function is asynchronous, then <code>map</code> will run your function in parallel, with up to one thousand simultaneous calls.
It is recommended to use a <code>asyncio.Semaphore</code> in your function if you want to set a maximum number of operations that can run at the same time.`,x1,Gl,y1,vt,Zp,j1,Ou,fZ=`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`,$1,eg,bZ=`If the function is asynchronous, then <code>filter</code> will run your function in parallel, with up to one thousand simultaneous calls (configurable).
It is recommended to use a <code>asyncio.Semaphore</code> in your function if you want to set a maximum number of operations that can run at the same time.`,v1,Nl,w1,Is,Rp,M1,tg,_Z="Create a new dataset with rows selected following the list/array of indices.",k1,zl,J1,Us,Fp,T1,sg,xZ="Create a new dataset sorted according to a single or multiple columns.",D1,Xl,C1,O,Gp,I1,ag,yZ="Create a new Dataset where the rows are shuffled.",U1,ng,jZ=`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy’s default random generator (PCG64).`,Z1,lg,$Z=`Shuffling takes the list of indices <code>[0:len(my_dataset)]</code> and shuffles it to create an indices mapping.
However as soon as your <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> has an indices mapping, the speed can become 10x slower.
This is because there is an extra step to get the row index to read using the indices mapping, and most importantly, you aren’t reading contiguous chunks of data anymore.
To restore the speed, you’d need to rewrite the entire dataset on your disk again using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.flatten_indices">Dataset.flatten_indices()</a>, which removes the indices mapping.`,R1,Vl,F1,rg,vZ='In this case, we recommend switching to an <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> and leveraging its fast approximate shuffling method <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.shuffle">IterableDataset.shuffle()</a>.',G1,ql,N1,Bl,z1,Zs,Np,X1,og,wZ='Create a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> that skips the first <code>n</code> elements.',V1,Wl,q1,Rs,zp,B1,cg,MZ='Create a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> with only the first <code>n</code> elements.',W1,Hl,H1,wt,Xp,E1,pg,kZ=`Return a dictionary (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict">datasets.DatasetDict</a>) with two random train and test subsets (<code>train</code> and <code>test</code> <code>Dataset</code> splits).
Splits are created from the dataset according to <code>test_size</code>, <code>train_size</code> and <code>shuffle</code>.`,Q1,dg,JZ="This method is similar to scikit-learn <code>train_test_split</code>.",Y1,El,L1,ne,Vp,S1,ig,TZ="Return the <code>index</code>-nth shard from dataset split into <code>num_shards</code> pieces.",A1,mg,DZ=`This shards deterministically. <code>dataset.shard(n, i)</code> splits the dataset into contiguous chunks,
so it can be easily concatenated back together after processing. If <code>len(dataset) % n == l</code>, then the
first <code>l</code> dataset each have length <code>(len(dataset) // n) + 1</code>, and the remaining dataset have length <code>(len(dataset) // n)</code>.
<code>datasets.concatenate_datasets([dset.shard(n, i) for i in range(n)])</code> returns a dataset with the same order as the original.`,P1,hg,CZ="Note: n should be less or equal to the number of elements in the dataset <code>len(dataset)</code>.",K1,ug,IZ="On the other hand, <code>dataset.shard(n, i, contiguous=False)</code> contains all elements of the dataset whose index mod <code>n = i</code>.",O1,gg,UZ=`Be sure to shard before using any randomizing operator (such as <code>shuffle</code>).
It is best if the shard operator is used early in the dataset pipeline.`,ev,Ql,tv,Mt,qp,sv,fg,ZZ='Create a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> that repeats the underlying dataset <code>num_times</code> times.',av,bg,RZ="Like itertools.repeat, repeating once just returns the full dataset.",nv,Yl,lv,Fs,Bp,rv,_g,FZ=`Create a <code>tf.data.Dataset</code> from the underlying Dataset. This <code>tf.data.Dataset</code> will load and collate batches from
the Dataset, and is suitable for passing to methods like <code>model.fit()</code> or <code>model.predict()</code>. The dataset will yield
<code>dicts</code> for both inputs and labels unless the <code>dict</code> would contain only a single key, in which case a raw
<code>tf.Tensor</code> is yielded instead.`,ov,Ll,cv,xe,Wp,pv,xg,GZ=`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`,dv,yg,NZ=`The resulting Parquet files are self-contained by default. If your dataset contains <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Image">Image</a>, <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Video">Video</a>
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting <code>embed_external_files</code> to <code>False</code>.`,iv,Sl,mv,Al,hv,Pl,uv,He,Hp,gv,jg,zZ="Saves a dataset to a dataset directory, or in a filesystem using any implementation of <code>fsspec.spec.AbstractFileSystem</code>.",fv,$g,XZ='For <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Image">Image</a>, <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Video">Video</a> data:',bv,vg,VZ=`All the Image(), Audio() and Video() data are stored in the arrow files.
If you want to store paths or urls, please use the Value(“string”) type.`,_v,Kl,xv,Gs,Ep,yv,wg,qZ=`Loads a dataset that was previously saved using <code>save_to_disk</code> from a dataset directory, or from a
filesystem using any implementation of <code>fsspec.spec.AbstractFileSystem</code>.`,jv,Ol,$v,er,Qp,vv,Mg,BZ="Create and cache a new Dataset by flattening the indices mapping.",wv,Ns,Yp,Mv,kg,WZ="Exports the dataset to csv",kv,tr,Jv,zs,Lp,Tv,Jg,HZ="Returns the dataset as a <code>pandas.DataFrame</code>. Can also return a generator for large datasets.",Dv,sr,Cv,Xs,Sp,Iv,Tg,EZ="Returns the dataset as a Python dict. Can also return a generator for large datasets.",Uv,ar,Zv,kt,Ap,Rv,Dg,QZ="Export the dataset to JSON Lines or JSON.",Fv,Cg,YZ=`The default output format is <a href="https://jsonlines.org/" rel="nofollow">JSON Lines</a>.
To export to <a href="https://www.json.org" rel="nofollow">JSON</a>, pass <code>lines=False</code> argument and the desired <code>orient</code>.`,Gv,nr,Nv,Vs,Pp,zv,Ig,LZ="Exports the dataset to parquet",Xv,lr,Vv,qs,Kp,qv,Ug,SZ="Exports the dataset to a SQL database.",Bv,rr,Wv,N,Op,Hv,Zg,AZ=`Get an <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">datasets.IterableDataset</a> from a map-style <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">datasets.Dataset</a>.
This is equivalent to loading a dataset in streaming mode with <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">datasets.load_dataset()</a>, but much faster since the data is streamed from local files.`,Ev,Rg,PZ=`Contrary to map-style datasets, iterable datasets are lazy and can only be iterated over (e.g. using a for loop).
Since they are read sequentially in training loops, iterable datasets are much faster than map-style datasets.
All the transformations applied to iterable datasets like filtering or processing are done on-the-fly when you start iterating over the dataset.`,Qv,Fg,KZ=`Still, it is possible to shuffle an iterable dataset using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.shuffle">datasets.IterableDataset.shuffle()</a>.
This is a fast approximate shuffling that works best if you have multiple shards and if you specify a buffer size that is big enough.`,Yv,Gg,OZ=`To get the best speed performance, make sure your dataset doesn’t have an indices mapping.
If this is the case, the data are not read contiguously, which can be slow sometimes.
You can use <code>ds = ds.flatten_indices()</code> to write your dataset in contiguous chunks of data and have optimal speed before switching to an iterable dataset.`,Lv,Ng,e3="Example:",Sv,or,Av,cr,Pv,pr,Kv,dr,Ov,ir,ew,zg,t3="In a distributed setup like PyTorch DDP with a PyTorch DataLoader and shuffling",tw,mr,sw,hr,aw,nw,Jt,ed,lw,Xg,s3=`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify <code>device</code> if you want to run it on GPU (<code>device</code> must be the GPU index).
You can find more information about Faiss here:`,rw,Vg,a3='<li>For <a href="https://github.com/facebookresearch/faiss/wiki/The-index-factory" rel="nofollow">string factory</a></li>',ow,ur,cw,Bs,td,pw,qg,n3=`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of <code>external_arrays</code>.
You can specify <code>device</code> if you want to run it on GPU (<code>device</code> must be the GPU index).
You can find more information about Faiss here:`,dw,Bg,l3='<li>For <a href="https://github.com/facebookresearch/faiss/wiki/The-index-factory" rel="nofollow">string factory</a></li>',iw,gr,sd,mw,Wg,r3="Save a FaissIndex on disk.",hw,Ws,ad,uw,Hg,o3="Load a FaissIndex from disk.",gw,Eg,c3=`If you want to do additional configurations, you can have access to the faiss index object by doing
<code>.get_index(index_name).faiss_index</code> to make it fit your needs.`,fw,Hs,nd,bw,Qg,p3="Add a text index using ElasticSearch for fast retrieval. This is done in-place.",_w,fr,xw,br,ld,yw,Yg,d3="Load an existing text index using ElasticSearch for fast retrieval.",jw,_r,rd,$w,Lg,i3="List the <code>colindex_nameumns</code>/identifiers of all the attached indexes.",vw,xr,od,ww,Sg,m3="List the <code>index_name</code>/identifiers of all the attached indexes.",Mw,yr,cd,kw,Ag,h3="Drop the index with the specified column.",Jw,jr,pd,Tw,Pg,u3="Find the nearest examples indices in the dataset to the query.",Dw,$r,dd,Cw,Kg,g3="Find the nearest examples indices in the dataset to the query.",Iw,vr,id,Uw,Og,f3="Find the nearest examples in the dataset to the query.",Zw,wr,md,Rw,ef,b3="Find the nearest examples in the dataset to the query.",Fw,Mr,hd,Gw,tf,_3='<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a> object containing all the metadata in the dataset.',Nw,kr,ud,zw,sf,x3='<a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a> object corresponding to a named dataset split.',Xw,af,gd,Vw,nf,fd,qw,lf,bd,Bw,rf,_d,Ww,of,xd,Hw,cf,yd,Ew,pf,jd,Qw,df,$d,Yw,mf,vd,Lw,hf,wd,Sw,uf,Md,Aw,gf,kd,Pw,ff,Jd,Kw,Es,Td,Ow,bf,y3="Create Dataset from CSV file(s).",eM,Jr,tM,Qs,Dd,sM,_f,j3="Create Dataset from JSON or JSON Lines file(s).",aM,Tr,nM,Ys,Cd,lM,xf,$3="Create Dataset from Parquet file(s).",rM,Dr,oM,Ls,Id,cM,yf,v3="Create Dataset from text file(s).",pM,Cr,dM,Tt,Ud,iM,jf,w3="Create Dataset from SQL query or database table.",mM,Ir,hM,Ur,uM,Ss,Zd,gM,$f,M3=`Align the dataset’s label ID and label name mapping to match an input <code>label2id</code> mapping.
This is useful when you want to ensure that a model’s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`,fM,Zr,Fj,Vt,Rd,bM,vf,k3='Converts a list of <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> with the same schema into a single <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a>.',_M,Rr,Gj,E,Fd,xM,wf,J3=`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`,yM,Mf,T3='You can use this function on a list of <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> objects, or on a list of <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> objects.',jM,kf,D3="<li>If <code>probabilities</code> is <code>None</code> (default) the new dataset is constructed by cycling between each source to get the examples.</li> <li>If <code>probabilities</code> is not <code>None</code>, the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities.</li>",$M,Jf,C3=`The resulting dataset ends when one of the source datasets runs out of examples except when <code>oversampling</code> is <code>True</code>,
in which case, the resulting dataset ends when all datasets have ran out of examples at least one time.`,vM,Tf,I3="Note for iterable datasets:",wM,Df,U3=`In a distributed setup or in PyTorch DataLoader workers, the stopping strategy is applied per process.
Therefore the “first_exhausted” strategy on an sharded iterable dataset can generate less samples in total (up to 1 missing sample per subdataset per worker).`,MM,Cf,Z3="Example:",kM,Fr,Nj,ie,Gd,JM,If,R3="Split a dataset for the node at rank <code>rank</code> in a pool of nodes of size <code>world_size</code>.",TM,Uf,F3="For map-style datasets:",DM,Zf,G3=`Each node is assigned a chunk of data, e.g. rank 0 is given the first chunk of the dataset.
To maximize data loading throughput, chunks are made of contiguous data on disk if possible.`,CM,Rf,N3="For iterable datasets:",IM,Ff,z3=`If the dataset has a number of shards that is a factor of <code>world_size</code> (i.e. if <code>dataset.num_shards % world_size == 0</code>),
then the shards are evenly assigned across the nodes, which is the most optimized.
Otherwise, each node keeps 1 example out of <code>world_size</code>, skipping the other examples.`,zj,Je,Nd,UM,Gf,X3=`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it’s already been computed.`,ZM,Nf,V3=`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`,RM,zf,q3=`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`,FM,Xf,B3=`<li>cache files are always recreated</li> <li>cache files are written to a temporary directory that is deleted when session closes</li> <li>cache files are named using a random hash instead of the dataset fingerprint</li> <li>use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.save_to_disk">save_to_disk()</a> to save a transformed dataset or it will be deleted when session closes</li> <li>caching doesn’t affect <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a>. If you want to regenerate a dataset from scratch you should use
the <code>download_mode</code> parameter in <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a>.</li>`,Xj,Te,zd,GM,Vf,W3=`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it’s already been computed.`,NM,qf,H3=`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`,zM,Bf,E3=`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`,XM,Wf,Q3=`<li>cache files are always recreated</li> <li>cache files are written to a temporary directory that is deleted when session closes</li> <li>cache files are named using a random hash instead of the dataset fingerprint</li> <li>use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.save_to_disk">save_to_disk()</a> to save a transformed dataset or it will be deleted when session closes</li> <li>caching doesn’t affect <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a>. If you want to regenerate a dataset from scratch you should use
the <code>download_mode</code> parameter in <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a>.</li>`,Vj,De,Xd,VM,Hf,Y3=`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it’s already been computed.`,qM,Ef,L3=`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`,BM,Qf,S3=`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`,WM,Yf,A3=`<li>cache files are always recreated</li> <li>cache files are written to a temporary directory that is deleted when session closes</li> <li>cache files are named using a random hash instead of the dataset fingerprint</li> <li>use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.save_to_disk">save_to_disk()</a>] to save a transformed dataset or it will be deleted when session closes</li> <li>caching doesn’t affect <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a>. If you want to regenerate a dataset from scratch you should use
the <code>download_mode</code> parameter in <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a>.</li>`,qj,Vd,Bj,qd,P3=`Dictionary with split names as keys (‘train’, ‘test’ for example), and <code>Dataset</code> objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`,Wj,R,Bd,HM,Lf,K3="A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)",EM,As,Wd,QM,Sf,O3="The Apache Arrow tables backing each split.",YM,Gr,LM,Ps,Hd,SM,Af,e4="The cache files containing the Apache Arrow table backing each split.",AM,Nr,PM,Ks,Ed,KM,Pf,t4="Number of columns in each split of the dataset.",OM,zr,ek,Os,Qd,tk,Kf,s4="Number of rows in each split of the dataset.",sk,Xr,ak,ea,Yd,nk,Of,a4="Names of the columns in each split of the dataset.",lk,Vr,rk,ta,Ld,ok,eb,n4="Shape of each split of the dataset (number of rows, number of columns).",ck,qr,pk,Dt,Sd,dk,tb,l4="Return a list of the unique elements in a column for each split.",ik,sb,r4="This is implemented in the low-level backend and as such, very fast.",mk,Br,hk,sa,Ad,uk,ab,o4=`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`,gk,Wr,fk,ye,Pd,bk,nb,c4=`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.
The transformation is applied to all the datasets of the dataset dictionary.`,_k,lb,p4="You can specify whether the function should be batched or not with the <code>batched</code> parameter:",xk,rb,d4=`<li>If batched is <code>False</code>, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. <code>{&quot;text&quot;: &quot;Hello there !&quot;}</code>.</li> <li>If batched is <code>True</code> and <code>batch_size</code> is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is <code>{&quot;text&quot;: [&quot;Hello there !&quot;]}</code>.</li> <li>If batched is <code>True</code> and <code>batch_size</code> is <code>n &gt; 1</code>, then the function takes a batch of <code>n</code> examples as input and can return a batch with <code>n</code> examples, or with an arbitrary number of examples.
Note that the last batch may have less than <code>n</code> examples.
A batch is a dictionary, e.g. a batch of <code>n</code> examples is <code>{&quot;text&quot;: [&quot;Hello there !&quot;] * n}</code>.</li>`,yk,ob,i4=`If the function is asynchronous, then <code>map</code> will run your function in parallel, with up to one thousand simulatenous calls.
It is recommended to use a <code>asyncio.Semaphore</code> in your function if you want to set a maximum number of operations that can run at the same time.`,jk,Hr,$k,aa,Kd,vk,cb,m4=`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`,wk,Er,Mk,na,Od,kk,pb,h4="Create a new dataset sorted according to a single or multiple columns.",Jk,Qr,Tk,Ee,ei,Dk,db,u4="Create a new Dataset where the rows are shuffled.",Ck,ib,g4="The transformation is applied to all the datasets of the dataset dictionary.",Ik,mb,f4=`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy’s default random generator (PCG64).`,Uk,Yr,Zk,Qe,ti,Rk,hb,b4=`Set <code>__getitem__</code> return format (type and columns).
The format is set for every dataset in the dataset dictionary.`,Fk,ub,_4=`It is possible to call <code>map</code> after calling <code>set_format</code>. Since <code>map</code> may add new columns, then the list of formatted columns
gets updated. In this case, if you apply <code>map</code> on a dataset to add a new column, then this column will be formatted:`,Gk,gb,x4="<code>new formatted columns = (all columns - previously unformatted columns)</code>",Nk,Lr,zk,Ct,si,Xk,fb,y4=`Reset <code>__getitem__</code> return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`,Vk,bb,j4="Same as <code>self.set_format()</code>",qk,Sr,Bk,Ar,ai,Wk,_b,$4=`To be used in a <code>with</code> statement. Set <code>__getitem__</code> return format (type and columns).
The transformation is applied to all the datasets of the dataset dictionary.`,Hk,Ye,ni,Ek,xb,v4=`Set <code>__getitem__</code> return format (type and columns). The data formatting is applied on-the-fly.
The format <code>type</code> (for example “numpy”) is used to format batches when using <code>__getitem__</code>.
The format is set for every dataset in the dataset dictionary.`,Qk,yb,w4='It’s also possible to use custom transforms for formatting using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.with_transform">with_transform()</a>.',Yk,jb,M4='Contrary to <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict.set_format">set_format()</a>, <code>with_format</code> returns a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict">DatasetDict</a> object with new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> objects.',Lk,Pr,Sk,Le,li,Ak,$b,k4=`Set <code>__getitem__</code> return format using this transform. The transform is applied on-the-fly on batches when <code>__getitem__</code> is called.
The transform is set for every dataset in the dataset dictionary`,Pk,vb,J4='As <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_format">set_format()</a>, this can be reset using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.reset_format">reset_format()</a>.',Kk,wb,T4='Contrary to <code>set_transform()</code>, <code>with_transform</code> returns a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict">DatasetDict</a> object with new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> objects.',Ok,Kr,eJ,la,ri,tJ,Mb,D4=`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`,sJ,Or,aJ,ra,oi,nJ,kb,C4=`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`,lJ,eo,rJ,oa,ci,oJ,Jb,I4="Cast column to feature for decoding.",cJ,to,pJ,Se,pi,dJ,Tb,U4=`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`,iJ,Db,Z4="The transformation is applied to all the splits of the dataset dictionary.",mJ,Cb,R4=`You can also remove a column using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict.map">map()</a> with <code>remove_columns</code> but the present method
doesn’t copy the data of the remaining columns and is thus faster.`,hJ,so,uJ,Ae,di,gJ,Ib,F4=`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`,fJ,Ub,G4='You can also rename a column using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict.map">map()</a> with <code>remove_columns</code> but the present method:',bJ,Zb,N4="<li>takes care of moving the original features under the new column name.</li> <li>doesn’t copy the data to a new dataset and is thus much faster.</li>",_J,ao,xJ,ca,ii,yJ,Rb,z4=`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`,jJ,no,$J,It,mi,vJ,Fb,X4=`Select one or several column(s) from each split in the dataset and
the features associated to the column(s).`,wJ,Gb,V4=`The transformation is applied to all the splits of the dataset
dictionary.`,MJ,lo,kJ,pa,hi,JJ,Nb,q4='Casts the given column as <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.ClassLabel">ClassLabel</a> and updates the tables.',TJ,ro,DJ,je,ui,CJ,zb,B4=`Pushes the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict">DatasetDict</a> to the hub as a Parquet dataset.
The <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict">DatasetDict</a> is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`,IJ,Xb,W4="Each dataset split will be pushed independently. The pushed dataset will keep the original split names.",UJ,Vb,H4=`The resulting Parquet files are self-contained by default: if your dataset contains <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Image">Image</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a>
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting <code>embed_external_files</code> to False.`,ZJ,oo,RJ,co,FJ,Pe,gi,GJ,qb,E4="Saves a dataset dict to a filesystem using <code>fsspec.spec.AbstractFileSystem</code>.",NJ,Bb,Q4='For <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Image">Image</a>, <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Video">Video</a> data:',zJ,Wb,Y4=`All the Image(), Audio() and Video() data are stored in the arrow files.
If you want to store paths or urls, please use the Value(“string”) type.`,XJ,po,VJ,da,fi,qJ,Hb,L4="Load a dataset that was previously saved using <code>save_to_disk</code> from a filesystem using <code>fsspec.spec.AbstractFileSystem</code>.",BJ,io,WJ,ia,bi,HJ,Eb,S4='Create <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict">DatasetDict</a> from CSV file(s).',EJ,mo,QJ,ma,_i,YJ,Qb,A4='Create <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict">DatasetDict</a> from JSON Lines file(s).',LJ,ho,SJ,ha,xi,AJ,Yb,P4='Create <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict">DatasetDict</a> from Parquet file(s).',PJ,uo,KJ,ua,yi,OJ,Lb,K4='Create <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict">DatasetDict</a> from text file(s).',eT,go,Hj,Sb,Ej,ji,Qj,$i,O4='The base class <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> implements an iterable Dataset backed by python generators.',Yj,U,vi,tT,Ab,eR="A Dataset backed by an iterable.",sT,Ut,wi,aT,Pb,tR="Create an Iterable Dataset from a generator.",nT,fo,lT,bo,rT,ga,Mi,oT,Kb,sR=`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`,cT,_o,pT,fa,ki,dT,Ob,aR=`Select one or several column(s) in the dataset and the features
associated to them. The selection is done on-the-fly on the examples
when iterating over the dataset.`,iT,xo,mT,ba,Ji,hT,e_,nR="Cast column to feature for decoding.",uT,yo,gT,_a,Ti,fT,t_,lR="Cast the dataset to a new set of features.",bT,jo,_T,S,Di,xT,s_,rR="Enable or disable the dataset features decoding for audio, image, video.",yT,a_,oR="When enabled (default), media types are decoded:",jT,n_,cR="<li>audio -&gt; dict of “array” and “sampling_rate” and “path”</li> <li>image -&gt; PIL.Image</li> <li>video -&gt; torchvision.io.VideoReader</li>",$T,l_,pR=`You can enable multithreading using <code>num_threads</code>. This is especially useful to speed up remote
data streaming. However it can be slower than <code>num_threads=0</code> for local data on fast disks.`,vT,r_,dR=`Disabling decoding is useful if you want to iterate on the paths or bytes of the media files
without actually decoding their content. To disable decoding you can use <code>.decode(False)</code>, which
is equivalent to calling <code>.cast()</code> or <code>.cast_column()</code> with all the Audio, Image and Video types
set to <code>decode=False</code>.`,wT,o_,iR="Examples:",MT,$o,kT,vo,JT,c_,Ci,TT,wo,Ii,DT,p_,mR="Iterate through the batches of size <em>batch_size</em>.",CT,$e,Ui,IT,d_,hR=`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`,UT,i_,uR="You can specify whether the function should be batched or not with the <code>batched</code> parameter:",ZT,m_,gR=`<li>If batched is <code>False</code>, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. <code>{&quot;text&quot;: &quot;Hello there !&quot;}</code>.</li> <li>If batched is <code>True</code> and <code>batch_size</code> is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {“text”: [“Hello there !”]}.</li> <li>If batched is <code>True</code> and <code>batch_size</code> is <code>n</code> &gt; 1, then the function takes a batch of <code>n</code> examples as input and can return a batch with <code>n</code> examples, or with an arbitrary number of examples.
Note that the last batch may have less than <code>n</code> examples.
A batch is a dictionary, e.g. a batch of <code>n</code> examples is <code>{&quot;text&quot;: [&quot;Hello there !&quot;] * n}</code>.</li>`,RT,h_,fR=`If the function is asynchronous, then <code>map</code> will run your function in parallel, with up to one thousand simulatenous calls.
It is recommended to use a <code>asyncio.Semaphore</code> in your function if you want to set a maximum number of operations that can run at the same time.`,FT,Mo,GT,xa,Zi,NT,u_,bR=`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`,zT,ko,XT,Zt,Ri,VT,g_,_R=`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`,qT,f_,xR=`If the function is asynchronous, then <code>filter</code> will run your function in parallel, with up to one thousand simulatenous calls (configurable).
It is recommended to use a <code>asyncio.Semaphore</code> in your function if you want to set a maximum number of operations that can run at the same time.`,BT,Jo,WT,ve,Fi,HT,b_,yR="Randomly shuffles the elements of this dataset.",ET,__,jR=`This dataset fills a buffer with <code>buffer_size</code> elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`,QT,x_,$R=`For instance, if your dataset contains 10,000 elements but <code>buffer_size</code> is set to 1000, then <code>shuffle</code> will
initially select a random element from only the first 1000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1000 element buffer.`,YT,y_,vR=`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.skip">skip()</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.take">take()</a>
then the order of the shards is kept unchanged.`,LT,To,ST,ya,Gi,AT,j_,wR="Group samples from the dataset into batches.",PT,Do,KT,ja,Ni,OT,$_,MR='Create a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> that skips the first <code>n</code> elements.',e7,Co,t7,$a,zi,s7,v_,kR='Create a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> with only the first <code>n</code> elements.',a7,Io,n7,le,Xi,l7,w_,JR="Return the <code>index</code>-nth shard from dataset split into <code>num_shards</code> pieces.",r7,M_,TR=`This shards deterministically. <code>dataset.shard(n, i)</code> splits the dataset into contiguous chunks,
so it can be easily concatenated back together after processing. If <code>dataset.num_shards % n == l</code>, then the
first <code>l</code> datasets each have <code>(dataset.num_shards // n) + 1</code> shards, and the remaining datasets have <code>(dataset.num_shards // n)</code> shards.
<code>datasets.concatenate_datasets([dset.shard(n, i) for i in range(n)])</code> returns a dataset with the same order as the original.
In particular, <code>dataset.shard(dataset.num_shards, i)</code> returns a dataset with 1 shard.`,o7,k_,DR="Note: n should be less or equal to the number of shards in the dataset <code>dataset.num_shards</code>.",c7,J_,CR="On the other hand, <code>dataset.shard(n, i, contiguous=False)</code> contains all the shards of the dataset whose index mod <code>n = i</code>.",p7,T_,IR=`Be sure to shard before using any randomizing operator (such as <code>shuffle</code>).
It is best if the shard operator is used early in the dataset pipeline.`,d7,Uo,i7,Rt,Vi,m7,D_,UR='Create a new <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a> that repeats the underlying dataset <code>num_times</code> times.',h7,C_,ZR=`N.B. The effect of calling shuffle after repeat depends significantly on buffer size.
With buffer_size 1, duplicate data is never seen in the same iteration, even after shuffling:
ds.repeat(n).shuffle(seed=42, buffer_size=1) is equivalent to ds.shuffle(seed=42, buffer_size=1).repeat(n),
and only shuffles shard orders within each iteration.
With buffer size >= (num samples in the dataset * num_times), we get full shuffling of the repeated data, i.e. we can observe duplicates in
the same iteration.`,u7,Zo,g7,re,qi,f7,I_,RR=`Load the state_dict of the dataset.
The iteration will restart at the next example from when the state was saved.`,b7,U_,FR="Resuming returns exactly where the checkpoint was saved except in two cases:",_7,Z_,GR="<li>examples from shuffle buffers are lost when resuming and the buffers are refilled with new data</li> <li>combinations of <code>.with_format(arrow)</code> and batched <code>.map()</code> may skip one batch.</li>",x7,Ro,y7,Fo,j7,Go,$7,oe,Bi,v7,R_,NR=`Get the current state_dict of the dataset.
It corresponds to the state at the latest example it yielded.`,w7,F_,zR="Resuming returns exactly where the checkpoint was saved except in two cases:",M7,G_,XR="<li>examples from shuffle buffers are lost when resuming and the buffers are refilled with new data</li> <li>combinations of <code>.with_format(arrow)</code> and batched <code>.map()</code> may skip one batch.</li>",k7,No,J7,zo,T7,Xo,D7,Vo,Wi,C7,N_,VR='<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a> object containing all the metadata in the dataset.',I7,qo,Hi,U7,z_,qR='<a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a> object corresponding to a named dataset split.',Z7,X_,Ei,R7,V_,Qi,F7,q_,Yi,G7,B_,Li,N7,W_,Si,z7,H_,Ai,X7,E_,Pi,V7,Q_,Ki,q7,Y_,Oi,B7,L_,em,W7,S_,tm,H7,A_,sm,E7,P_,am,Lj,nm,Sj,lm,BR="Dictionary with split names as keys (‘train’, ‘test’ for example), and <code>IterableDataset</code> objects as values.",Aj,q,rm,Q7,we,om,Y7,K_,WR=`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`,L7,O_,HR="You can specify whether the function should be batched or not with the <code>batched</code> parameter:",S7,ex,ER=`<li>If batched is <code>False</code>, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. <code>{&quot;text&quot;: &quot;Hello there !&quot;}</code>.</li> <li>If batched is <code>True</code> and <code>batch_size</code> is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is <code>{&quot;text&quot;: [&quot;Hello there !&quot;]}</code>.</li> <li>If batched is <code>True</code> and <code>batch_size</code> is <code>n</code> &gt; 1, then the function takes a batch of <code>n</code> examples as input and can return a batch with <code>n</code> examples, or with an arbitrary number of examples.
Note that the last batch may have less than <code>n</code> examples.
A batch is a dictionary, e.g. a batch of <code>n</code> examples is <code>{&quot;text&quot;: [&quot;Hello there !&quot;] * n}</code>.</li>`,A7,tx,QR=`If the function is asynchronous, then <code>map</code> will run your function in parallel, with up to one thousand simulatenous calls.
It is recommended to use a <code>asyncio.Semaphore</code> in your function if you want to set a maximum number of operations that can run at the same time.`,P7,Bo,K7,va,cm,O7,sx,YR=`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`,eD,Wo,tD,Me,pm,sD,ax,LR=`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`,aD,nx,SR=`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`,nD,lx,AR=`For instance, if your dataset contains 10,000 elements but <code>buffer_size</code> is set to 1000, then <code>shuffle</code> will
initially select a random element from only the first 1000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1000 element buffer.`,lD,rx,PR=`If the dataset is made of several shards, it also does <code>shuffle</code> the order of the shards.
However if the order has been fixed by using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.skip">skip()</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.take">take()</a>
then the order of the shards is kept unchanged.`,rD,Ho,oD,wa,dm,cD,ox,KR="Return a dataset with the specified format.",pD,Eo,dD,Ma,im,iD,cx,OR=`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`,mD,Qo,hD,ka,mm,uD,px,eF=`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`,gD,Yo,fD,Ja,hm,bD,dx,tF=`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`,_D,Lo,xD,Ta,um,yD,ix,sF=`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`,jD,So,$D,Da,gm,vD,mx,aF=`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`,wD,Ao,MD,Ca,fm,kD,hx,nF=`Select one or several column(s) in the dataset and the features
associated to them. The selection is done on-the-fly on the examples
when iterating over the dataset. The selection is applied to all the
datasets of the dataset dictionary.`,JD,Po,Pj,bm,Kj,G,_m,TD,ux,lF="A special dictionary that defines the internal structure of a dataset.",DD,gx,rF=`Instantiated with a dictionary of type <code>dict[str, FieldType]</code>, where keys are the desired column names,
and values are the type of that column.`,CD,fx,oF="<code>FieldType</code> can be one of the following:",ID,se,bx,cF='<p><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Value">Value</a> feature specifies a single data type value, e.g. <code>int64</code> or <code>string</code>.</p>',UD,_x,pF=`<p><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.ClassLabel">ClassLabel</a> feature specifies a predefined set of classes which can have labels associated to them and
will be stored as integers in the dataset.</p>`,ZD,xx,dF=`<p>Python <code>dict</code> specifies a composite feature containing a mapping of sub-fields to sub-features.
It’s possible to have nested fields of nested fields in an arbitrary manner.</p>`,RD,xm,yx,iF=`Python <code>list</code>, <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.LargeList">LargeList</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Sequence">Sequence</a> specifies a composite feature containing a sequence of
sub-features, all of the same feature type.`,FD,Ko,GD,jx,mF='<p><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Array2D">Array2D</a>, <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Array3D">Array3D</a>, <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Array4D">Array4D</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Array5D">Array5D</a> feature for multidimensional arrays.</p>',ND,$x,hF=`<p><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a> feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (“path” key) and its bytes content (“bytes” key). This feature extracts the audio data.</p>`,zD,vx,uF=`<p><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Image">Image</a> feature to store the absolute path to an image file, an <code>np.ndarray</code> object, a <code>PIL.Image.Image</code> object
or a dictionary with the relative path to an image file (“path” key) and its bytes content (“bytes” key).
This feature extracts the image data.</p>`,XD,wx,gF='<p><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Translation">Translation</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.TranslationVariableLanguages">TranslationVariableLanguages</a> feature specific to Machine Translation.</p>',VD,Ia,ym,qD,Mx,fF='Make a deep copy of <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>.',BD,Oo,WD,ec,jm,HD,kx,bF="Decode batch with custom feature decoding.",ED,tc,$m,QD,Jx,_F="Decode column with custom feature decoding.",YD,sc,vm,LD,Tx,xF="Decode example with custom feature decoding.",SD,ac,wm,AD,Dx,yF="Encode batch into a format for Arrow.",PD,nc,Mm,KD,Cx,jF="Encode column into a format for Arrow.",OD,lc,km,eC,Ix,$F="Encode example into a format for Arrow.",tC,Ft,Jm,sC,Ux,vF=`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: <code>&lt;original&gt;.&lt;subfield&gt;</code>.`,aC,Zx,wF=`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: <code>&lt;original&gt;.&lt;subfield&gt;.&lt;subsubfield&gt;</code>, etc.`,nC,rc,lC,Ua,Tm,rC,Rx,MF=`Construct <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a> from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.
Non-nullable fields are not supported and set to nullable.`,oC,Fx,kF=`Also, pa.dictionary is not supported and it uses its underlying type instead.
Therefore datasets convert DictionaryArray objects to their actual values.`,cC,Ke,Dm,pC,Gx,JF="Construct [<em>Features</em>] from dict.",dC,Nx,TF=`Regenerate the nested feature object from a deserialized dict.
We use the <em>_type</em> key to infer the dataclass name of the feature <em>FieldType</em>.`,iC,zx,DF=`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a [<em>DatasetInfo</em>] that was dumped to a JSON object. This acts as an analogue to
[<em>Features.from_arrow_schema</em>] and handles the recursive field-by-field instantiation, but doesn’t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that [<em>Value</em>] automatically performs.`,mC,oc,hC,Gt,Cm,uC,Xx,CF="Reorder Features fields to match the field order of other [<em>Features</em>].",gC,Vx,IF=`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`,fC,cc,Oj,Im,e2,Ce,Um,bC,qx,UF="Scalar feature value of a particular data type.",_C,Bx,ZF="The possible dtypes of <code>Value</code> are as follows:",xC,Wx,RF="<li><code>null</code></li> <li><code>bool</code></li> <li><code>int8</code></li> <li><code>int16</code></li> <li><code>int32</code></li> <li><code>int64</code></li> <li><code>uint8</code></li> <li><code>uint16</code></li> <li><code>uint32</code></li> <li><code>uint64</code></li> <li><code>float16</code></li> <li><code>float32</code> (alias float)</li> <li><code>float64</code> (alias double)</li> <li><code>time32[(s|ms)]</code></li> <li><code>time64[(us|ns)]</code></li> <li><code>timestamp[(s|ms|us|ns)]</code></li> <li><code>timestamp[(s|ms|us|ns), tz=(tzstring)]</code></li> <li><code>date32</code></li> <li><code>date64</code></li> <li><code>duration[(s|ms|us|ns)]</code></li> <li><code>decimal128(precision, scale)</code></li> <li><code>decimal256(precision, scale)</code></li> <li><code>binary</code></li> <li><code>large_binary</code></li> <li><code>string</code></li> <li><code>large_string</code></li>",yC,pc,t2,Q,Zm,jC,Hx,FF="Feature type for integer class labels.",$C,Ex,GF="There are 3 ways to define a <code>ClassLabel</code>, which correspond to the 3 arguments:",vC,Qx,NF="<li><code>num_classes</code>: Create 0 to (num_classes-1) labels.</li> <li><code>names</code>: List of label strings.</li> <li><code>names_file</code>: File containing the list of labels.</li>",wC,Yx,zF=`Under the hood the labels are stored as integers.
You can use negative integers to represent unknown/missing labels.`,MC,dc,kC,Za,Rm,JC,Lx,XF=`Cast an Arrow array to the <code>ClassLabel</code> arrow storage type.
The Arrow types that can be converted to the <code>ClassLabel</code> pyarrow storage type are:`,TC,Sx,VF="<li><code>pa.string()</code></li> <li><code>pa.int()</code></li>",DC,Nt,Fm,CC,Ax,qF="Conversion <code>integer</code> =&gt; class name <code>string</code>.",IC,Px,BF="Regarding unknown/missing labels: passing negative integers raises <code>ValueError</code>.",UC,ic,ZC,Ra,Gm,RC,Kx,WF="Conversion class name <code>string</code> =&gt; <code>integer</code>.",FC,mc,s2,Nm,a2,qt,zm,GC,Ox,HF="Feature type for large list data composed of child feature data type.",NC,ey,EF="It is backed by <code>pyarrow.LargeListType</code>, which is like <code>pyarrow.ListType</code> but with 64-bit rather than 32-bit offsets.",n2,Bt,Xm,zC,ty,QF=`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`,XC,hc,l2,Vm,r2,Oe,qm,VC,sy,YF=`<code>Feature</code> for translations with fixed languages per example.
Here for compatibility with tfds.`,qC,uc,BC,gc,Bm,WC,ay,LF="Flatten the Translation feature into a dictionary.",o2,et,Wm,HC,ny,SF=`<code>Feature</code> for translations with variable languages per example.
Here for compatibility with tfds.`,EC,fc,QC,bc,Hm,YC,ly,AF="Flatten the TranslationVariableLanguages feature into a dictionary.",c2,Em,p2,Wt,Qm,LC,ry,PF="Create a two-dimensional array.",SC,_c,d2,Ht,Ym,AC,oy,KF="Create a three-dimensional array.",PC,xc,i2,Et,Lm,KC,cy,OF="Create a four-dimensional array.",OC,yc,m2,Qt,Sm,eI,py,eG="Create a five-dimensional array.",tI,jc,h2,Am,u2,W,Pm,sI,dy,tG="Audio <code>Feature</code> to extract audio data from an audio file.",aI,iy,sG="Input: The Audio feature accepts as input:",nI,my,aG="<li><p>A <code>str</code>: Absolute path to the audio file (i.e. random access is allowed).</p></li> <li><p>A <code>dict</code> with the keys:</p> <ul><li><code>path</code>: String with relative path of the audio file to the archive file.</li> <li><code>bytes</code>: Bytes content of the audio file.</li></ul> <p>This is useful for archived files with sequential access.</p></li> <li><p>A <code>dict</code> with the keys:</p> <ul><li><code>path</code>: String with relative path of the audio file to the archive file.</li> <li><code>array</code>: Array containing the audio sample</li> <li><code>sampling_rate</code>: Integer corresponding to the sampling rate of the audio sample.</li></ul> <p>This is useful for archived files with sequential access.</p></li>",lI,$c,rI,Fa,Km,oI,hy,nG=`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`,cI,uy,lG="<li><code>pa.string()</code> - it must contain the “path” data</li> <li><code>pa.binary()</code> - it must contain the audio bytes</li> <li><code>pa.struct({&quot;bytes&quot;: pa.binary()})</code></li> <li><code>pa.struct({&quot;path&quot;: pa.string()})</code></li> <li><code>pa.struct({&quot;bytes&quot;: pa.binary(), &quot;path&quot;: pa.string()})</code>  - order doesn’t matter</li>",pI,vc,Om,dI,gy,rG="Decode example audio file into audio data.",iI,wc,eh,mI,fy,oG="Embed audio files into the Arrow array.",hI,Mc,th,uI,by,cG="Encode example into a format for Arrow.",gI,kc,sh,fI,_y,pG="If in the decodable state, raise an error, otherwise flatten the feature into a dictionary.",g2,ah,f2,H,nh,bI,xy,dG="Image <code>Feature</code> to read image data from an image file.",_I,yy,iG="Input: The Image feature accepts as input:",xI,jy,mG="<li><p>A <code>str</code>: Absolute path to the image file (i.e. random access is allowed).</p></li> <li><p>A <code>dict</code> with the keys:</p> <ul><li><code>path</code>: String with relative path of the image file to the archive file.</li> <li><code>bytes</code>: Bytes of the image file.</li></ul> <p>This is useful for archived files with sequential access.</p></li> <li><p>An <code>np.ndarray</code>: NumPy array representing an image.</p></li> <li><p>A <code>PIL.Image.Image</code>: PIL image object.</p></li>",yI,Jc,jI,Ga,lh,$I,$y,hG=`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`,vI,vy,uG="<li><code>pa.string()</code> - it must contain the “path” data</li> <li><code>pa.binary()</code> - it must contain the image bytes</li> <li><code>pa.struct({&quot;bytes&quot;: pa.binary()})</code></li> <li><code>pa.struct({&quot;path&quot;: pa.string()})</code></li> <li><code>pa.struct({&quot;bytes&quot;: pa.binary(), &quot;path&quot;: pa.string()})</code>  - order doesn’t matter</li> <li><code>pa.list(*)</code> - it must contain the image array data</li>",wI,Tc,rh,MI,wy,gG="Decode example image file into image data.",kI,Dc,oh,JI,My,fG="Embed image files into the Arrow array.",TI,Cc,ch,DI,ky,bG="Encode example into a format for Arrow.",CI,Ic,ph,II,Jy,_G="If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary.",b2,dh,_2,Y,ih,UI,Ty,xG="<strong>Experimental.</strong> Video <code>Feature</code> to read video data from a video file.",ZI,Dy,yG="Input: The Video feature accepts as input:",RI,Cy,jG="<li><p>A <code>str</code>: Absolute path to the video file (i.e. random access is allowed).</p></li> <li><p>A <code>dict</code> with the keys:</p> <ul><li><code>path</code>: String with relative path of the video file in a dataset repository.</li> <li><code>bytes</code>: Bytes of the video file.</li></ul> <p>This is useful for archived files with sequential access.</p></li> <li><p>A <code>torchvision.io.VideoReader</code>: torchvision video reader object.</p></li>",FI,Uc,GI,Na,mh,NI,Iy,$G=`Cast an Arrow array to the Video arrow storage type.
The Arrow types that can be converted to the Video pyarrow storage type are:`,zI,Uy,vG="<li><code>pa.string()</code> - it must contain the “path” data</li> <li><code>pa.binary()</code> - it must contain the video bytes</li> <li><code>pa.struct({&quot;bytes&quot;: pa.binary()})</code></li> <li><code>pa.struct({&quot;path&quot;: pa.string()})</code></li> <li><code>pa.struct({&quot;bytes&quot;: pa.binary(), &quot;path&quot;: pa.string()})</code>  - order doesn’t matter</li> <li><code>pa.list(*)</code> - it must contain the video array data</li>",XI,Zc,hh,VI,Zy,wG="Decode example video file into video data.",qI,Rc,uh,BI,Ry,MG="Encode example into a format for Arrow.",WI,Fc,gh,HI,Fy,kG="If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary.",x2,fh,y2,L,bh,EI,Gy,JG=`<strong>Experimental.</strong>
Pdf <code>Feature</code> to read pdf documents from a pdf file.`,QI,Ny,TG="Input: The Pdf feature accepts as input:",YI,zy,DG=`<li><p>A <code>str</code>: Absolute path to the pdf file (i.e. random access is allowed).</p></li> <li><p>A <code>dict</code> with the keys:</p> <ul><li><code>path</code>: String with relative path of the pdf file in a dataset repository.</li> <li><code>bytes</code>: Bytes of the pdf file.
This is useful for archived files with sequential access.</li></ul></li> <li><p>A <code>pdfplumber.pdf.PDF</code>: pdfplumber pdf object.</p></li>`,LI,Gc,SI,za,_h,AI,Xy,CG=`Cast an Arrow array to the Pdf arrow storage type.
The Arrow types that can be converted to the Pdf pyarrow storage type are:`,PI,Vy,IG="<li><code>pa.string()</code> - it must contain the “path” data</li> <li><code>pa.binary()</code> - it must contain the image bytes</li> <li><code>pa.struct({&quot;bytes&quot;: pa.binary()})</code></li> <li><code>pa.struct({&quot;path&quot;: pa.string()})</code></li> <li><code>pa.struct({&quot;bytes&quot;: pa.binary(), &quot;path&quot;: pa.string()})</code>  - order doesn’t matter</li> <li><code>pa.list(*)</code> - it must contain the pdf array data</li>",KI,Nc,xh,OI,qy,UG="Decode example pdf file into pdf data.",eU,zc,yh,tU,By,ZG="Encode example into a format for Arrow.",sU,Xc,jh,aU,Wy,RG="If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary.",j2,$h,$2,qa,vh,nU,Hy,FG="Checks if <code>fs</code> is a remote filesystem.",v2,wh,w2,Ba,Mh,lU,Ey,GG="Hasher that accepts python objects as inputs.",M2,kh,k2,uj,J2;return c=new fe({props:{title:"Main classes",local:"main-classes",headingTag:"h1"}}),m=new fe({props:{title:"DatasetInfo",local:"datasets.DatasetInfo",headingTag:"h2"}}),Ec=new k({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:`<strong>description</strong> (<code>str</code>) &#x2014;
A description of the dataset.`,name:"description"},{anchor:"datasets.DatasetInfo.citation",description:`<strong>citation</strong> (<code>str</code>) &#x2014;
A BibTeX citation of the dataset.`,name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:`<strong>homepage</strong> (<code>str</code>) &#x2014;
A URL to the official homepage for the dataset.`,name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:`<strong>license</strong> (<code>str</code>) &#x2014;
The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.`,name:"license"},{anchor:"datasets.DatasetInfo.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
The features used to specify the dataset&#x2019;s column types.`,name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:`<strong>post_processed</strong> (<code>PostProcessedInfo</code>, <em>optional</em>) &#x2014;
Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.`,name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:`<strong>supervised_keys</strong> (<code>SupervisedKeysData</code>, <em>optional</em>) &#x2014;
Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).`,name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:`<strong>builder_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the <code>GeneratorBasedBuilder</code> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.`,name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:`<strong>config_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the configuration derived from <a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>.`,name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:`<strong>version</strong> (<code>str</code> or <a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.Version">Version</a>, <em>optional</em>) &#x2014;
The version of the dataset.`,name:"version"},{anchor:"datasets.DatasetInfo.splits",description:`<strong>splits</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
The mapping between split name and metadata.`,name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:`<strong>download_checksums</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.`,name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:`<strong>download_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The size of the files to download to generate the dataset, in bytes.`,name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:`<strong>post_processing_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Size of the dataset in bytes after post-processing, if any.`,name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:`<strong>dataset_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The combined size in bytes of the Arrow tables for all splits.`,name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:`<strong>size_in_bytes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).`,name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.*config_kwargs",description:`*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to the <a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/info.py#L91"}}),Qc=new k({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"},{name:"storage_options",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014;
The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.from_directory.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.9.0</p>
						
					</div>`,name:"storage_options"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/info.py#L247"}}),sl=new C({props:{anchor:"datasets.DatasetInfo.from_directory.example",$$slots:{default:[c5]},$$scope:{ctx:v}}}),Yc=new k({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""},{name:"pretty_print",val:" = False"},{name:"storage_options",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014;
Destination directory.`,name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.write_to_directory.pretty_print",description:`<strong>pretty_print</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, the JSON will be pretty-printed with the indent level of 4.`,name:"pretty_print"},{anchor:"datasets.DatasetInfo.write_to_directory.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.9.0</p>
						
					</div>`,name:"storage_options"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/info.py#L186"}}),al=new C({props:{anchor:"datasets.DatasetInfo.write_to_directory.example",$$slots:{default:[p5]},$$scope:{ctx:v}}}),Lc=new fe({props:{title:"Dataset",local:"datasets.Dataset",headingTag:"h2"}}),Ac=new k({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L628"}}),Pc=new k({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.LargeList, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image, datasets.features.video.Video, datasets.features.pdf.Pdf, NoneType] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:`<strong>name</strong> (<code>str</code>) &#x2014;
Column name.`,name:"name"},{anchor:"datasets.Dataset.add_column.column",description:`<strong>column</strong> (<code>list</code> or <code>np.array</code>) &#x2014;
Column data to be added.`,name:"column"},{anchor:"datasets.Dataset.add_column.feature",description:`<strong>feature</strong> (<code>FeatureType</code> or <code>None</code>, defaults to <code>None</code>) &#x2014;
Column datatype.`,name:"feature"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L5762",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Kc=new YG({props:{version:"1.7"}}),nl=new C({props:{anchor:"datasets.Dataset.add_column.example",$$slots:{default:[d5]},$$scope:{ctx:v}}}),Oc=new k({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:`<strong>item</strong> (<code>dict</code>) &#x2014;
Item data to be added.`,name:"item"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L6019",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ep=new YG({props:{version:"1.7"}}),ll=new C({props:{anchor:"datasets.Dataset.add_item.example",$$slots:{default:[i5]},$$scope:{ctx:v}}}),tp=new k({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:`<strong>filename</strong> (<code>str</code>) &#x2014;
File name of the dataset.`,name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:`<strong>info</strong> (<code>DatasetInfo</code>, <em>optional</em>) &#x2014;
Dataset information, like description, citation, etc.`,name:"info"},{anchor:"datasets.Dataset.from_file.split",description:`<strong>split</strong> (<code>NamedSplit</code>, <em>optional</em>) &#x2014;
Name of the dataset split.`,name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:`<strong>indices_filename</strong> (<code>str</code>, <em>optional</em>) &#x2014;
File names of the indices.`,name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:`<strong>in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L711",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),sp=new k({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:`<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014;
Arrow buffer.`,name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:`<strong>info</strong> (<code>DatasetInfo</code>, <em>optional</em>) &#x2014;
Dataset information, like description, citation, etc.`,name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:`<strong>split</strong> (<code>NamedSplit</code>, <em>optional</em>) &#x2014;
Name of the dataset split.`,name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:`<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, <em>optional</em>) &#x2014;
Indices Arrow buffer.`,name:"indices_buffer"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L751",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ap=new k({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:`<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014;
Dataframe that contains the dataset.`,name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:`<strong>info</strong> (<code>DatasetInfo</code>, <em>optional</em>) &#x2014;
Dataset information, like description, citation, etc.`,name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:`<strong>split</strong> (<code>NamedSplit</code>, <em>optional</em>) &#x2014;
Name of the dataset split.`,name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to store the index as an additional column in the resulting Dataset.
The default of <code>None</code> will store the index as a column, except for <code>RangeIndex</code> which is stored as metadata only.
Use <code>preserve_index=True</code> to force it to be stored as a column.`,name:"preserve_index"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L783",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),cl=new C({props:{anchor:"datasets.Dataset.from_pandas.example",$$slots:{default:[m5]},$$scope:{ctx:v}}}),np=new k({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:`<strong>mapping</strong> (<code>Mapping</code>) &#x2014;
Mapping of strings to Arrays or Python lists.`,name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:`<strong>info</strong> (<code>DatasetInfo</code>, <em>optional</em>) &#x2014;
Dataset information, like description, citation, etc.`,name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:`<strong>split</strong> (<code>NamedSplit</code>, <em>optional</em>) &#x2014;
Name of the dataset split.`,name:"split"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L893",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),lp=new k({props:{name:"from_generator",anchor:"datasets.Dataset.from_generator",parameters:[{name:"generator",val:": typing.Callable"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"gen_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"split",val:": NamedSplit = NamedSplit('train')"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_generator.generator",description:`<strong>generator</strong> ( &#x2014;<code>Callable</code>):
A generator function that <code>yields</code> examples.`,name:"generator"},{anchor:"datasets.Dataset.from_generator.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.Dataset.from_generator.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014;
Directory to cache data.`,name:"cache_dir"},{anchor:"datasets.Dataset.from_generator.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.from_generator.gen_kwargs(dict,",description:`<strong>gen_kwargs(<code>dict</code>,</strong> <em>optional</em>) &#x2014;
Keyword arguments to be passed to the <code>generator</code> callable.
You can define a sharded dataset by passing the list of shards in <code>gen_kwargs</code> and setting <code>num_proc</code> greater than 1.`,name:"gen_kwargs(dict,"},{anchor:"datasets.Dataset.from_generator.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Number of processes when downloading and generating the dataset locally.
This is helpful if the dataset is made of multiple files. Multiprocessing is disabled by default.
If <code>num_proc</code> is greater than one, then all list values in <code>gen_kwargs</code> must be the same length. These values will be split between calls to the generator. The number of shards will be the minimum of the shortest list in <code>gen_kwargs</code> and <code>num_proc</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.7.0</p>
						
					</div>`,name:"num_proc"},{anchor:"datasets.Dataset.from_generator.split",description:`<strong>split</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, defaults to <code>Split.TRAIN</code>) &#x2014;
Split name to be assigned to the dataset.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.21.0</p>
						
					</div>`,name:"split"},{anchor:"datasets.Dataset.from_generator.*kwargs",description:`*<strong>*kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to :<code>GeneratorConfig</code>.`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1041",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),pl=new C({props:{anchor:"datasets.Dataset.from_generator.example",$$slots:{default:[h5]},$$scope:{ctx:v}}}),dl=new C({props:{anchor:"datasets.Dataset.from_generator.example-2",$$slots:{default:[u5]},$$scope:{ctx:v}}}),rp=new k({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1741"}}),il=new C({props:{anchor:"datasets.Dataset.data.example",$$slots:{default:[g5]},$$scope:{ctx:v}}}),op=new k({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1761"}}),ml=new C({props:{anchor:"datasets.Dataset.cache_files.example",$$slots:{default:[f5]},$$scope:{ctx:v}}}),cp=new k({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1779"}}),hl=new C({props:{anchor:"datasets.Dataset.num_columns.example",$$slots:{default:[b5]},$$scope:{ctx:v}}}),pp=new k({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1794"}}),ul=new C({props:{anchor:"datasets.Dataset.num_rows.example",$$slots:{default:[_5]},$$scope:{ctx:v}}}),dp=new k({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1811"}}),gl=new C({props:{anchor:"datasets.Dataset.column_names.example",$$slots:{default:[x5]},$$scope:{ctx:v}}}),ip=new k({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1826"}}),fl=new C({props:{anchor:"datasets.Dataset.shape.example",$$slots:{default:[y5]},$$scope:{ctx:v}}}),mp=new k({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
Column name (list all the column names with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.column_names">column_names</a>).`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1843",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>List of unique elements in the given column.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>list</code></p>
`}}),bl=new C({props:{anchor:"datasets.Dataset.unique.example",$$slots:{default:[j5]},$$scope:{ctx:v}}}),hp=new k({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"max_depth",val:" = 16"}],parametersDescription:[{anchor:"datasets.Dataset.flatten.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1949",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with flattened columns.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),_l=new C({props:{anchor:"datasets.Dataset.flatten.example",$$slots:{default:[$5]},$$scope:{ctx:v}}}),up=new k({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": typing.Optional[bool] = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"num_proc",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014;
New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. <code>str</code> &lt;-&gt; <code>ClassLabel</code> you should use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of examples per batch provided to cast.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code> then provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, defaults to <code>True</code> if caching is enabled) &#x2014;
If a cache file storing the current computation from <code>function</code>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1994",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with casted features.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),xl=new C({props:{anchor:"datasets.Dataset.cast.example",$$slots:{default:[v5]},$$scope:{ctx:v}}}),gp=new k({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.LargeList, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image, datasets.features.video.Video, datasets.features.pdf.Pdf]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
Column name.`,name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:`<strong>feature</strong> (<code>FeatureType</code>) &#x2014;
Target feature.`,name:"feature"},{anchor:"datasets.Dataset.cast_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2077",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),yl=new C({props:{anchor:"datasets.Dataset.cast_column.example",$$slots:{default:[w5]},$$scope:{ctx:v}}}),fp=new k({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, list[str]]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:`<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014;
Name of the column(s) to remove.`,name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2119",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),jl=new C({props:{anchor:"datasets.Dataset.remove_columns.example",$$slots:{default:[M5]},$$scope:{ctx:v}}}),bp=new k({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:`<strong>original_column_name</strong> (<code>str</code>) &#x2014;
Name of the column to rename.`,name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:`<strong>new_column_name</strong> (<code>str</code>) &#x2014;
New name for the column.`,name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2174",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with a renamed column.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),$l=new C({props:{anchor:"datasets.Dataset.rename_column.example",$$slots:{default:[k5]},$$scope:{ctx:v}}}),_p=new k({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": dict"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:`<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014;
A mapping of columns to rename to their new names`,name:"column_mapping"},{anchor:"datasets.Dataset.rename_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2240",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with renamed columns</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),vl=new C({props:{anchor:"datasets.Dataset.rename_columns.example",$$slots:{default:[J5]},$$scope:{ctx:v}}}),xp=new k({props:{name:"select_columns",anchor:"datasets.Dataset.select_columns",parameters:[{name:"column_names",val:": typing.Union[str, list[str]]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select_columns.column_names",description:`<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014;
Name of the column(s) to keep.`,name:"column_names"},{anchor:"datasets.Dataset.select_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The new fingerprint of the dataset after transform. If <code>None</code>,
the new fingerprint is computed using a hash of the previous
fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2307",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset object which only consists of
selected columns.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),wl=new C({props:{anchor:"datasets.Dataset.select_columns.example",$$slots:{default:[T5]},$$scope:{ctx:v}}}),yp=new k({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The name of the column to cast (list all the column names with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.column_names">column_names</a>)`,name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to include null values in the class labels. If <code>True</code>, the null values will be encoded as the <code>&quot;None&quot;</code> class label.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 1.14.2</p>
						
					</div>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1874"}}),Ml=new C({props:{anchor:"datasets.Dataset.class_encode_column.example",$$slots:{default:[D5]},$$scope:{ctx:v}}}),jp=new k({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2355"}}),kl=new C({props:{anchor:"datasets.Dataset.__len__.example",$$slots:{default:[C5]},$$scope:{ctx:v}}}),$p=new k({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2372"}}),vp=new k({props:{name:"iter",anchor:"datasets.Dataset.iter",parameters:[{name:"batch_size",val:": int"},{name:"drop_last_batch",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.iter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>) &#x2014; size of each batch to yield.",name:"batch_size"},{anchor:"datasets.Dataset.iter.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped`,name:"drop_last_batch"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2401"}}),wp=new k({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[list] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Either output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;jax&apos;, &apos;arrow&apos;, &apos;pandas&apos;, &apos;polars&apos;]</code>.
<code>None</code> means \`<strong>getitem</strong>&#x201C; returns python objects (default).`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Columns to format in the output.
<code>None</code> means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep un-formatted columns as well in the output (as python objects).`,name:"output_all_columns"},{anchor:"datasets.Dataset.formatted_as.*format_kwargs",description:`*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014;
Keywords arguments passed to the convert function like <code>np.array</code>, <code>torch.tensor</code> or <code>tensorflow.ragged.constant</code>.`,name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2445"}}),Mp=new k({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[list] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Either output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;jax&apos;, &apos;arrow&apos;, &apos;pandas&apos;, &apos;polars&apos;]</code>.
<code>None</code> means <code>__getitem__</code> returns python objects (default).`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Columns to format in the output.
<code>None</code> means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep un-formatted columns as well in the output (as python objects).`,name:"output_all_columns"},{anchor:"datasets.Dataset.set_format.*format_kwargs",description:`*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014;
Keywords arguments passed to the convert function like <code>np.array</code>, <code>torch.tensor</code> or <code>tensorflow.ragged.constant</code>.`,name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2477"}}),Tl=new C({props:{anchor:"datasets.Dataset.set_format.example",$$slots:{default:[I5]},$$scope:{ctx:v}}}),Dl=new C({props:{anchor:"datasets.Dataset.set_format.example-2",$$slots:{default:[U5]},$$scope:{ctx:v}}}),kp=new k({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[list] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, <em>optional</em>) &#x2014;
User-defined formatting transform, replaces the format defined by <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_format">set_format()</a>.
A formatting function is a callable that takes a batch (as a <code>dict</code>) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Columns to format in the output.
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep un-formatted columns as well in the output (as python objects).
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2585"}}),Cl=new C({props:{anchor:"datasets.Dataset.set_transform.example",$$slots:{default:[Z5]},$$scope:{ctx:v}}}),Jp=new k({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2556"}}),Il=new C({props:{anchor:"datasets.Dataset.reset_format.example",$$slots:{default:[R5]},$$scope:{ctx:v}}}),Tp=new k({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[list] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Either output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;jax&apos;, &apos;arrow&apos;, &apos;pandas&apos;, &apos;polars&apos;]</code>.
<code>None</code> means <code>__getitem__</code> returns python objects (default).`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Columns to format in the output.
<code>None</code> means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep un-formatted columns as well in the output (as python objects).`,name:"output_all_columns"},{anchor:"datasets.Dataset.with_format.*format_kwargs",description:`*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014;
Keywords arguments passed to the convert function like <code>np.array</code>, <code>torch.tensor</code> or <code>tensorflow.ragged.constant</code>.`,name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2628"}}),Ul=new C({props:{anchor:"datasets.Dataset.with_format.example",$$slots:{default:[F5]},$$scope:{ctx:v}}}),Dp=new k({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[list] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, <code>optional</code>) &#x2014;
User-defined formatting transform, replaces the format defined by <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_format">set_format()</a>.
A formatting function is a callable that takes a batch (as a <code>dict</code>) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, <code>optional</code>) &#x2014;
Columns to format in the output.
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep un-formatted columns as well in the output (as python objects).
If set to <code>True</code>, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2699"}}),Zl=new C({props:{anchor:"datasets.Dataset.with_transform.example",$$slots:{default:[G5]},$$scope:{ctx:v}}}),Cp=new k({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2775"}}),Ip=new k({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2785",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Number of removed files.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>int</code></p>
`}}),Fl=new C({props:{anchor:"datasets.Dataset.cleanup_cache_files.example",$$slots:{default:[N5]},$$scope:{ctx:v}}}),Up=new k({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": typing.Optional[bool] = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"},{name:"try_original_type",val:": typing.Optional[bool] = True"}],parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</code> if <code>batched=False</code> and <code>with_indices=False</code> and <code>with_rank=False</code></li>
<li><code>function(example: Dict[str, Any], *extra_args) -&gt; Dict[str, Any]</code> if <code>batched=False</code> and <code>with_indices=True</code> and/or <code>with_rank=True</code> (one extra arg for each)</li>
<li><code>function(batch: Dict[str, List]) -&gt; Dict[str, List]</code> if <code>batched=True</code> and <code>with_indices=False</code> and <code>with_rank=False</code></li>
<li><code>function(batch: Dict[str, List], *extra_args) -&gt; Dict[str, List]</code> if <code>batched=True</code> and <code>with_indices=True</code> and/or <code>with_rank=True</code> (one extra arg for each)</li>
</ul>
<p>For advanced usage, the function can also return a <code>pyarrow.Table</code>.
If the function is asynchronous, then <code>map</code> will run your function in parallel.
Moreover if your function returns nothing (<code>None</code>), then <code>map</code> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide example indices to <code>function</code>. Note that in this case the
signature of <code>function</code> should be <code>def function(example, idx[, rank]): ...</code>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide process rank to <code>function</code>. Note that in this case the
signature of <code>function</code> should be <code>def function(example[, idx], rank): ...</code>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<code>Optional[Union[str, List[str]]]</code>, defaults to <code>None</code>) &#x2014;
The columns to be passed into <code>function</code>
as positional arguments. If <code>None</code>, a <code>dict</code> mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:`<strong>batched</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide batch of examples to <code>function</code>.`,name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1000</code>) &#x2014;
Number of examples per batch provided to <code>function</code> if <code>batched=True</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>, provide the full dataset as a single batch to <code>function</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<code>Optional[Union[str, List[str]]]</code>, defaults to <code>None</code>) &#x2014;
Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <code>function</code>, i.e. if <code>function</code> is adding
columns with names in <code>remove_columns</code>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the dataset in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>Optional[bool]</code>, defaults to <code>True</code> if caching is enabled) &#x2014;
If a cache file storing the current computation from <code>function</code>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <code>map</code>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<code>Optional[datasets.Features]</code>, defaults to <code>None</code>) &#x2014;
Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:`<strong>disable_nullable</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Disallow null values in the table.`,name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:`<strong>fn_kwargs</strong> (<code>Dict</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Keyword arguments to be passed to <code>function</code>.`,name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Max number of processes when generating cache. Already cached shards are loaded sequentially.`,name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <code>cache_file_name</code> is specified, then this suffix
will be added at the end of the base name of each. Defaults to <code>&quot;_{rank:05d}_of_{num_proc:05d}&quot;</code>. For example, if <code>cache_file_name</code> is &#x201C;processed.arrow&#x201D;, then for
<code>rank=1</code> and <code>num_proc=4</code>, the resulting file would be <code>&quot;processed_00001_of_00004.arrow&quot;</code> for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Meaningful description to be displayed alongside with the progress bar while mapping examples.`,name:"desc"},{anchor:"datasets.Dataset.map.try_original_type",description:`<strong>try_original_type</strong> (<code>Optional[bool]</code>, defaults to <code>True</code>) &#x2014;
Try to keep the types of the original columns (e.g. int32 -&gt; int32).
Set to False if you want to always infer new types.`,name:"try_original_type"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L2832"}}),Gl=new C({props:{anchor:"datasets.Dataset.map.example",$$slots:{default:[z5]},$$scope:{ctx:v}}}),Zp=new k({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": typing.Optional[bool] = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>batched=False</code> and <code>with_indices=False</code> and <code>with_rank=False</code></li>
<li><code>function(example: Dict[str, Any], *extra_args) -&gt; bool</code> if <code>batched=False</code> and <code>with_indices=True</code> and/or <code>with_rank=True</code> (one extra arg for each)</li>
<li><code>function(batch: Dict[str, List]) -&gt; List[bool]</code> if <code>batched=True</code> and <code>with_indices=False</code> and <code>with_rank=False</code></li>
<li><code>function(batch: Dict[str, List], *extra_args) -&gt; List[bool]</code> if <code>batched=True</code> and <code>with_indices=True</code> and/or <code>with_rank=True</code> (one extra arg for each)</li>
</ul>
<p>If the function is asynchronous, then <code>filter</code> will run your function in parallel.
If no function is provided, defaults to an always <code>True</code> function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide example indices to <code>function</code>. Note that in this case the
signature of <code>function</code> should be <code>def function(example, idx[, rank]): ...</code>.`,name:"with_indices"},{anchor:"datasets.Dataset.filter.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide process rank to <code>function</code>. Note that in this case the
signature of <code>function</code> should be <code>def function(example[, idx], rank): ...</code>.`,name:"with_rank"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
The columns to be passed into <code>function</code> as
positional arguments. If <code>None</code>, a <code>dict</code> mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:`<strong>batched</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide batch of examples to <code>function</code>.`,name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1000</code>) &#x2014;
Number of examples per batch provided to <code>function</code> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>, provide the full dataset as a single batch to <code>function</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the dataset in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>Optional[bool]</code>, defaults to <code>True</code> if caching is enabled) &#x2014;
If a cache file storing the current computation from <code>function</code>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <code>map</code>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:`<strong>fn_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Keyword arguments to be passed to <code>function</code>.`,name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <code>cache_file_name</code> is specified, then this suffix will be added at the end of the base name of each.
For example, if <code>cache_file_name</code> is <code>&quot;processed.arrow&quot;</code>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <code>&quot;processed_00001_of_00004.arrow&quot;</code> for the default suffix (default
<code>_{rank:05d}_of_{num_proc:05d}</code>).`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Meaningful description to be displayed alongside with the progress bar while filtering examples.`,name:"desc"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L3637"}}),Nl=new C({props:{anchor:"datasets.Dataset.filter.example",$$slots:{default:[X5]},$$scope:{ctx:v}}}),Rp=new k({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:`<strong>indices</strong> (<code>range</code>, <code>list</code>, <code>iterable</code>, <code>ndarray</code> or <code>Series</code>) &#x2014;
Range, list or 1D-array of integer indices for indexing.
If the indices correspond to a contiguous range, the Arrow table is simply sliced.
However passing a list of indices that are not contiguous creates indices mapping, which is much less efficient,
but still faster than recreating an Arrow table made of the requested rows.`,name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the indices mapping in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <code>map</code>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L3859"}}),zl=new C({props:{anchor:"datasets.Dataset.select.example",$$slots:{default:[V5]},$$scope:{ctx:v}}}),Fp=new k({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column_names",val:": typing.Union[str, collections.abc.Sequence[str]]"},{name:"reverse",val:": typing.Union[bool, collections.abc.Sequence[bool]] = False"},{name:"null_placement",val:": str = 'at_end'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": typing.Optional[bool] = None"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.sort.column_names",description:`<strong>column_names</strong> (<code>Union[str, Sequence[str]]</code>) &#x2014;
Column name(s) to sort by.`,name:"column_names"},{anchor:"datasets.Dataset.sort.reverse",description:`<strong>reverse</strong> (<code>Union[bool, Sequence[bool]]</code>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, sort by descending order rather than ascending. If a single bool is provided,
the value is applied to the sorting of all column names. Otherwise a list of bools with the
same length and order as column_names must be provided.`,name:"reverse"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, defaults to <code>at_end</code>) &#x2014;
Put <code>None</code> values at the beginning if <code>at_start</code> or <code>first</code> or at the end if <code>at_end</code> or <code>last</code></p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 1.14.2</p>
						
					</div>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the sorted indices in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>Optional[bool]</code>, defaults to <code>True</code> if caching is enabled) &#x2014;
If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4196"}}),Xl=new C({props:{anchor:"datasets.Dataset.sort.example",$$slots:{default:[q5]},$$scope:{ctx:v}}}),Gp=new k({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": typing.Optional[bool] = None"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>) &#x2014;
A seed to initialize the default BitGenerator if <code>generator=None</code>.
If <code>None</code>, then fresh, unpredictable entropy will be pulled from the OS.
If an <code>int</code> or <code>array_like[ints]</code> is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, <em>optional</em>) &#x2014;
Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses <code>np.random.default_rng</code> (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014;
Keep the shuffled indices in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>Optional[bool]</code>, defaults to <code>True</code> if caching is enabled) &#x2014;
If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <code>map</code>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4324"}}),Vl=new C({props:{anchor:"datasets.Dataset.shuffle.example",$$slots:{default:[B5]},$$scope:{ctx:v}}}),ql=new C({props:{anchor:"datasets.Dataset.shuffle.example-2",$$slots:{default:[W5]},$$scope:{ctx:v}}}),Bl=new C({props:{anchor:"datasets.Dataset.shuffle.example-3",$$slots:{default:[H5]},$$scope:{ctx:v}}}),Np=new k({props:{name:"skip",anchor:"datasets.Dataset.skip",parameters:[{name:"n",val:": int"}],parametersDescription:[{anchor:"datasets.Dataset.skip.n",description:`<strong>n</strong> (<code>int</code>) &#x2014;
Number of elements to skip.`,name:"n"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4111"}}),Wl=new C({props:{anchor:"datasets.Dataset.skip.example",$$slots:{default:[E5]},$$scope:{ctx:v}}}),zp=new k({props:{name:"take",anchor:"datasets.Dataset.take",parameters:[{name:"n",val:": int"}],parametersDescription:[{anchor:"datasets.Dataset.take.n",description:`<strong>n</strong> (<code>int</code>) &#x2014;
Number of elements to take.`,name:"n"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4173"}}),Hl=new C({props:{anchor:"datasets.Dataset.take.example",$$slots:{default:[Q5]},$$scope:{ctx:v}}}),Xp=new k({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"stratify_by_column",val:": typing.Optional[str] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": typing.Optional[bool] = None"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, <em>optional</em>) &#x2014;
Size of the test split
If <code>float</code>, should be between <code>0.0</code> and <code>1.0</code> and represent the proportion of the dataset to include in the test split.
If <code>int</code>, represents the absolute number of test samples.
If <code>None</code>, the value is set to the complement of the train size.
If <code>train_size</code> is also <code>None</code>, it will be set to <code>0.25</code>.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, <em>optional</em>) &#x2014;
Size of the train split
If <code>float</code>, should be between <code>0.0</code> and <code>1.0</code> and represent the proportion of the dataset to include in the train split.
If <code>int</code>, represents the absolute number of train samples.
If <code>None</code>, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:`<strong>shuffle</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to shuffle the data before splitting.`,name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.stratify_by_column",description:`<strong>stratify_by_column</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The column name of labels to be used to perform stratified split of data.`,name:"stratify_by_column"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>) &#x2014;
A seed to initialize the default BitGenerator if <code>generator=None</code>.
If <code>None</code>, then fresh, unpredictable entropy will be pulled from the OS.
If an <code>int</code> or <code>array_like[ints]</code> is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, <em>optional</em>) &#x2014;
Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses <code>np.random.default_rng</code> (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the splits indices in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>Optional[bool]</code>, defaults to <code>True</code> if caching is enabled) &#x2014;
If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <code>map</code>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The new fingerprint of the train set after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The new fingerprint of the test set after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4456"}}),El=new C({props:{anchor:"datasets.Dataset.train_test_split.example",$$slots:{default:[Y5]},$$scope:{ctx:v}}}),Vp=new k({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = True"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:`<strong>num_shards</strong> (<code>int</code>) &#x2014;
How many shards to split the dataset into.`,name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014;
Which shard to select and return.`,name:"index"},{anchor:"datasets.Dataset.shard.contiguous",description:`<strong>contiguous</strong> &#x2014; (<code>bool</code>, defaults to <code>True</code>):
Whether to select contiguous blocks of indices for shards.`,name:"contiguous"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the dataset in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
This only concerns the indices mapping.
Number of indices per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <code>map</code>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4739"}}),Ql=new C({props:{anchor:"datasets.Dataset.shard.example",$$slots:{default:[L5]},$$scope:{ctx:v}}}),qp=new k({props:{name:"repeat",anchor:"datasets.Dataset.repeat",parameters:[{name:"num_times",val:": int"}],parametersDescription:[{anchor:"datasets.Dataset.repeat.num_times",description:`<strong>num_times</strong> (<code>int</code>) &#x2014;
Number of times to repeat the dataset.`,name:"num_times"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4141"}}),Yl=new C({props:{anchor:"datasets.Dataset.repeat.example",$$slots:{default:[S5]},$$scope:{ctx:v}}}),Bp=new k({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"shuffle",val:": bool = False"},{name:"collate_fn",val:": typing.Optional[typing.Callable] = None"},{name:"drop_remainder",val:": bool = False"},{name:"collate_fn_args",val:": typing.Optional[dict[str, typing.Any]] = None"},{name:"label_cols",val:": typing.Union[str, list[str], NoneType] = None"},{name:"prefetch",val:": bool = True"},{name:"num_workers",val:": int = 0"},{name:"num_test_batches",val:": int = 20"}],parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Size of batches to load from the dataset. Defaults to <code>None</code>, which implies that the dataset won&#x2019;t be
batched, but the returned dataset can be batched later with <code>tf_dataset.batch(batch_size)</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>, <em>optional</em>) &#x2014;
Dataset column(s) to load in the <code>tf.data.Dataset</code>.
Column names that are created by the <code>collate_fn</code> and that do not exist in the original dataset can be used.`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.shuffle(bool,",description:`<strong>shuffle(<code>bool</code>,</strong> defaults to <code>False</code>) &#x2014;
Shuffle the dataset order when loading. Recommended <code>True</code> for training, <code>False</code> for
validation/evaluation.`,name:"shuffle(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> defaults to <code>False</code>) &#x2014;
Drop the last incomplete batch when loading. Ensures
that all batches yielded by the dataset will have the same length on the batch dimension.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn(Callable,",description:`<strong>collate_fn(<code>Callable</code>,</strong> <em>optional</em>) &#x2014;
A function or callable object (such as a <code>DataCollator</code>) that will collate
lists of samples into a batch.`,name:"collate_fn(Callable,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
An optional <code>dict</code> of keyword arguments to be passed to the
<code>collate_fn</code>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, defaults to <code>None</code>) &#x2014;
Dataset column(s) to load as labels.
Note that many models compute loss internally rather than letting Keras do it, in which case
passing the labels here is optional, as long as they&#x2019;re in the input <code>columns</code>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"},{anchor:"datasets.Dataset.to_tf_dataset.num_workers",description:`<strong>num_workers</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Number of workers to use for loading the dataset.`,name:"num_workers"},{anchor:"datasets.Dataset.to_tf_dataset.num_test_batches",description:`<strong>num_test_batches</strong> (<code>int</code>, defaults to <code>20</code>) &#x2014;
Number of batches to use to infer the output signature of the dataset.
The higher this number, the more accurate the signature will be, but the longer it will take to
create the dataset.`,name:"num_test_batches"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L326",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>tf.data.Dataset</code></p>
`}}),Ll=new C({props:{anchor:"datasets.Dataset.to_tf_dataset.example",$$slots:{default:[A5]},$$scope:{ctx:v}}}),Wp=new k({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"config_name",val:": str = 'default'"},{name:"set_default",val:": typing.Optional[bool] = None"},{name:"split",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"commit_description",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"create_pr",val:": typing.Optional[bool] = False"},{name:"max_shard_size",val:": typing.Union[str, int, NoneType] = None"},{name:"num_shards",val:": typing.Optional[int] = None"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.config_name",description:`<strong>config_name</strong> (<code>str</code>, defaults to &#x201C;default&#x201D;) &#x2014;
The configuration name (or subset) of a dataset. Defaults to &#x201C;default&#x201D;.`,name:"config_name"},{anchor:"datasets.Dataset.push_to_hub.set_default",description:`<strong>set_default</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to set this configuration as the default one. Otherwise, the default configuration is the one
named &#x201C;default&#x201D;.`,name:"set_default"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <code>self.split</code>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.data_dir",description:`<strong>data_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Directory name that will contain the uploaded data files. Defaults to the <code>config_name</code> if different
from &#x201C;default&#x201D;, else &#x201C;data&#x201D;.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.17.0</p>
						
					</div>`,name:"data_dir"},{anchor:"datasets.Dataset.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload dataset&quot;</code>.`,name:"commit_message"},{anchor:"datasets.Dataset.push_to_hub.commit_description",description:`<strong>commit_description</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Description of the commit that will be created.
Additionally, description of the PR if a PR is created (<code>create_pr</code> is True).</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.16.0</p>
						
					</div>`,name:"commit_description"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to make the repo private. If <code>None</code> (default), the repo will be public unless the
organization&#x2019;s default is private. This value is ignored if the repo already exists.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Branch to push the uploaded files to. Defaults to the <code>&quot;main&quot;</code> branch.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.15.0</p>
						
					</div>`,name:"revision"},{anchor:"datasets.Dataset.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to create a PR with the uploaded files or directly commit.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.15.0</p>
						
					</div>`,name:"create_pr"},{anchor:"datasets.Dataset.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;500MB&quot;</code>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by
a unit (like <code>&quot;5MB&quot;</code>).`,name:"max_shard_size"},{anchor:"datasets.Dataset.push_to_hub.num_shards",description:`<strong>num_shards</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of shards to write. By default, the number of shards depends on <code>max_shard_size</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"num_shards"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Image">Image</a>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L5412",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>huggingface_hub.CommitInfo</p>
`}}),Sl=new C({props:{anchor:"datasets.Dataset.push_to_hub.example",$$slots:{default:[P5]},$$scope:{ctx:v}}}),Al=new C({props:{anchor:"datasets.Dataset.push_to_hub.example-2",$$slots:{default:[K5]},$$scope:{ctx:v}}}),Pl=new C({props:{anchor:"datasets.Dataset.push_to_hub.example-3",$$slots:{default:[O5]},$$scope:{ctx:v}}}),Hp=new k({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": typing.Union[str, bytes, os.PathLike]"},{name:"max_shard_size",val:": typing.Union[str, int, NoneType] = None"},{name:"num_shards",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"storage_options",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>path-like</code>) &#x2014;
Path (e.g. <code>dataset/train</code>) or remote URI (e.g. <code>s3://my-bucket/dataset/train</code>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;500MB&quot;</code>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <code>&quot;50MB&quot;</code>).`,name:"max_shard_size"},{anchor:"datasets.Dataset.save_to_disk.num_shards",description:`<strong>num_shards</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of shards to write. By default the number of shards depends on <code>max_shard_size</code> and <code>num_proc</code>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"num_shards"},{anchor:"datasets.Dataset.save_to_disk.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of processes when downloading and generating the dataset locally.
Multiprocessing is disabled by default.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"num_proc"},{anchor:"datasets.Dataset.save_to_disk.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"storage_options"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1423"}}),Kl=new C({props:{anchor:"datasets.Dataset.save_to_disk.example",$$slots:{default:[eN]},$$scope:{ctx:v}}}),Ep=new k({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": typing.Union[str, bytes, os.PathLike]"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"},{name:"storage_options",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>path-like</code>) &#x2014;
Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g. <code>&quot;s3//my-bucket/dataset/train&quot;</code>)
of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>None</code>) &#x2014;
Whether to copy the dataset in-memory. If <code>None</code>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<code>datasets.config.IN_MEMORY_MAX_SIZE</code> to nonzero. See more details in the
<a href="../cache#improve-performance">improve performance</a> section.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.load_from_disk.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"storage_options"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1620",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<ul>
<li>If <code>dataset_path</code> is a path of a dataset directory, the dataset requested.</li>
<li>If <code>dataset_path</code> is a path of a dataset dict directory, a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ol=new C({props:{anchor:"datasets.Dataset.load_from_disk.example",$$slots:{default:[tN]},$$scope:{ctx:v}}}),Qp=new k({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the dataset in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, <em>optional</em>, default <code>None</code>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <code>map</code>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<code>Optional[datasets.Features]</code>, defaults to <code>None</code>) &#x2014;
Use a specific <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a> to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:`<strong>disable_nullable</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Allow null values in the table.`,name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <code>None</code>) &#x2014;
Max number of processes when generating cache. Already cached shards are loaded sequentially`,name:"num_proc"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The new fingerprint of the dataset after transform.
If <code>None</code>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L3780"}}),Yp=new k({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"storage_options",val:": typing.Optional[dict] = None"},{name:"**to_csv_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:`<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014;
Either a path to a file (e.g. <code>file.csv</code>), a remote URI (e.g. <code>hf://datasets/username/my_dataset_name/data.csv</code>),
or a BinaryIO, where the dataset will be saved to in the specified format.`,name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_csv.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.19.0</p>
						
					</div>`,name:"storage_options"},{anchor:"datasets.Dataset.to_csv.*to_csv_kwargs",description:`*<strong>*to_csv_kwargs</strong> (additional keyword arguments) &#x2014;
Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html" rel="nofollow"><code>pandas.DataFrame.to_csv</code></a>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Changed in 2.10.0</p>
						
<p>Now, <code>index</code> defaults to <code>False</code> if not specified.</p>
<p>If you would like to write the index, pass <code>index=True</code> and also set a name for the index column by
passing <code>index_label</code>.</p>

					</div>`,name:"*to_csv_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4815",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The number of characters or bytes written.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>int</code></p>
`}}),tr=new C({props:{anchor:"datasets.Dataset.to_csv.example",$$slots:{default:[sN]},$$scope:{ctx:v}}}),Lp=new k({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014;
Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasets once).`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The size (number of rows) of the batches if <code>batched</code> is <code>True</code>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4976",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>pandas.DataFrame</code> or <code>Iterator[pandas.DataFrame]</code></p>
`}}),sr=new C({props:{anchor:"datasets.Dataset.to_pandas.example",$$slots:{default:[aN]},$$scope:{ctx:v}}}),Sp=new k({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <code>True</code>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4874",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict</code> or <code>Iterator[dict]</code></p>
`}}),ar=new C({props:{anchor:"datasets.Dataset.to_dict.example",$$slots:{default:[nN]},$$scope:{ctx:v}}}),Ap=new k({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"storage_options",val:": typing.Optional[dict] = None"},{name:"**to_json_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:`<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014;
Either a path to a file (e.g. <code>file.json</code>), a remote URI (e.g. <code>hf://datasets/username/my_dataset_name/data.json</code>),
or a BinaryIO, where the dataset will be saved to in the specified format.`,name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of processes for multiprocessing. By default, it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.19.0</p>
						
					</div>`,name:"storage_options"},{anchor:"datasets.Dataset.to_json.*to_json_kwargs",description:`*<strong>*to_json_kwargs</strong> (additional keyword arguments) &#x2014;
Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow"><code>pandas.DataFrame.to_json</code></a>.
Default arguments are <code>lines=True</code> and \`orient=&#x201C;records&#x201D;.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Changed in 2.11.0</p>
						
<p>The parameter <code>index</code> defaults to <code>False</code> if <code>orient</code> is <code>&quot;split&quot;</code> or <code>&quot;table&quot;</code>.</p>
<p>If you would like to write the index, pass <code>index=True</code>.</p>

					</div>`,name:"*to_json_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L4914",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The number of characters or bytes written.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>int</code></p>
`}}),nr=new C({props:{anchor:"datasets.Dataset.to_json.example",$$slots:{default:[lN]},$$scope:{ctx:v}}}),Pp=new k({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"storage_options",val:": typing.Optional[dict] = None"},{name:"**parquet_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:`<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014;
Either a path to a file (e.g. <code>file.parquet</code>), a remote URI (e.g. <code>hf://datasets/username/my_dataset_name/data.parquet</code>),
or a BinaryIO, where the dataset will be saved to in the specified format.`,name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_parquet.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.19.0</p>
						
					</div>`,name:"storage_options"},{anchor:"datasets.Dataset.to_parquet.*parquet_writer_kwargs",description:`*<strong>*parquet_writer_kwargs</strong> (additional keyword arguments) &#x2014;
Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>.`,name:"*parquet_writer_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L5075",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The number of characters or bytes written.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>int</code></p>
`}}),lr=new C({props:{anchor:"datasets.Dataset.to_parquet.example",$$slots:{default:[rN]},$$scope:{ctx:v}}}),Kp=new k({props:{name:"to_sql",anchor:"datasets.Dataset.to_sql",parameters:[{name:"name",val:": str"},{name:"con",val:": typing.Union[str, ForwardRef('sqlalchemy.engine.Connection'), ForwardRef('sqlalchemy.engine.Engine'), ForwardRef('sqlite3.Connection')]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**sql_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_sql.name",description:`<strong>name</strong> (<code>str</code>) &#x2014;
Name of SQL table.`,name:"name"},{anchor:"datasets.Dataset.to_sql.con",description:`<strong>con</strong> (<code>str</code> or <code>sqlite3.Connection</code> or <code>sqlalchemy.engine.Connection</code> or <code>sqlalchemy.engine.Connection</code>) &#x2014;
A <a href="https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls" rel="nofollow">URI string</a> or a SQLite3/SQLAlchemy connection object used to write to a database.`,name:"con"},{anchor:"datasets.Dataset.to_sql.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_sql.*sql_writer_kwargs",description:`*<strong>*sql_writer_kwargs</strong> (additional keyword arguments) &#x2014;
Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_sql.html" rel="nofollow"><code>pandas.DataFrame.to_sql</code></a>.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Changed in 2.11.0</p>
						
<p>Now, <code>index</code> defaults to <code>False</code> if not specified.</p>
<p>If you would like to write the index, pass <code>index=True</code> and also set a name for the index column by
passing <code>index_label</code>.</p>

					</div>`,name:"*sql_writer_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L5114",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The number of records written.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>int</code></p>
`}}),rr=new C({props:{anchor:"datasets.Dataset.to_sql.example",$$slots:{default:[oN]},$$scope:{ctx:v}}}),Op=new k({props:{name:"to_iterable_dataset",anchor:"datasets.Dataset.to_iterable_dataset",parameters:[{name:"num_shards",val:": typing.Optional[int] = 1"}],parametersDescription:[{anchor:"datasets.Dataset.to_iterable_dataset.num_shards",description:`<strong>num_shards</strong> (<code>int</code>, default to <code>1</code>) &#x2014;
Number of shards to define when instantiating the iterable dataset. This is especially useful for big datasets to be able to shuffle properly,
and also to enable fast parallel loading using a PyTorch DataLoader or in distributed setups for example.
Shards are defined using <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.shard">datasets.Dataset.shard()</a>: it simply slices the data without writing anything on disk.`,name:"num_shards"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L5206",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset"
>datasets.IterableDataset</a></p>
`}}),or=new C({props:{anchor:"datasets.Dataset.to_iterable_dataset.example",$$slots:{default:[cN]},$$scope:{ctx:v}}}),cr=new C({props:{anchor:"datasets.Dataset.to_iterable_dataset.example-2",$$slots:{default:[pN]},$$scope:{ctx:v}}}),pr=new C({props:{anchor:"datasets.Dataset.to_iterable_dataset.example-3",$$slots:{default:[dN]},$$scope:{ctx:v}}}),dr=new C({props:{anchor:"datasets.Dataset.to_iterable_dataset.example-4",$$slots:{default:[iN]},$$scope:{ctx:v}}}),ir=new C({props:{anchor:"datasets.Dataset.to_iterable_dataset.example-5",$$slots:{default:[mN]},$$scope:{ctx:v}}}),mr=new C({props:{anchor:"datasets.Dataset.to_iterable_dataset.example-6",$$slots:{default:[hN]},$$scope:{ctx:v}}}),hr=new C({props:{anchor:"datasets.Dataset.to_iterable_dataset.example-7",$$slots:{default:[uN]},$$scope:{ctx:v}}}),ed=new k({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"batch_size",val:": int = 1000"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The <code>index_name</code>/identifier of the index.
This is the <code>index_name</code> that is used to call <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">get_nearest_examples()</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.search">search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (<code>Union[int, List[int]]</code>, <em>optional</em>) &#x2014;
If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (<code>str</code>, <em>optional</em>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Type of metric. Ex: <code>faiss.METRIC_INNER_PRODUCT</code> or <code>faiss.METRIC_L2</code>.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (<code>faiss.Index</code>, <em>optional</em>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Size of the batch to use while adding vectors to the <code>FaissIndex</code>. Default value is <code>1000</code>.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"batch_size"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (<code>data-type</code>) &#x2014;
The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L5812"}}),ur=new C({props:{anchor:"datasets.Dataset.add_faiss_index.example",$$slots:{default:[gN]},$$scope:{ctx:v}}}),td=new k({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": <built-in function array>"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"batch_size",val:": int = 1000"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The <code>index_name</code>/identifier of the index.
This is the <code>index_name</code> that is used to call <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">get_nearest_examples()</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.search">search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>, <em>optional</em>) &#x2014;
If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (<code>str</code>, <em>optional</em>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Type of metric. Ex: <code>faiss.faiss.METRIC_INNER_PRODUCT</code> or <code>faiss.METRIC_L2</code>.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (<code>faiss.Index</code>, <em>optional</em>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Size of the batch to use while adding vectors to the FaissIndex. Default value is 1000.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"batch_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:`<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014;
The dtype of the numpy arrays that are indexed. Default is np.float32.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L5892"}}),sd=new k({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"storage_options",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <code>.get_nearest</code> or <code>.search</code>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk or remote URI (e.g. <code>&quot;s3://my-bucket/index.faiss&quot;</code>).",name:"file"},{anchor:"datasets.Dataset.save_faiss_index.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.11.0</p>
						
					</div>`,name:"storage_options"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/search.py#L535"}}),ad=new k({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, list[int], NoneType] = None"},{name:"storage_options",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <code>.get_nearest</code> or <code>.search</code>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk or remote URI (e.g. <code>&quot;s3://my-bucket/index.faiss&quot;</code>).",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.load_faiss_index.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.11.0</p>
						
					</div>`,name:"storage_options"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/search.py#L553"}}),nd=new k({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The <code>index_name</code>/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">get_nearest_examples()</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.search">search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (<code>str</code>, <em>optional</em>, defaults to <code>localhost</code>) &#x2014;
Host of where ElasticSearch is running.`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (<code>str</code>, <em>optional</em>, defaults to <code>9200</code>) &#x2014;
Port of where ElasticSearch is running.`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (<code>elasticsearch.Elasticsearch</code>, <em>optional</em>) &#x2014;
The elasticsearch client used to create the index if host and port are <code>None</code>.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L5951"}}),fr=new C({props:{anchor:"datasets.Dataset.add_elasticsearch_index.example",$$slots:{default:[fN]},$$scope:{ctx:v}}}),ld=new k({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The <code>index_name</code>/identifier of the index. This is the index name that is used to call <code>get_nearest</code> or <code>search</code>.`,name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (<code>str</code>) &#x2014;
The name of elasticsearch index to load.`,name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (<code>str</code>, <em>optional</em>, defaults to <code>localhost</code>) &#x2014;
Host of where ElasticSearch is running.`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (<code>str</code>, <em>optional</em>, defaults to <code>9200</code>) &#x2014;
Port of where ElasticSearch is running.`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (<code>elasticsearch.Elasticsearch</code>, <em>optional</em>) &#x2014;
The elasticsearch client used to create the index if host and port are <code>None</code>.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/search.py#L637"}}),rd=new k({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/search.py#L438"}}),od=new k({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/search.py#L442",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>BaseIndex</code></p>
`}}),cd=new k({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The <code>index_name</code>/identifier of the index.`,name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/search.py#L684"}}),pd=new k({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The name/identifier of the index.`,name:"index_name"},{anchor:"datasets.Dataset.search.query",description:`<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014;
The query as a string if <code>index_name</code> is a text index or as a numpy array if <code>index_name</code> is a vector index.`,name:"query"},{anchor:"datasets.Dataset.search.k",description:`<strong>k</strong> (<code>int</code>) &#x2014;
The number of examples to retrieve.`,name:"k"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/search.py#L693",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A tuple of <code>(scores, indices)</code> where:</p>
<ul>
<li><strong>scores</strong> (<code>List[List[float]</code>): the retrieval scores from either FAISS (<code>IndexFlatL2</code> by default) or ElasticSearch of the retrieved examples</li>
<li><strong>indices</strong> (<code>List[List[int]]</code>): the indices of the retrieved examples</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>(scores, indices)</code></p>
`}}),dd=new k({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[list[str], <built-in function array>]"},{name:"k",val:": int = 10"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The <code>index_name</code>/identifier of the index.`,name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:`<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014;
The queries as a list of strings if <code>index_name</code> is a text index or as a numpy array if <code>index_name</code> is a vector index.`,name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:`<strong>k</strong> (<code>int</code>) &#x2014;
The number of examples to retrieve per query.`,name:"k"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/search.py#L713",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A tuple of <code>(total_scores, total_indices)</code> where:</p>
<ul>
<li><strong>total_scores</strong> (<code>List[List[float]</code>): the retrieval scores from either FAISS (<code>IndexFlatL2</code> by default) or ElasticSearch of the retrieved examples per query</li>
<li><strong>total_indices</strong> (<code>List[List[int]]</code>): the indices of the retrieved examples per query</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>(total_scores, total_indices)</code></p>
`}}),id=new k({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.`,name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:`<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014;
The query as a string if <code>index_name</code> is a text index or as a numpy array if <code>index_name</code> is a vector index.`,name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:`<strong>k</strong> (<code>int</code>) &#x2014;
The number of examples to retrieve.`,name:"k"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/search.py#L735",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A tuple of <code>(scores, examples)</code> where:</p>
<ul>
<li><strong>scores</strong> (<code>List[float]</code>): the retrieval scores from either FAISS (<code>IndexFlatL2</code> by default) or ElasticSearch of the retrieved examples</li>
<li><strong>examples</strong> (<code>dict</code>): the retrieved examples</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>(scores, examples)</code></p>
`}}),md=new k({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[list[str], <built-in function array>]"},{name:"k",val:": int = 10"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The <code>index_name</code>/identifier of the index.`,name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:`<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014;
The queries as a list of strings if <code>index_name</code> is a text index or as a numpy array if <code>index_name</code> is a vector index.`,name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:`<strong>k</strong> (<code>int</code>) &#x2014;
The number of examples to retrieve per query.`,name:"k"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/search.py#L759",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A tuple of <code>(total_scores, total_examples)</code> where:</p>
<ul>
<li><strong>total_scores</strong> (<code>List[List[float]</code>): the retrieval scores from either FAISS (<code>IndexFlatL2</code> by default) or ElasticSearch of the retrieved examples per query</li>
<li><strong>total_examples</strong> (<code>List[dict]</code>): the retrieved examples per query</li>
</ul>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>(total_scores, total_examples)</code></p>
`}}),hd=new k({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L162"}}),ud=new k({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L167"}}),gd=new k({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L172"}}),fd=new k({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L176"}}),bd=new k({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L180"}}),_d=new k({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L184"}}),xd=new k({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L188"}}),yd=new k({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L192"}}),jd=new k({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L196"}}),$d=new k({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L704"}}),vd=new k({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L204"}}),wd=new k({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L208"}}),Md=new k({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L212"}}),kd=new k({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L216"}}),Jd=new k({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L220"}}),Td=new k({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, list[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:`<strong>path_or_paths</strong> (<code>path-like</code> or list of <code>path-like</code>) &#x2014;
Path(s) of the CSV file(s).`,name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:`<strong>split</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, <em>optional</em>) &#x2014;
Split name to be assigned to the dataset.`,name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014;
Directory to cache data.`,name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.from_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Number of processes when downloading and generating the dataset locally.
This is helpful if the dataset is made of multiple files. Multiprocessing is disabled by default.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"num_proc"},{anchor:"datasets.Dataset.from_csv.*kwargs",description:`*<strong>*kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L988",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Jr=new C({props:{anchor:"datasets.Dataset.from_csv.example",$$slots:{default:[bN]},$$scope:{ctx:v}}}),Dd=new k({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, list[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:`<strong>path_or_paths</strong> (<code>path-like</code> or list of <code>path-like</code>) &#x2014;
Path(s) of the JSON or JSON Lines file(s).`,name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:`<strong>split</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, <em>optional</em>) &#x2014;
Split name to be assigned to the dataset.`,name:"split"},{anchor:"datasets.Dataset.from_json.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014;
Directory to cache data.`,name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:`<strong>field</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Field name of the JSON file where the dataset is contained in.`,name:"field"},{anchor:"datasets.Dataset.from_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em> defaults to <code>None</code>) &#x2014;
Number of processes when downloading and generating the dataset locally.
This is helpful if the dataset is made of multiple files. Multiprocessing is disabled by default.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"num_proc"},{anchor:"datasets.Dataset.from_json.*kwargs",description:`*<strong>*kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1116",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Tr=new C({props:{anchor:"datasets.Dataset.from_json.example",$$slots:{default:[_N]},$$scope:{ctx:v}}}),Cd=new k({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, list[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[list[str]] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:`<strong>path_or_paths</strong> (<code>path-like</code> or list of <code>path-like</code>) &#x2014;
Path(s) of the Parquet file(s).`,name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:`<strong>split</strong> (<code>NamedSplit</code>, <em>optional</em>) &#x2014;
Split name to be assigned to the dataset.`,name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:`<strong>features</strong> (<code>Features</code>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014;
Directory to cache data.`,name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
If not <code>None</code>, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.`,name:"columns"},{anchor:"datasets.Dataset.from_parquet.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Number of processes when downloading and generating the dataset locally.
This is helpful if the dataset is made of multiple files. Multiprocessing is disabled by default.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"num_proc"},{anchor:"datasets.Dataset.from_parquet.*kwargs",description:`*<strong>*kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1173",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Dr=new C({props:{anchor:"datasets.Dataset.from_parquet.example",$$slots:{default:[xN]},$$scope:{ctx:v}}}),Id=new k({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, list[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:`<strong>path_or_paths</strong> (<code>path-like</code> or list of <code>path-like</code>) &#x2014;
Path(s) of the text file(s).`,name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:`<strong>split</strong> (<code>NamedSplit</code>, <em>optional</em>) &#x2014;
Split name to be assigned to the dataset.`,name:"split"},{anchor:"datasets.Dataset.from_text.features",description:`<strong>features</strong> (<code>Features</code>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014;
Directory to cache data.`,name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.from_text.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Number of processes when downloading and generating the dataset locally.
This is helpful if the dataset is made of multiple files. Multiprocessing is disabled by default.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"num_proc"},{anchor:"datasets.Dataset.from_text.*kwargs",description:`*<strong>*kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to <code>TextConfig</code>.`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1232",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Cr=new C({props:{anchor:"datasets.Dataset.from_text.example",$$slots:{default:[yN]},$$scope:{ctx:v}}}),Ud=new k({props:{name:"from_sql",anchor:"datasets.Dataset.from_sql",parameters:[{name:"sql",val:": typing.Union[str, ForwardRef('sqlalchemy.sql.Selectable')]"},{name:"con",val:": typing.Union[str, ForwardRef('sqlalchemy.engine.Connection'), ForwardRef('sqlalchemy.engine.Engine'), ForwardRef('sqlite3.Connection')]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_sql.sql",description:`<strong>sql</strong> (<code>str</code> or <code>sqlalchemy.sql.Selectable</code>) &#x2014;
SQL query to be executed or a table name.`,name:"sql"},{anchor:"datasets.Dataset.from_sql.con",description:`<strong>con</strong> (<code>str</code> or <code>sqlite3.Connection</code> or <code>sqlalchemy.engine.Connection</code> or <code>sqlalchemy.engine.Connection</code>) &#x2014;
A <a href="https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls" rel="nofollow">URI string</a> used to instantiate a database connection or a SQLite3/SQLAlchemy connection object.`,name:"con"},{anchor:"datasets.Dataset.from_sql.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.Dataset.from_sql.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014;
Directory to cache data.`,name:"cache_dir"},{anchor:"datasets.Dataset.from_sql.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.Dataset.from_sql.*kwargs",description:`*<strong>*kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to <code>SqlConfig</code>.`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L1347",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ir=new C({props:{anchor:"datasets.Dataset.from_sql.example",$$slots:{default:[jN]},$$scope:{ctx:v}}}),Ur=new cU({props:{$$slots:{default:[$N]},$$scope:{ctx:v}}}),Zd=new k({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": dict"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L6073"}}),Zr=new C({props:{anchor:"datasets.Dataset.align_labels_with_mapping.example",$$slots:{default:[vN]},$$scope:{ctx:v}}}),Rd=new k({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": list"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:`<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014;
List of Datasets to concatenate.`,name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:`<strong>info</strong> (<code>DatasetInfo</code>, <em>optional</em>) &#x2014;
Dataset information, like description, citation, etc.`,name:"info"},{anchor:"datasets.concatenate_datasets.split",description:`<strong>split</strong> (<code>NamedSplit</code>, <em>optional</em>) &#x2014;
Name of the dataset split.`,name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, defaults to <code>0</code>) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 1.6.0</p>
						
					</div>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/combine.py#L158"}}),Rr=new C({props:{anchor:"datasets.concatenate_datasets.example",$$slots:{default:[wN]},$$scope:{ctx:v}}}),Fd=new k({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": list"},{name:"probabilities",val:": typing.Optional[list[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"stopping_strategy",val:": typing.Literal['first_exhausted', 'all_exhausted'] = 'first_exhausted'"}],parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:`<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014;
List of datasets to interleave.`,name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
If specified, the new dataset is constructed by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The random seed used to choose a source for each example.`,name:"seed"},{anchor:"datasets.interleave_datasets.info",description:`<strong>info</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, <em>optional</em>) &#x2014;
Dataset information, like description, citation, etc.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"info"},{anchor:"datasets.interleave_datasets.split",description:`<strong>split</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, <em>optional</em>) &#x2014;
Name of the dataset split.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"split"},{anchor:"datasets.interleave_datasets.stopping_strategy",description:`<strong>stopping_strategy</strong> (<code>str</code>, defaults to <code>first_exhausted</code>) &#x2014;
Two strategies are proposed right now, <code>first_exhausted</code> and <code>all_exhausted</code>.
By default, <code>first_exhausted</code> is an undersampling strategy, i.e the dataset construction is stopped as soon as one dataset has ran out of samples.
If the strategy is <code>all_exhausted</code>,  we use an oversampling strategy, i.e the dataset construction is stopped as soon as every samples of every dataset has been added at least once.
Note that if the strategy is <code>all_exhausted</code>, the interleaved dataset size can get enormous:<ul>
<li>with no probabilities, the resulting dataset will have <code>max_length_datasets*nb_dataset</code> samples.</li>
<li>with given probabilities, the resulting dataset will have more samples if some datasets have really low probability of visiting.</li>
</ul>`,name:"stopping_strategy"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/combine.py#L18",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Return type depends on the input <code>datasets</code>
parameter. <code>Dataset</code> if the input is a list of <code>Dataset</code>, <code>IterableDataset</code> if the input is a list of
<code>IterableDataset</code>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Fr=new C({props:{anchor:"datasets.interleave_datasets.example",$$slots:{default:[MN]},$$scope:{ctx:v}}}),Gd=new k({props:{name:"datasets.distributed.split_dataset_by_node",anchor:"datasets.distributed.split_dataset_by_node",parameters:[{name:"dataset",val:": ~DatasetType"},{name:"rank",val:": int"},{name:"world_size",val:": int"}],parametersDescription:[{anchor:"datasets.distributed.split_dataset_by_node.dataset",description:`<strong>dataset</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset">Dataset</a> or <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset">IterableDataset</a>) &#x2014;
The dataset to split by node.`,name:"dataset"},{anchor:"datasets.distributed.split_dataset_by_node.rank",description:`<strong>rank</strong> (<code>int</code>) &#x2014;
Rank of the current node.`,name:"rank"},{anchor:"datasets.distributed.split_dataset_by_node.world_size",description:`<strong>world_size</strong> (<code>int</code>) &#x2014;
Total number of nodes.`,name:"world_size"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/distributed.py#L10",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The dataset to be used on the node at rank <code>rank</code>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Nd=new k({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/fingerprint.py#L94"}}),zd=new k({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/fingerprint.py#L115"}}),Xd=new k({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/fingerprint.py#L136"}}),Vd=new fe({props:{title:"DatasetDict",local:"datasets.DatasetDict",headingTag:"h2"}}),Bd=new k({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L52"}}),Wd=new k({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L93"}}),Gr=new C({props:{anchor:"datasets.DatasetDict.data.example",$$slots:{default:[kN]},$$scope:{ctx:v}}}),Hd=new k({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L108"}}),Nr=new C({props:{anchor:"datasets.DatasetDict.cache_files.example",$$slots:{default:[JN]},$$scope:{ctx:v}}}),Ed=new k({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L126"}}),zr=new C({props:{anchor:"datasets.DatasetDict.num_columns.example",$$slots:{default:[TN]},$$scope:{ctx:v}}}),Qd=new k({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L142"}}),Xr=new C({props:{anchor:"datasets.DatasetDict.num_rows.example",$$slots:{default:[DN]},$$scope:{ctx:v}}}),Yd=new k({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L158"}}),Vr=new C({props:{anchor:"datasets.DatasetDict.column_names.example",$$slots:{default:[CN]},$$scope:{ctx:v}}}),Ld=new k({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L176"}}),qr=new C({props:{anchor:"datasets.DatasetDict.shape.example",$$slots:{default:[IN]},$$scope:{ctx:v}}}),Sd=new k({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict.column_names">column_names</a>)`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L224",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Dictionary of unique elements in the given column.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),Br=new C({props:{anchor:"datasets.DatasetDict.unique.example",$$slots:{default:[UN]},$$scope:{ctx:v}}}),Ad=new k({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L248",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>Dict</code> with the number of removed files for each split</p>
`}}),Wr=new C({props:{anchor:"datasets.DatasetDict.cleanup_cache_files.example",$$slots:{default:[ZN]},$$scope:{ctx:v}}}),Pd=new k({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"with_split",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": typing.Optional[bool] = None"},{name:"cache_file_names",val:": typing.Optional[dict[str, typing.Optional[str]]] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"},{name:"try_original_type",val:": typing.Optional[bool] = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<code>callable</code>) &#x2014; with one of the following signature:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</code> if <code>batched=False</code> and <code>with_indices=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; Dict[str, Any]</code> if <code>batched=False</code> and <code>with_indices=True</code></li>
<li><code>function(batch: Dict[str, list]) -&gt; Dict[str, list]</code> if <code>batched=True</code> and <code>with_indices=False</code></li>
<li><code>function(batch: Dict[str, list], indices: list[int]) -&gt; Dict[str, list]</code> if <code>batched=True</code> and <code>with_indices=True</code></li>
</ul>
<p>For advanced usage, the function can also return a <code>pyarrow.Table</code>.
If the function is asynchronous, then <code>map</code> will run your function in parallel.
Moreover if your function returns nothing (<code>None</code>), then <code>map</code> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide example indices to <code>function</code>. Note that in this case the signature of <code>function</code> should be <code>def function(example, idx): ...</code>.`,name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide process rank to <code>function</code>. Note that in this case the
signature of <code>function</code> should be <code>def function(example[, idx], rank): ...</code>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.with_split",description:`<strong>with_split</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide process split to <code>function</code>. Note that in this case the
signature of <code>function</code> should be <code>def function(example[, idx], split): ...</code>.`,name:"with_split"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<code>[Union[str, list[str]]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The columns to be passed into <code>function</code> as
positional arguments. If <code>None</code>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:`<strong>batched</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide batch of examples to <code>function</code>.`,name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1000</code>) &#x2014;
Number of examples per batch provided to <code>function</code> if <code>batched=True</code>,
<code>batch_size &lt;= 0</code> or <code>batch_size == None</code> then provide the full dataset as a single batch to <code>function</code>.`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<code>[Union[str, list[str]]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <code>function</code>, i.e. if <code>function</code> is adding
columns with names in <code>remove_columns</code>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the dataset in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>Optional[bool]</code>, defaults to <code>True</code> if caching is enabled) &#x2014;
If a cache file storing the current computation from <code>function</code>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<code>[Dict[str, str]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <code>map</code>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<code>[datasets.Features]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Use a specific <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a> to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:`<strong>disable_nullable</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Disallow null values in the table.`,name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:`<strong>fn_kwargs</strong> (<code>Dict</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Keyword arguments to be passed to <code>function</code>`,name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Meaningful description to be displayed alongside with the progress bar while mapping examples.`,name:"desc"},{anchor:"datasets.DatasetDict.map.try_original_type",description:`<strong>try_original_type</strong> (<code>Optional[bool]</code>, defaults to <code>True</code>) &#x2014;
Try to keep the types of the original columns (e.g. int32 -&gt; int32).
Set to False if you want to always infer new types.`,name:"try_original_type"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L812"}}),Hr=new C({props:{anchor:"datasets.DatasetDict.map.example",$$slots:{default:[RN]},$$scope:{ctx:v}}}),Kd=new k({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": typing.Optional[bool] = None"},{name:"cache_file_names",val:": typing.Optional[dict[str, typing.Optional[str]]] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>batched=False</code> and <code>with_indices=False</code> and <code>with_rank=False</code></li>
<li><code>function(example: Dict[str, Any], *extra_args) -&gt; bool</code> if <code>batched=False</code> and <code>with_indices=True</code> and/or <code>with_rank=True</code> (one extra arg for each)</li>
<li><code>function(batch: Dict[str, list]) -&gt; list[bool]</code> if <code>batched=True</code> and <code>with_indices=False</code> and <code>with_rank=False</code></li>
<li><code>function(batch: Dict[str, list], *extra_args) -&gt; list[bool]</code> if <code>batched=True</code> and <code>with_indices=True</code> and/or <code>with_rank=True</code> (one extra arg for each)</li>
</ul>
<p>If no function is provided, defaults to an always <code>True</code> function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide example indices to <code>function</code>. Note that in this case the
signature of <code>function</code> should be <code>def function(example, idx[, rank]): ...</code>.`,name:"with_indices"},{anchor:"datasets.DatasetDict.filter.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide process rank to <code>function</code>. Note that in this case the
signature of <code>function</code> should be <code>def function(example[, idx], rank): ...</code>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>[Union[str, list[str]]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The columns to be passed into <code>function</code> as
positional arguments. If <code>None</code>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:`<strong>batched</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide batch of examples to <code>function</code>.`,name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1000</code>) &#x2014;
Number of examples per batch provided to <code>function</code> if <code>batched=True</code>
<code>batch_size &lt;= 0</code> or <code>batch_size == None</code> then provide the full dataset as a single batch to <code>function</code>.`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the dataset in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>Optional[bool]</code>, defaults to <code>True</code> if caching is enabled) &#x2014;
If a cache file storing the current computation from <code>function</code>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<code>[Dict[str, str]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <code>map</code>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:`<strong>fn_kwargs</strong> (<code>Dict</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Keyword arguments to be passed to <code>function</code>`,name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Meaningful description to be displayed alongside with the progress bar while filtering examples.`,name:"desc"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L970"}}),Er=new C({props:{anchor:"datasets.DatasetDict.filter.example",$$slots:{default:[FN]},$$scope:{ctx:v}}}),Od=new k({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column_names",val:": typing.Union[str, collections.abc.Sequence[str]]"},{name:"reverse",val:": typing.Union[bool, collections.abc.Sequence[bool]] = False"},{name:"null_placement",val:": str = 'at_end'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": typing.Optional[bool] = None"},{name:"indices_cache_file_names",val:": typing.Optional[dict[str, typing.Optional[str]]] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.sort.column_names",description:`<strong>column_names</strong> (<code>Union[str, Sequence[str]]</code>) &#x2014;
Column name(s) to sort by.`,name:"column_names"},{anchor:"datasets.DatasetDict.sort.reverse",description:`<strong>reverse</strong> (<code>Union[bool, Sequence[bool]]</code>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, sort by descending order rather than ascending. If a single bool is provided,
the value is applied to the sorting of all column names. Otherwise a list of bools with the
same length and order as column_names must be provided.`,name:"reverse"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, defaults to <code>at_end</code>) &#x2014;
Put <code>None</code> values at the beginning if <code>at_start</code> or <code>first</code> or at the end if <code>at_end</code> or <code>last</code>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the sorted indices in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>Optional[bool]</code>, defaults to <code>True</code> if caching is enabled) &#x2014;
If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<code>[Dict[str, str]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1132"}}),Qr=new C({props:{anchor:"datasets.DatasetDict.sort.example",$$slots:{default:[GN]},$$scope:{ctx:v}}}),ei=new k({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Optional[dict[str, numpy.random._generator.Generator]] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": typing.Optional[bool] = None"},{name:"indices_cache_file_names",val:": typing.Optional[dict[str, typing.Optional[str]]] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<code>Dict[str, int]</code> or <code>int</code>, <em>optional</em>) &#x2014;
A seed to initialize the default BitGenerator if <code>generator=None</code>.
If <code>None</code>, then fresh, unpredictable entropy will be pulled from the OS.
If an <code>int</code> or <code>array_like[ints]</code> is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>) &#x2014;
A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (a <code>ValueError</code> is raised if both are provided).`,name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (<code>Dict[str, *optional*, np.random.Generator]</code>) &#x2014;
Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses <code>np.random.default_rng</code> (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep the dataset in memory instead of writing it to a cache file.`,name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>Optional[bool]</code>, defaults to <code>True</code> if caching is enabled) &#x2014;
If a cache file storing the current computation from <code>function</code>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <code>map</code>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1199"}}),Yr=new C({props:{anchor:"datasets.DatasetDict.shuffle.example",$$slots:{default:[NN]},$$scope:{ctx:v}}}),ti=new k({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[list] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Either output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;jax&apos;, &apos;arrow&apos;, &apos;pandas&apos;, &apos;polars&apos;]</code>.
<code>None</code> means <code>__getitem__</code> returns python objects (default).`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>list[str]</code>, <em>optional</em>) &#x2014;
Columns to format in the output.
<code>None</code> means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, defaults to False) &#x2014;
Keep un-formatted columns as well in the output (as python objects),`,name:"output_all_columns"},{anchor:"datasets.DatasetDict.set_format.*format_kwargs",description:`*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014;
Keywords arguments passed to the convert function like <code>np.array</code>, <code>torch.tensor</code> or <code>tensorflow.ragged.constant</code>.`,name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L569"}}),Lr=new C({props:{anchor:"datasets.DatasetDict.set_format.example",$$slots:{default:[zN]},$$scope:{ctx:v}}}),si=new k({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L620"}}),Sr=new C({props:{anchor:"datasets.DatasetDict.reset_format.example",$$slots:{default:[XN]},$$scope:{ctx:v}}}),ai=new k({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[list] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Either output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;jax&apos;, &apos;arrow&apos;, &apos;pandas&apos;, &apos;polars&apos;]</code>.
<code>None</code> means <code>__getitem__</code> returns python objects (default).`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>list[str]</code>, <em>optional</em>) &#x2014;
Columns to format in the output.
<code>None</code> means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, defaults to False) &#x2014;
Keep un-formatted columns as well in the output (as python objects).`,name:"output_all_columns"},{anchor:"datasets.DatasetDict.formatted_as.*format_kwargs",description:`*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014;
Keywords arguments passed to the convert function like <code>np.array</code>, <code>torch.tensor</code> or <code>tensorflow.ragged.constant</code>.`,name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L529"}}),ni=new k({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[list] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Either output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;jax&apos;, &apos;arrow&apos;, &apos;pandas&apos;, &apos;polars&apos;]</code>.
<code>None</code> means <code>__getitem__</code> returns python objects (default).`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>list[str]</code>, <em>optional</em>) &#x2014;
Columns to format in the output.
<code>None</code> means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Keep un-formatted columns as well in the output (as python objects).`,name:"output_all_columns"},{anchor:"datasets.DatasetDict.with_format.*format_kwargs",description:`*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014;
Keywords arguments passed to the convert function like <code>np.array</code>, <code>torch.tensor</code> or <code>tensorflow.ragged.constant</code>.`,name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L681"}}),Pr=new C({props:{anchor:"datasets.DatasetDict.with_format.example",$$slots:{default:[VN]},$$scope:{ctx:v}}}),li=new k({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[list] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, <em>optional</em>) &#x2014;
User-defined formatting transform, replaces the format defined by <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.set_format">set_format()</a>.
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>list[str]</code>, <em>optional</em>) &#x2014;
Columns to format in the output.
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, defaults to False) &#x2014;
Keep un-formatted columns as well in the output (as python objects).
If set to <code>True</code>, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L758"}}),Kr=new C({props:{anchor:"datasets.DatasetDict.with_transform.example",$$slots:{default:[qN]},$$scope:{ctx:v}}}),ri=new k({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L192"}}),Or=new C({props:{anchor:"datasets.DatasetDict.flatten.example",$$slots:{default:[BN]},$$scope:{ctx:v}}}),oi=new k({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014;
New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. <code>string</code> &lt;-&gt; <code>ClassLabel</code> you should use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict.map">map()</a> to update the dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L272"}}),eo=new C({props:{anchor:"datasets.DatasetDict.cast.example",$$slots:{default:[WN]},$$scope:{ctx:v}}}),ci=new k({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
Column name.`,name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:`<strong>feature</strong> (<code>Feature</code>) &#x2014;
Target feature.`,name:"feature"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L304",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),to=new C({props:{anchor:"datasets.DatasetDict.cast_column.example",$$slots:{default:[HN]},$$scope:{ctx:v}}}),pi=new k({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, list[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:`<strong>column_names</strong> (<code>Union[str, list[str]]</code>) &#x2014;
Name of the column(s) to remove.`,name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L333",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),so=new C({props:{anchor:"datasets.DatasetDict.remove_columns.example",$$slots:{default:[EN]},$$scope:{ctx:v}}}),di=new k({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:`<strong>original_column_name</strong> (<code>str</code>) &#x2014;
Name of the column to rename.`,name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:`<strong>new_column_name</strong> (<code>str</code>) &#x2014;
New name for the column.`,name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L375"}}),ao=new C({props:{anchor:"datasets.DatasetDict.rename_column.example",$$slots:{default:[QN]},$$scope:{ctx:v}}}),ii=new k({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": dict"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:`<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014;
A mapping of columns to rename to their new names.`,name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L423",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with renamed columns.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),no=new C({props:{anchor:"datasets.DatasetDict.rename_columns.example",$$slots:{default:[YN]},$$scope:{ctx:v}}}),mi=new k({props:{name:"select_columns",anchor:"datasets.DatasetDict.select_columns",parameters:[{name:"column_names",val:": typing.Union[str, list[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.select_columns.column_names",description:`<strong>column_names</strong> (<code>Union[str, list[str]]</code>) &#x2014;
Name of the column(s) to keep.`,name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L461"}}),lo=new C({props:{anchor:"datasets.DatasetDict.select_columns.example",$$slots:{default:[LN]},$$scope:{ctx:v}}}),hi=new k({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The name of the column to cast.`,name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to include null values in the class labels. If <code>True</code>, the null values will be encoded as the <code>&quot;None&quot;</code> class label.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 1.14.2</p>
						
					</div>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L497"}}),ro=new C({props:{anchor:"datasets.DatasetDict.class_encode_column.example",$$slots:{default:[SN]},$$scope:{ctx:v}}}),ui=new k({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"config_name",val:": str = 'default'"},{name:"set_default",val:": typing.Optional[bool] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"commit_message",val:": typing.Optional[str] = None"},{name:"commit_description",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = None"},{name:"token",val:": typing.Optional[str] = None"},{name:"revision",val:": typing.Optional[str] = None"},{name:"create_pr",val:": typing.Optional[bool] = False"},{name:"max_shard_size",val:": typing.Union[str, int, NoneType] = None"},{name:"num_shards",val:": typing.Optional[dict[str, int]] = None"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014;
Configuration name of a dataset. Defaults to &#x201C;default&#x201D;.`,name:"config_name"},{anchor:"datasets.DatasetDict.push_to_hub.set_default",description:`<strong>set_default</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to set this configuration as the default one. Otherwise, the default configuration is the one
named &#x201C;default&#x201D;.`,name:"set_default"},{anchor:"datasets.DatasetDict.push_to_hub.data_dir",description:`<strong>data_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Directory name that will contain the uploaded data files. Defaults to the <code>config_name</code> if different
from &#x201C;default&#x201D;, else &#x201C;data&#x201D;.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.17.0</p>
						
					</div>`,name:"data_dir"},{anchor:"datasets.DatasetDict.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Message to commit while pushing. Will default to <code>&quot;Upload dataset&quot;</code>.`,name:"commit_message"},{anchor:"datasets.DatasetDict.push_to_hub.commit_description",description:`<strong>commit_description</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Description of the commit that will be created.
Additionally, description of the PR if a PR is created (<code>create_pr</code> is True).</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.16.0</p>
						
					</div>`,name:"commit_description"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to make the repo private. If <code>None</code> (default), the repo will be public unless the
organization&#x2019;s default is private. This value is ignored if the repo already exists.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Branch to push the uploaded files to. Defaults to the <code>&quot;main&quot;</code> branch.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.15.0</p>
						
					</div>`,name:"revision"},{anchor:"datasets.DatasetDict.push_to_hub.create_pr",description:`<strong>create_pr</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to create a PR with the uploaded files or directly commit.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.15.0</p>
						
					</div>`,name:"create_pr"},{anchor:"datasets.DatasetDict.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;500MB&quot;</code>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <code>&quot;500MB&quot;</code> or <code>&quot;1GB&quot;</code>).`,name:"max_shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.num_shards",description:`<strong>num_shards</strong> (<code>Dict[str, int]</code>, <em>optional</em>) &#x2014;
Number of shards to write. By default, the number of shards depends on <code>max_shard_size</code>.
Use a dictionary to define a different num_shards for each split.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"num_shards"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Audio">Audio</a> and <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Image">Image</a> removes local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1604",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>huggingface_hub.CommitInfo</p>
`}}),oo=new C({props:{anchor:"datasets.DatasetDict.push_to_hub.example",$$slots:{default:[AN]},$$scope:{ctx:v}}}),co=new C({props:{anchor:"datasets.DatasetDict.push_to_hub.example-2",$$slots:{default:[PN]},$$scope:{ctx:v}}}),gi=new k({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": typing.Union[str, bytes, os.PathLike]"},{name:"max_shard_size",val:": typing.Union[str, int, NoneType] = None"},{name:"num_shards",val:": typing.Optional[dict[str, int]] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"storage_options",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>path-like</code>) &#x2014;
Path (e.g. <code>dataset/train</code>) or remote URI (e.g. <code>s3://my-bucket/dataset/train</code>)
of the dataset dict directory where the dataset dict will be saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.max_shard_size",description:`<strong>max_shard_size</strong> (<code>int</code> or <code>str</code>, <em>optional</em>, defaults to <code>&quot;500MB&quot;</code>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <code>&quot;50MB&quot;</code>).`,name:"max_shard_size"},{anchor:"datasets.DatasetDict.save_to_disk.num_shards",description:`<strong>num_shards</strong> (<code>Dict[str, int]</code>, <em>optional</em>) &#x2014;
Number of shards to write. By default the number of shards depends on <code>max_shard_size</code> and <code>num_proc</code>.
You need to provide the number of shards for each dataset in the dataset dictionary.
Use a dictionary to define a different num_shards for each split.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"num_shards"},{anchor:"datasets.DatasetDict.save_to_disk.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, <em>optional</em>, default <code>None</code>) &#x2014;
Number of processes when downloading and generating the dataset locally.
Multiprocessing is disabled by default.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"num_proc"},{anchor:"datasets.DatasetDict.save_to_disk.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"storage_options"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1282"}}),po=new C({props:{anchor:"datasets.DatasetDict.save_to_disk.example",$$slots:{default:[KN]},$$scope:{ctx:v}}}),fi=new k({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": typing.Union[str, bytes, os.PathLike]"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"},{name:"storage_options",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>path-like</code>) &#x2014;
Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g. <code>&quot;s3//my-bucket/dataset/train&quot;</code>)
of the dataset dict directory where the dataset dict will be loaded from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>None</code>) &#x2014;
Whether to copy the dataset in-memory. If <code>None</code>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<code>datasets.config.IN_MEMORY_MAX_SIZE</code> to nonzero. See more details in the
<a href="../cache#improve-performance">improve performance</a> section.`,name:"keep_in_memory"},{anchor:"datasets.DatasetDict.load_from_disk.storage_options",description:`<strong>storage_options</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Key/value pairs to be passed on to the file-system backend, if any.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.8.0</p>
						
					</div>`,name:"storage_options"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1356",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),io=new C({props:{anchor:"datasets.DatasetDict.load_from_disk.example",$$slots:{default:[ON]},$$scope:{ctx:v}}}),bi=new k({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:`<strong>path_or_paths</strong> (<code>dict</code> of path-like) &#x2014;
Path(s) of the CSV file(s).`,name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:`<strong>cache_dir</strong> (str, <em>optional</em>, defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014;
Directory to cache data.`,name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_csv.*kwargs",description:`*<strong>*kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1416",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),mo=new C({props:{anchor:"datasets.DatasetDict.from_csv.example",$$slots:{default:[e9]},$$scope:{ctx:v}}}),_i=new k({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:`<strong>path_or_paths</strong> (<code>path-like</code> or list of <code>path-like</code>) &#x2014;
Path(s) of the JSON Lines file(s).`,name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:`<strong>cache_dir</strong> (str, <em>optional</em>, defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014;
Directory to cache data.`,name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_json.*kwargs",description:`*<strong>*kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1459",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),ho=new C({props:{anchor:"datasets.DatasetDict.from_json.example",$$slots:{default:[t9]},$$scope:{ctx:v}}}),xi=new k({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[list[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:`<strong>path_or_paths</strong> (<code>dict</code> of path-like) &#x2014;
Path(s) of the CSV file(s).`,name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014;
Directory to cache data.`,name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>list[str]</code>, <em>optional</em>) &#x2014;
If not <code>None</code>, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.`,name:"columns"},{anchor:"datasets.DatasetDict.from_parquet.*kwargs",description:`*<strong>*kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1502",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),uo=new C({props:{anchor:"datasets.DatasetDict.from_parquet.example",$$slots:{default:[s9]},$$scope:{ctx:v}}}),yi=new k({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:`<strong>path_or_paths</strong> (<code>dict</code> of path-like) &#x2014;
Path(s) of the text file(s).`,name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014;
Directory to cache data.`,name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether to copy the data in-memory.`,name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_text.*kwargs",description:`*<strong>*kwargs</strong> (additional keyword arguments) &#x2014;
Keyword arguments to be passed to <code>TextConfig</code>.`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1551",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),go=new C({props:{anchor:"datasets.DatasetDict.from_text.example",$$slots:{default:[a9]},$$scope:{ctx:v}}}),ji=new fe({props:{title:"IterableDataset",local:"datasets.IterableDataset",headingTag:"h2"}}),vi=new k({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"formatting",val:": typing.Optional[datasets.iterable_dataset.FormattingConfig] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"},{name:"distributed",val:": typing.Optional[datasets.iterable_dataset.DistributedConfig] = None"},{name:"token_per_repo_id",val:": typing.Optional[dict[str, typing.Union[str, bool, NoneType]]] = None"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L1947"}}),wi=new k({props:{name:"from_generator",anchor:"datasets.IterableDataset.from_generator",parameters:[{name:"generator",val:": typing.Callable"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"gen_kwargs",val:": typing.Optional[dict] = None"},{name:"split",val:": NamedSplit = NamedSplit('train')"}],parametersDescription:[{anchor:"datasets.IterableDataset.from_generator.generator",description:`<strong>generator</strong> (<code>Callable</code>) &#x2014;
A generator function that <code>yields</code> examples.`,name:"generator"},{anchor:"datasets.IterableDataset.from_generator.features",description:`<strong>features</strong> (<code>Features</code>, <em>optional</em>) &#x2014;
Dataset features.`,name:"features"},{anchor:"datasets.IterableDataset.from_generator.gen_kwargs(dict,",description:`<strong>gen_kwargs(<code>dict</code>,</strong> <em>optional</em>) &#x2014;
Keyword arguments to be passed to the <code>generator</code> callable.
You can define a sharded iterable dataset by passing the list of shards in <code>gen_kwargs</code>.
This can be used to improve shuffling and when iterating over the dataset with multiple workers.`,name:"gen_kwargs(dict,"},{anchor:"datasets.IterableDataset.from_generator.split",description:`<strong>split</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, defaults to <code>Split.TRAIN</code>) &#x2014;
Split name to be assigned to the dataset.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.21.0</p>
						
					</div>`,name:"split"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2309",returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>IterableDataset</code></p>
`}}),fo=new C({props:{anchor:"datasets.IterableDataset.from_generator.example",$$slots:{default:[n9]},$$scope:{ctx:v}}}),bo=new C({props:{anchor:"datasets.IterableDataset.from_generator.example-2",$$slots:{default:[l9]},$$scope:{ctx:v}}}),Mi=new k({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, list[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:`<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014;
Name of the column(s) to remove.`,name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L3050",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>IterableDataset</code></p>
`}}),_o=new C({props:{anchor:"datasets.IterableDataset.remove_columns.example",$$slots:{default:[r9]},$$scope:{ctx:v}}}),ki=new k({props:{name:"select_columns",anchor:"datasets.IterableDataset.select_columns",parameters:[{name:"column_names",val:": typing.Union[str, list[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.select_columns.column_names",description:`<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014;
Name of the column(s) to select.`,name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L3085",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset object with selected columns.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>IterableDataset</code></p>
`}}),xo=new C({props:{anchor:"datasets.IterableDataset.select_columns.example",$$slots:{default:[o9]},$$scope:{ctx:v}}}),Ji=new k({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.LargeList, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image, datasets.features.video.Video, datasets.features.pdf.Pdf]"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
Column name.`,name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:`<strong>feature</strong> (<code>Feature</code>) &#x2014;
Target feature.`,name:"feature"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L3136",returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>IterableDataset</code></p>
`}}),yo=new C({props:{anchor:"datasets.IterableDataset.cast_column.example",$$slots:{default:[c9]},$$scope:{ctx:v}}}),Ti=new k({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014;
New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. <code>string</code> &lt;-&gt; <code>ClassLabel</code> you should use <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.map">map()</a> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L3182",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with casted features.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>IterableDataset</code></p>
`}}),jo=new C({props:{anchor:"datasets.IterableDataset.cast.example",$$slots:{default:[p9]},$$scope:{ctx:v}}}),Di=new k({props:{name:"decode",anchor:"datasets.IterableDataset.decode",parameters:[{name:"enable",val:": bool = True"},{name:"num_threads",val:": int = 0"}],parametersDescription:[{anchor:"datasets.IterableDataset.decode.enable",description:`<strong>enable</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Enable or disable features decoding.`,name:"enable"},{anchor:"datasets.IterableDataset.decode.num_threads",description:`<strong>num_threads</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Enable multithreading for features decoding.`,name:"num_threads"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L3228",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with casted features.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>IterableDataset</code></p>
`}}),$o=new C({props:{anchor:"datasets.IterableDataset.decode.example",$$slots:{default:[d9]},$$scope:{ctx:v}}}),vo=new C({props:{anchor:"datasets.IterableDataset.decode.example-2",$$slots:{default:[i9]},$$scope:{ctx:v}}}),Ci=new k({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2249"}}),Ii=new k({props:{name:"iter",anchor:"datasets.IterableDataset.iter",parameters:[{name:"batch_size",val:": int"},{name:"drop_last_batch",val:": bool = False"}],parametersDescription:[{anchor:"datasets.IterableDataset.iter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>) &#x2014; size of each batch to yield.",name:"batch_size"},{anchor:"datasets.IterableDataset.iter.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped`,name:"drop_last_batch"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2274"}}),Ui=new k({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Function applied on-the-fly on the examples when you iterate on the dataset.
It must have one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</code> if <code>batched=False</code> and <code>with_indices=False</code></li>
<li><code>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</code> if <code>batched=False</code> and <code>with_indices=True</code></li>
<li><code>function(batch: Dict[str, List]) -&gt; Dict[str, List]</code> if <code>batched=True</code> and <code>with_indices=False</code></li>
<li><code>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</code> if <code>batched=True</code> and <code>with_indices=True</code></li>
</ul>
<p>For advanced usage, the function can also return a <code>pyarrow.Table</code>.
If the function is asynchronous, then <code>map</code> will run your function in parallel.
Moreover if your function returns nothing (<code>None</code>), then <code>map</code> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide example indices to <code>function</code>. Note that in this case the signature of <code>function</code> should be <code>def function(example, idx[, rank]): ...</code>.`,name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<code>Optional[Union[str, List[str]]]</code>, defaults to <code>None</code>) &#x2014;
The columns to be passed into <code>function</code>
as positional arguments. If <code>None</code>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:`<strong>batched</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide batch of examples to <code>function</code>.`,name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1000</code>) &#x2014;
Number of examples per batch provided to <code>function</code> if <code>batched=True</code>.
<code>batch_size &lt;= 0</code> or <code>batch_size == None</code> then provide the full dataset as a single batch to <code>function</code>.`,name:"batch_size"},{anchor:"datasets.IterableDataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<code>[List[str]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <code>function</code>, i.e. if <code>function</code> is adding
columns with names in <code>remove_columns</code>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.IterableDataset.map.features",description:`<strong>features</strong> (<code>[Features]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Feature types of the resulting dataset.`,name:"features"},{anchor:"datasets.IterableDataset.map.fn_kwargs",description:`<strong>fn_kwargs</strong> (<code>Dict</code>, <em>optional</em>, default <code>None</code>) &#x2014;
Keyword arguments to be passed to <code>function</code>.`,name:"fn_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2481"}}),Mo=new C({props:{anchor:"datasets.IterableDataset.map.example",$$slots:{default:[m9]},$$scope:{ctx:v}}}),Zi=new k({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:`<strong>original_column_name</strong> (<code>str</code>) &#x2014;
Name of the column to rename.`,name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:`<strong>new_column_name</strong> (<code>str</code>) &#x2014;
New name for the column.`,name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2995",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with a renamed column.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>IterableDataset</code></p>
`}}),ko=new C({props:{anchor:"datasets.IterableDataset.rename_column.example",$$slots:{default:[h9]},$$scope:{ctx:v}}}),Ri=new k({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014;
Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If the function is asynchronous, then <code>filter</code> will run your function in parallel.
If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide example indices to <code>function</code>. Note that in this case the signature of <code>function</code> should be <code>def function(example, idx): ...</code>.`,name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>) &#x2014;
The columns to be passed into <code>function</code> as
positional arguments. If <code>None</code>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:`<strong>batched</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide batch of examples to <code>function</code>.`,name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, default <code>1000</code>) &#x2014;
Number of examples per batch provided to <code>function</code> if <code>batched=True</code>.`,name:"batch_size"},{anchor:"datasets.IterableDataset.filter.fn_kwargs",description:`<strong>fn_kwargs</strong> (<code>Dict</code>, <em>optional</em>, default <code>None</code>) &#x2014;
Keyword arguments to be passed to <code>function</code>.`,name:"fn_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2631"}}),Jo=new C({props:{anchor:"datasets.IterableDataset.filter.example",$$slots:{default:[u9]},$$scope:{ctx:v}}}),Fi=new k({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffer and also to shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, <em>optional</em>) &#x2014;
Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses <code>np.random.default_rng</code> (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:`<strong>buffer_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Size of the buffer.`,name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2717"}}),To=new C({props:{anchor:"datasets.IterableDataset.shuffle.example",$$slots:{default:[g9]},$$scope:{ctx:v}}}),Gi=new k({props:{name:"batch",anchor:"datasets.IterableDataset.batch",parameters:[{name:"batch_size",val:": int"},{name:"drop_last_batch",val:": bool = False"}],parametersDescription:[{anchor:"datasets.IterableDataset.batch.batch_size",description:"<strong>batch_size</strong> (<code>int</code>) &#x2014; The number of samples in each batch.",name:"batch_size"},{anchor:"datasets.IterableDataset.batch.drop_last_batch",description:"<strong>drop_last_batch</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014; Whether to drop the last incomplete batch.",name:"drop_last_batch"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L3352"}}),Do=new C({props:{anchor:"datasets.IterableDataset.batch.example",$$slots:{default:[f9]},$$scope:{ctx:v}}}),Ni=new k({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:": int"}],parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:`<strong>n</strong> (<code>int</code>) &#x2014;
Number of elements to skip.`,name:"n"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2787"}}),Co=new C({props:{anchor:"datasets.IterableDataset.skip.example",$$slots:{default:[b9]},$$scope:{ctx:v}}}),zi=new k({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:": int"}],parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:`<strong>n</strong> (<code>int</code>) &#x2014;
Number of elements to take.`,name:"n"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2874"}}),Io=new C({props:{anchor:"datasets.IterableDataset.take.example",$$slots:{default:[_9]},$$scope:{ctx:v}}}),Xi=new k({props:{name:"shard",anchor:"datasets.IterableDataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = True"}],parametersDescription:[{anchor:"datasets.IterableDataset.shard.num_shards",description:`<strong>num_shards</strong> (<code>int</code>) &#x2014;
How many shards to split the dataset into.`,name:"num_shards"},{anchor:"datasets.IterableDataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014;
Which shard to select and return.`,name:"index"},{anchor:"datasets.IterableDataset.shard.contiguous",description:`<strong>contiguous</strong> &#x2014; (<code>bool</code>, defaults to <code>True</code>):
Whether to select contiguous blocks of indices for shards.`,name:"contiguous"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2911"}}),Uo=new C({props:{anchor:"datasets.IterableDataset.shard.example",$$slots:{default:[x9]},$$scope:{ctx:v}}}),Vi=new k({props:{name:"repeat",anchor:"datasets.IterableDataset.repeat",parameters:[{name:"num_times",val:": typing.Optional[int]"}],parametersDescription:[{anchor:"datasets.IterableDataset.repeat.num_times",description:`<strong>num_times</strong> (<code>int</code>) or (<code>None</code>) &#x2014;
Number of times to repeat the dataset. If <code>None</code>, the dataset will be repeated indefinitely.`,name:"num_times"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2831"}}),Zo=new C({props:{anchor:"datasets.IterableDataset.repeat.example",$$slots:{default:[y9]},$$scope:{ctx:v}}}),qi=new k({props:{name:"load_state_dict",anchor:"datasets.IterableDataset.load_state_dict",parameters:[{name:"state_dict",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L2032"}}),Ro=new C({props:{anchor:"datasets.IterableDataset.load_state_dict.example",$$slots:{default:[j9]},$$scope:{ctx:v}}}),Fo=new C({props:{anchor:"datasets.IterableDataset.load_state_dict.example-2",$$slots:{default:[$9]},$$scope:{ctx:v}}}),Go=new C({props:{anchor:"datasets.IterableDataset.load_state_dict.example-3",$$slots:{default:[v9]},$$scope:{ctx:v}}}),Bi=new k({props:{name:"state_dict",anchor:"datasets.IterableDataset.state_dict",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/iterable_dataset.py#L1979",returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict</code></p>
`}}),No=new C({props:{anchor:"datasets.IterableDataset.state_dict.example",$$slots:{default:[w9]},$$scope:{ctx:v}}}),zo=new C({props:{anchor:"datasets.IterableDataset.state_dict.example-2",$$slots:{default:[M9]},$$scope:{ctx:v}}}),Xo=new C({props:{anchor:"datasets.IterableDataset.state_dict.example-3",$$slots:{default:[k9]},$$scope:{ctx:v}}}),Wi=new k({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L162"}}),Hi=new k({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L167"}}),Ei=new k({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L172"}}),Qi=new k({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L176"}}),Yi=new k({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L180"}}),Li=new k({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L184"}}),Si=new k({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L188"}}),Ai=new k({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L192"}}),Pi=new k({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L196"}}),Ki=new k({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L200"}}),Oi=new k({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L204"}}),em=new k({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L208"}}),tm=new k({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L212"}}),sm=new k({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L216"}}),am=new k({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/arrow_dataset.py#L220"}}),nm=new fe({props:{title:"IterableDatasetDict",local:"datasets.IterableDatasetDict",headingTag:"h2"}}),rm=new k({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1911"}}),om=new k({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_split",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Function applied on-the-fly on the examples when you iterate on the dataset.
It must have one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</code> if <code>batched=False</code> and <code>with_indices=False</code></li>
<li><code>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</code> if <code>batched=False</code> and <code>with_indices=True</code></li>
<li><code>function(batch: Dict[str, list]) -&gt; Dict[str, list]</code> if <code>batched=True</code> and <code>with_indices=False</code></li>
<li><code>function(batch: Dict[str, list], indices: list[int]) -&gt; Dict[str, list]</code> if <code>batched=True</code> and <code>with_indices=True</code></li>
</ul>
<p>For advanced usage, the function can also return a <code>pyarrow.Table</code>.
If the function is asynchronous, then <code>map</code> will run your function in parallel.
Moreover if your function returns nothing (<code>None</code>), then <code>map</code> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide example indices to <code>function</code>. Note that in this case the signature of <code>function</code> should be <code>def function(example, idx[, rank]): ...</code>.`,name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<code>[Union[str, list[str]]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
The columns to be passed into <code>function</code>
as positional arguments. If <code>None</code>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:`<strong>batched</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide batch of examples to <code>function</code>.`,name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1000</code>) &#x2014;
Number of examples per batch provided to <code>function</code> if <code>batched=True</code>.`,name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether a last batch smaller than the <code>batch_size</code> should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<code>[list[str]]</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <code>function</code>, i.e. if <code>function</code> is adding
columns with names in <code>remove_columns</code>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.IterableDatasetDict.map.fn_kwargs",description:`<strong>fn_kwargs</strong> (<code>Dict</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Keyword arguments to be passed to <code>function</code>`,name:"fn_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1963"}}),Bo=new C({props:{anchor:"datasets.IterableDatasetDict.map.example",$$slots:{default:[J9]},$$scope:{ctx:v}}}),cm=new k({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, list[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014;
Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, list]) -&gt; list[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, list], indices: list[int]) -&gt; list[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide example indices to <code>function</code>. Note that in this case the signature of <code>function</code> should be <code>def function(example, idx): ...</code>.`,name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <code>list[str]</code>, <em>optional</em>) &#x2014;
The columns to be passed into <code>function</code> as
positional arguments. If <code>None</code>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:`<strong>batched</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Provide batch of examples to <code>function</code>`,name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1000</code>) &#x2014;
Number of examples per batch provided to <code>function</code> if <code>batched=True</code>.`,name:"batch_size"},{anchor:"datasets.IterableDatasetDict.filter.fn_kwargs",description:`<strong>fn_kwargs</strong> (<code>Dict</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Keyword arguments to be passed to <code>function</code>`,name:"fn_kwargs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L2063"}}),Wo=new C({props:{anchor:"datasets.IterableDatasetDict.filter.example",$$slots:{default:[T9]},$$scope:{ctx:v}}}),pm=new k({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to <code>None</code>) &#x2014;
Random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffer and also to shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, <em>optional</em>) &#x2014;
Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses <code>np.random.default_rng</code> (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:`<strong>buffer_size</strong> (<code>int</code>, defaults to <code>1000</code>) &#x2014;
Size of the buffer.`,name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L2126"}}),Ho=new C({props:{anchor:"datasets.IterableDatasetDict.shuffle.example",$$slots:{default:[D9]},$$scope:{ctx:v}}}),dm=new k({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Either output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;jax&apos;, &apos;arrow&apos;, &apos;pandas&apos;, &apos;polars&apos;]</code>.
<code>None</code> means it returns python objects (default).`,name:"type"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L1917"}}),Eo=new C({props:{anchor:"datasets.IterableDatasetDict.with_format.example",$$slots:{default:[C9]},$$scope:{ctx:v}}}),im=new k({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<code>Features</code>) &#x2014;
New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. <code>string</code> &lt;-&gt; <code>ClassLabel</code> you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L2334",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with casted features.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Qo=new C({props:{anchor:"datasets.IterableDatasetDict.cast.example",$$slots:{default:[I9]},$$scope:{ctx:v}}}),mm=new k({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.LargeList, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image, datasets.features.video.Video, datasets.features.pdf.Pdf]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
Column name.`,name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:`<strong>feature</strong> (<code>Feature</code>) &#x2014;
Target feature.`,name:"feature"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L2303",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Yo=new C({props:{anchor:"datasets.IterableDatasetDict.cast_column.example",$$slots:{default:[U9]},$$scope:{ctx:v}}}),hm=new k({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, list[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:`<strong>column_names</strong> (<code>Union[str, list[str]]</code>) &#x2014;
Name of the column(s) to remove.`,name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L2251",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Lo=new C({props:{anchor:"datasets.IterableDatasetDict.remove_columns.example",$$slots:{default:[Z9]},$$scope:{ctx:v}}}),um=new k({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:`<strong>original_column_name</strong> (<code>str</code>) &#x2014;
Name of the column to rename.`,name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:`<strong>new_column_name</strong> (<code>str</code>) &#x2014;
New name for the column.`,name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L2187",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with a renamed column.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),So=new C({props:{anchor:"datasets.IterableDatasetDict.rename_column.example",$$slots:{default:[R9]},$$scope:{ctx:v}}}),gm=new k({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": dict"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:`<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014;
A mapping of columns to rename to their new names.`,name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L2223",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset with renamed columns</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Ao=new C({props:{anchor:"datasets.IterableDatasetDict.rename_columns.example",$$slots:{default:[F9]},$$scope:{ctx:v}}}),fm=new k({props:{name:"select_columns",anchor:"datasets.IterableDatasetDict.select_columns",parameters:[{name:"column_names",val:": typing.Union[str, list[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.select_columns.column_names",description:`<strong>column_names</strong> (<code>Union[str, list[str]]</code>) &#x2014;
Name of the column(s) to keep.`,name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/dataset_dict.py#L2277",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>A copy of the dataset object with only selected columns.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),Po=new C({props:{anchor:"datasets.IterableDatasetDict.select_columns.example",$$slots:{default:[G9]},$$scope:{ctx:v}}}),bm=new fe({props:{title:"Features",local:"datasets.Features",headingTag:"h2"}}),_m=new k({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L1753"}}),Ko=new cU({props:{$$slots:{default:[N9]},$$scope:{ctx:v}}}),ym=new k({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L2154",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Oo=new C({props:{anchor:"datasets.Features.copy.example",$$slots:{default:[z9]},$$scope:{ctx:v}}}),jm=new k({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"},{name:"token_per_repo_id",val:": typing.Optional[dict[str, typing.Union[str, bool, NoneType]]] = None"}],parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:`<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014;
Dataset batch data.`,name:"batch"},{anchor:"datasets.Features.decode_batch.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
To access and decode audio or image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L2127",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict[str, list[Any]]</code></p>
`}}),$m=new k({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:`<strong>column</strong> (<code>list[Any]</code>) &#x2014;
Dataset column data.`,name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:`<strong>column_name</strong> (<code>str</code>) &#x2014;
Dataset column name.`,name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L2109",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>list[Any]</code></p>
`}}),vm=new k({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"},{name:"token_per_repo_id",val:": typing.Optional[dict[str, typing.Union[str, bool, NoneType]]] = None"}],parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:`<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014;
Dataset row data.`,name:"example"},{anchor:"datasets.Features.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
To access and decode audio or image files from private repositories on the Hub, you can pass
a dictionary <code>repo_id (str) -&gt; token (bool or str)</code>.`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L2086",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict[str, Any]</code></p>
`}}),wm=new k({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:`<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014;
Data in a Dataset batch.`,name:"batch"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L2067",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict[str, list[Any]]</code></p>
`}}),Mm=new k({props:{name:"encode_column",anchor:"datasets.Features.encode_column",parameters:[{name:"column",val:""},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.encode_column.column",description:`<strong>column</strong> (<code>list[Any]</code>) &#x2014;
Data in a Dataset column.`,name:"column"},{anchor:"datasets.Features.encode_column.column_name",description:`<strong>column_name</strong> (<code>str</code>) &#x2014;
Dataset column name.`,name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L2051",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>list[Any]</code></p>
`}}),km=new k({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:`<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014;
Data in a Dataset row.`,name:"example"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L2037",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict[str, Any]</code></p>
`}}),Jm=new k({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L2246",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>The flattened features.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),rc=new C({props:{anchor:"datasets.Features.flatten.example",$$slots:{default:[X9]},$$scope:{ctx:v}}}),Tm=new k({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:`<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014;
Arrow Schema.`,name:"pa_schema"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L1828",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><a
  href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Dm=new k({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:`<strong>dic</strong> (<em>dict[str, Any]</em>) &#x2014;
Python dictionary.`,name:"dic"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L1862",returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><em>Features</em></p>
`}}),oc=new C({props:{anchor:"datasets.Features.from_dict.example",$$slots:{default:[V9]},$$scope:{ctx:v}}}),Cm=new k({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:`<strong>other</strong> ([<em>Features</em>]) &#x2014;
The other [<em>Features</em>] to align with.`,name:"other"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L2174",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>[<em>Features</em>]</p>
`}}),cc=new C({props:{anchor:"datasets.Features.reorder_fields_as.example",$$slots:{default:[q9]},$$scope:{ctx:v}}}),Im=new fe({props:{title:"Scalar",local:"datasets.Value",headingTag:"h3"}}),Um=new k({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Value.dtype",description:`<strong>dtype</strong> (<code>str</code>) &#x2014;
Name of the data type.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L470"}}),pc=new C({props:{anchor:"datasets.Value.example",$$slots:{default:[B9]},$$scope:{ctx:v}}}),Zm=new k({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": dataclasses.InitVar[typing.Optional[int]] = None"},{name:"names",val:": list = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:`<strong>num_classes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of classes. All labels must be &lt; <code>num_classes</code>.`,name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, <em>optional</em>) &#x2014;
String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:`<strong>names_file</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Path to a file with names for the integer classes, one per line.`,name:"names_file"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L953"}}),dc=new C({props:{anchor:"datasets.ClassLabel.example",$$slots:{default:[W9]},$$scope:{ctx:v}}}),Rm=new k({props:{name:"cast_storage",anchor:"datasets.ClassLabel.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.IntegerArray]"}],parametersDescription:[{anchor:"datasets.ClassLabel.cast_storage.storage",description:`<strong>storage</strong> (<code>Union[pa.StringArray, pa.IntegerArray]</code>) &#x2014;
PyArrow array to cast.`,name:"storage"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L1119",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Array in the <code>ClassLabel</code> arrow storage type.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>pa.Int64Array</code></p>
`}}),Fm=new k({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L1073"}}),ic=new C({props:{anchor:"datasets.ClassLabel.int2str.example",$$slots:{default:[H9]},$$scope:{ctx:v}}}),Gm=new k({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L1028"}}),mc=new C({props:{anchor:"datasets.ClassLabel.str2int.example",$$slots:{default:[E9]},$$scope:{ctx:v}}}),Nm=new fe({props:{title:"Composite",local:"datasets.LargeList",headingTag:"h3"}}),zm=new k({props:{name:"class datasets.LargeList",anchor:"datasets.LargeList",parameters:[{name:"feature",val:": typing.Any"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.LargeList.feature",description:`<strong>feature</strong> (<code>FeatureType</code>) &#x2014;
Child feature data type of each item within the large list.`,name:"feature"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L1181"}}),Xm=new k({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Sequence.feature",description:`<strong>feature</strong> (<code>FeatureType</code>) &#x2014;
A list of features of a single type or a dictionary of types.`,name:"feature"},{anchor:"datasets.Sequence.length",description:`<strong>length</strong> (<code>int</code>) &#x2014;
Length of the sequence.`,name:"length"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L1151"}}),hc=new C({props:{anchor:"datasets.Sequence.example",$$slots:{default:[Q9]},$$scope:{ctx:v}}}),Vm=new fe({props:{title:"Translation",local:"datasets.Translation",headingTag:"h3"}}),qm=new k({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": list"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Translation.languages",description:`<strong>languages</strong> (<code>dict</code>) &#x2014;
A dictionary for each example mapping string language codes to string translations.`,name:"languages"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/translation.py#L11"}}),uc=new C({props:{anchor:"datasets.Translation.example",$$slots:{default:[Y9]},$$scope:{ctx:v}}}),Bm=new k({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/translation.py#L44"}}),Wm=new k({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[list] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.TranslationVariableLanguages.languages",description:`<strong>languages</strong> (<code>dict</code>) &#x2014;
A dictionary for each example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`,name:"languages"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/translation.py#L51",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Language codes sorted in ascending order or plain text translations, sorted to align with language codes.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<ul>
<li><code>language</code> or <code>translation</code> (variable-length 1D <code>tf.Tensor</code> of <code>tf.string</code>)</li>
</ul>
`}}),fc=new C({props:{anchor:"datasets.TranslationVariableLanguages.example",$$slots:{default:[L9]},$$scope:{ctx:v}}}),Hm=new k({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/translation.py#L122"}}),Em=new fe({props:{title:"Arrays",local:"datasets.Array2D",headingTag:"h3"}}),Qm=new k({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array2D.shape",description:`<strong>shape</strong> (<code>tuple</code>) &#x2014;
Size of each dimension.`,name:"shape"},{anchor:"datasets.Array2D.dtype",description:`<strong>dtype</strong> (<code>str</code>) &#x2014;
Name of the data type.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L558"}}),_c=new C({props:{anchor:"datasets.Array2D.example",$$slots:{default:[S9]},$$scope:{ctx:v}}}),Ym=new k({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array3D.shape",description:`<strong>shape</strong> (<code>tuple</code>) &#x2014;
Size of each dimension.`,name:"shape"},{anchor:"datasets.Array3D.dtype",description:`<strong>dtype</strong> (<code>str</code>) &#x2014;
Name of the data type.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L583"}}),xc=new C({props:{anchor:"datasets.Array3D.example",$$slots:{default:[A9]},$$scope:{ctx:v}}}),Lm=new k({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array4D.shape",description:`<strong>shape</strong> (<code>tuple</code>) &#x2014;
Size of each dimension.`,name:"shape"},{anchor:"datasets.Array4D.dtype",description:`<strong>dtype</strong> (<code>str</code>) &#x2014;
Name of the data type.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L608"}}),yc=new C({props:{anchor:"datasets.Array4D.example",$$slots:{default:[P9]},$$scope:{ctx:v}}}),Sm=new k({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array5D.shape",description:`<strong>shape</strong> (<code>tuple</code>) &#x2014;
Size of each dimension.`,name:"shape"},{anchor:"datasets.Array5D.dtype",description:`<strong>dtype</strong> (<code>str</code>) &#x2014;
Name of the data type.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/features.py#L633"}}),jc=new C({props:{anchor:"datasets.Array5D.example",$$slots:{default:[K9]},$$scope:{ctx:v}}}),Am=new fe({props:{title:"Audio",local:"datasets.Audio",headingTag:"h3"}}),Pm=new k({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:`<strong>sampling_rate</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Target sampling rate. If <code>None</code>, the native sampling rate is used.`,name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to decode the audio data. If <code>False</code>,
returns the underlying dictionary in the format <code>{&quot;path&quot;: audio_path, &quot;bytes&quot;: audio_bytes}</code>.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/audio.py#L20"}}),$c=new C({props:{anchor:"datasets.Audio.example",$$slots:{default:[O9]},$$scope:{ctx:v}}}),Km=new k({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:`<strong>storage</strong> (<code>Union[pa.StringArray, pa.StructArray]</code>) &#x2014;
PyArrow array to cast.`,name:"storage"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/audio.py#L206",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Array in the Audio arrow storage type, that is
<code>pa.struct(&#123;"bytes": pa.binary(), "path": pa.string()&#125;)</code></p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>pa.StructArray</code></p>
`}}),Om=new k({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:": typing.Optional[dict[str, typing.Union[str, bool, NoneType]]] = None"}],parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014;
A dictionary with keys:</p>
<ul>
<li><code>path</code>: String with relative audio file path.</li>
<li><code>bytes</code>: Bytes of the audio file.</li>
</ul>`,name:"value"},{anchor:"datasets.Audio.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
To access and decode
audio files from private repositories on the Hub, you can pass
a dictionary repo_id (<code>str</code>) -&gt; token (<code>bool</code> or <code>str</code>)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/audio.py#L126",returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict</code></p>
`}}),eh=new k({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"}],parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:`<strong>storage</strong> (<code>pa.StructArray</code>) &#x2014;
PyArrow array to embed.`,name:"storage"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/audio.py#L244",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Array in the Audio arrow storage type, that is
<code>pa.struct(&#123;"bytes": pa.binary(), "path": pa.string()&#125;)</code>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>pa.StructArray</code></p>
`}}),th=new k({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, bytes, bytearray, dict]"}],parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:`<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014;
Data passed as input to Audio feature.`,name:"value"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/audio.py#L77",returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict</code></p>
`}}),sh=new k({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/audio.py#L195"}}),ah=new fe({props:{title:"Image",local:"datasets.Image",headingTag:"h3"}}),nh=new k({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"mode",val:": typing.Optional[str] = None"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Image.mode",description:`<strong>mode</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The mode to convert the image to. If <code>None</code>, the native mode of the image is used.`,name:"mode"},{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to decode the image data. If <code>False</code>,
returns the underlying dictionary in the format <code>{&quot;path&quot;: image_path, &quot;bytes&quot;: image_bytes}</code>.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/image.py#L45"}}),Jc=new C({props:{anchor:"datasets.Image.example",$$slots:{default:[e6]},$$scope:{ctx:v}}}),lh=new k({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:`<strong>storage</strong> (<code>Union[pa.StringArray, pa.StructArray, pa.ListArray]</code>) &#x2014;
PyArrow array to cast.`,name:"storage"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/image.py#L207",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Array in the Image arrow storage type, that is
<code>pa.struct(&#123;"bytes": pa.binary(), "path": pa.string()&#125;)</code>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>pa.StructArray</code></p>
`}}),rh=new k({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014;
A string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li><code>path</code>: String with absolute or relative image file path.</li>
<li><code>bytes</code>: The bytes of the image file.</li>
</ul>`,name:"value"},{anchor:"datasets.Image.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
To access and decode
image files from private repositories on the Hub, you can pass
a dictionary repo_id (<code>str</code>) -&gt; token (<code>bool</code> or <code>str</code>).`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/image.py#L133",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>PIL.Image.Image</code></p>
`}}),oh=new k({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"}],parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:`<strong>storage</strong> (<code>pa.StructArray</code>) &#x2014;
PyArrow array to embed.`,name:"storage"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/image.py#L253",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Array in the Image arrow storage type, that is
<code>pa.struct(&#123;"bytes": pa.binary(), "path": pa.string()&#125;)</code>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>pa.StructArray</code></p>
`}}),ch=new k({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, bytes, bytearray, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:`<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014;
Data passed as input to Image feature.`,name:"value"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/image.py#L94",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict</code> with “path” and “bytes” fields</p>
`}}),ph=new k({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/image.py#L194"}}),dh=new fe({props:{title:"Video",local:"datasets.Video",headingTag:"h3"}}),ih=new k({props:{name:"class datasets.Video",anchor:"datasets.Video",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Video.mode",description:`<strong>mode</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The mode to convert the video to. If <code>None</code>, the native mode of the video is used.`,name:"mode"},{anchor:"datasets.Video.decode",description:`<strong>decode</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to decode the video data. If <code>False</code>,
returns the underlying dictionary in the format <code>{&quot;path&quot;: video_path, &quot;bytes&quot;: video_bytes}</code>.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/video.py#L26"}}),Uc=new C({props:{anchor:"datasets.Video.example",$$slots:{default:[t6]},$$scope:{ctx:v}}}),mh=new k({props:{name:"cast_storage",anchor:"datasets.Video.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Video.cast_storage.storage",description:`<strong>storage</strong> (<code>Union[pa.StringArray, pa.StructArray, pa.ListArray]</code>) &#x2014;
PyArrow array to cast.`,name:"storage"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/video.py#L182",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Array in the Video arrow storage type, that is
<code>pa.struct(&#123;"bytes": pa.binary(), "path": pa.string()&#125;)</code>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>pa.StructArray</code></p>
`}}),hh=new k({props:{name:"decode_example",anchor:"datasets.Video.decode_example",parameters:[{name:"value",val:": typing.Union[str, datasets.features.video.Example]"},{name:"token_per_repo_id",val:": typing.Optional[dict[str, typing.Union[bool, str]]] = None"}],parametersDescription:[{anchor:"datasets.Video.decode_example.value",description:`<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014;
A string with the absolute video file path, a dictionary with
keys:</p>
<ul>
<li><code>path</code>: String with absolute or relative video file path.</li>
<li><code>bytes</code>: The bytes of the video file.</li>
</ul>`,name:"value"},{anchor:"datasets.Video.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
To access and decode
video files from private repositories on the Hub, you can pass
a dictionary repo_id (<code>str</code>) -&gt; token (<code>bool</code> or <code>str</code>).`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/video.py#L118",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>torchvision.io.VideoReader</code></p>
`}}),uh=new k({props:{name:"encode_example",anchor:"datasets.Video.encode_example",parameters:[{name:"value",val:": typing.Union[str, bytes, bytearray, datasets.features.video.Example, numpy.ndarray, ForwardRef('VideoReader')]"}],parametersDescription:[{anchor:"datasets.Video.encode_example.value",description:`<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>VideoReader</code> or <code>dict</code>) &#x2014;
Data passed as input to Video feature.`,name:"value"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/video.py#L74",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict</code> with “path” and “bytes” fields</p>
`}}),gh=new k({props:{name:"flatten",anchor:"datasets.Video.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/video.py#L169"}}),fh=new fe({props:{title:"Pdf",local:"datasets.Pdf",headingTag:"h3"}}),bh=new k({props:{name:"class datasets.Pdf",anchor:"datasets.Pdf",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Pdf.mode",description:`<strong>mode</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The mode to convert the pdf to. If <code>None</code>, the native mode of the pdf is used.`,name:"mode"},{anchor:"datasets.Pdf.decode",description:`<strong>decode</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to decode the pdf data. If <code>False</code>,
returns the underlying dictionary in the format <code>{&quot;path&quot;: pdf_path, &quot;bytes&quot;: pdf_bytes}</code>.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/pdf.py#L29"}}),Gc=new C({props:{anchor:"datasets.Pdf.example",$$slots:{default:[s6]},$$scope:{ctx:v}}}),_h=new k({props:{name:"cast_storage",anchor:"datasets.Pdf.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Pdf.cast_storage.storage",description:`<strong>storage</strong> (<code>Union[pa.StringArray, pa.StructArray, pa.ListArray]</code>) &#x2014;
PyArrow array to cast.`,name:"storage"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/pdf.py#L182",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p>Array in the Pdf arrow storage type, that is
<code>pa.struct(&#123;"bytes": pa.binary(), "path": pa.string()&#125;)</code>.</p>
`,returnType:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>pa.StructArray</code></p>
`}}),xh=new k({props:{name:"decode_example",anchor:"datasets.Pdf.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Pdf.decode_example.value",description:`<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014;
A string with the absolute pdf file path, a dictionary with
keys:</p>
<ul>
<li><code>path</code>: String with absolute or relative pdf file path.</li>
<li><code>bytes</code>: The bytes of the pdf file.</li>
</ul>`,name:"value"},{anchor:"datasets.Pdf.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
To access and decode pdf files from private repositories on
the Hub, you can pass a dictionary
repo_id (<code>str</code>) -&gt; token (<code>bool</code> or <code>str</code>).`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/pdf.py#L111",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>pdfplumber.pdf.PDF</code></p>
`}}),yh=new k({props:{name:"encode_example",anchor:"datasets.Pdf.encode_example",parameters:[{name:"value",val:": typing.Union[str, bytes, bytearray, dict, ForwardRef('pdfplumber.pdf.PDF')]"}],parametersDescription:[{anchor:"datasets.Pdf.encode_example.value",description:`<strong>value</strong> (<code>str</code>, <code>bytes</code>, <code>pdfplumber.pdf.PDF</code> or <code>dict</code>) &#x2014;
Data passed as input to Pdf feature.`,name:"value"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/pdf.py#L78",returnDescription:`<script context="module">export const metadata = 'undefined';<\/script>


<p><code>dict</code> with “path” and “bytes” fields</p>
`}}),jh=new k({props:{name:"flatten",anchor:"datasets.Pdf.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/features/pdf.py#L169"}}),$h=new fe({props:{title:"Filesystems",local:"datasets.filesystems.is_remote_filesystem",headingTag:"h2"}}),vh=new k({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:`<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014;
An abstract super-class for pythonic file-systems, e.g. <code>fsspec.filesystem(&apos;file&apos;)</code> or <code>s3fs.S3FileSystem</code>.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/filesystems/__init__.py#L28"}}),wh=new fe({props:{title:"Fingerprint",local:"datasets.fingerprint.Hasher",headingTag:"h2"}}),Mh=new k({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/3.6.0/src/datasets/fingerprint.py#L170"}}),kh=new n5({props:{source:"https://github.com/huggingface/datasets/blob/main/docs/source/package_reference/main_classes.mdx"}}),{c(){t=p("meta"),y=l(),o=p("p"),a=l(),g(c.$$.fragment),e=l(),g(m.$$.fragment),B=l(),V=p("div"),g(Ec.$$.fragment),O2=l(),Yh=p("p"),Yh.textContent=pU,e$=l(),Lh=p("p"),Lh.innerHTML=dU,t$=l(),Sh=p("p"),Sh.textContent=iU,s$=l(),Ve=p("div"),g(Qc.$$.fragment),a$=l(),Ah=p("p"),Ah.innerHTML=mU,n$=l(),Ph=p("p"),Ph.innerHTML=hU,l$=l(),Kh=p("p"),Kh.textContent=uU,r$=l(),g(sl.$$.fragment),o$=l(),ms=p("div"),g(Yc.$$.fragment),c$=l(),Oh=p("p"),Oh.innerHTML=gU,p$=l(),g(al.$$.fragment),Uj=l(),g(Lc.$$.fragment),Zj=l(),Sc=p("p"),Sc.innerHTML=fU,Rj=l(),J=p("div"),g(Ac.$$.fragment),d$=l(),eu=p("p"),eu.textContent=bU,i$=l(),ft=p("div"),g(Pc.$$.fragment),m$=l(),tu=p("p"),tu.textContent=_U,h$=l(),g(Kc.$$.fragment),u$=l(),g(nl.$$.fragment),g$=l(),bt=p("div"),g(Oc.$$.fragment),f$=l(),su=p("p"),su.textContent=xU,b$=l(),g(ep.$$.fragment),_$=l(),g(ll.$$.fragment),x$=l(),rl=p("div"),g(tp.$$.fragment),y$=l(),au=p("p"),au.textContent=yU,j$=l(),ol=p("div"),g(sp.$$.fragment),$$=l(),nu=p("p"),nu.textContent=jU,v$=l(),be=p("div"),g(ap.$$.fragment),w$=l(),lu=p("p"),lu.innerHTML=$U,M$=l(),ru=p("p"),ru.innerHTML=vU,k$=l(),ou=p("p"),ou.innerHTML=wU,J$=l(),cu=p("p"),cu.textContent=MU,T$=l(),g(cl.$$.fragment),D$=l(),hs=p("div"),g(np.$$.fragment),C$=l(),pu=p("p"),pu.innerHTML=kU,I$=l(),du=p("p"),du.textContent=JU,U$=l(),_t=p("div"),g(lp.$$.fragment),Z$=l(),iu=p("p"),iu.textContent=TU,R$=l(),g(pl.$$.fragment),F$=l(),g(dl.$$.fragment),G$=l(),us=p("div"),g(rp.$$.fragment),N$=l(),mu=p("p"),mu.textContent=DU,z$=l(),g(il.$$.fragment),X$=l(),gs=p("div"),g(op.$$.fragment),V$=l(),hu=p("p"),hu.textContent=CU,q$=l(),g(ml.$$.fragment),B$=l(),fs=p("div"),g(cp.$$.fragment),W$=l(),uu=p("p"),uu.textContent=IU,H$=l(),g(hl.$$.fragment),E$=l(),bs=p("div"),g(pp.$$.fragment),Q$=l(),gu=p("p"),gu.innerHTML=UU,Y$=l(),g(ul.$$.fragment),L$=l(),_s=p("div"),g(dp.$$.fragment),S$=l(),fu=p("p"),fu.textContent=ZU,A$=l(),g(gl.$$.fragment),P$=l(),xs=p("div"),g(ip.$$.fragment),K$=l(),bu=p("p"),bu.textContent=RU,O$=l(),g(fl.$$.fragment),e0=l(),xt=p("div"),g(mp.$$.fragment),t0=l(),_u=p("p"),_u.textContent=FU,s0=l(),xu=p("p"),xu.textContent=GU,a0=l(),g(bl.$$.fragment),n0=l(),ys=p("div"),g(hp.$$.fragment),l0=l(),yu=p("p"),yu.textContent=NU,r0=l(),g(_l.$$.fragment),o0=l(),js=p("div"),g(up.$$.fragment),c0=l(),ju=p("p"),ju.textContent=zU,p0=l(),g(xl.$$.fragment),d0=l(),$s=p("div"),g(gp.$$.fragment),i0=l(),$u=p("p"),$u.textContent=XU,m0=l(),g(yl.$$.fragment),h0=l(),yt=p("div"),g(fp.$$.fragment),u0=l(),vu=p("p"),vu.textContent=VU,g0=l(),wu=p("p"),wu.innerHTML=qU,f0=l(),g(jl.$$.fragment),b0=l(),vs=p("div"),g(bp.$$.fragment),_0=l(),Mu=p("p"),Mu.textContent=BU,x0=l(),g($l.$$.fragment),y0=l(),ws=p("div"),g(_p.$$.fragment),j0=l(),ku=p("p"),ku.textContent=WU,$0=l(),g(vl.$$.fragment),v0=l(),Ms=p("div"),g(xp.$$.fragment),w0=l(),Ju=p("p"),Ju.textContent=HU,M0=l(),g(wl.$$.fragment),k0=l(),ks=p("div"),g(yp.$$.fragment),J0=l(),Tu=p("p"),Tu.innerHTML=EU,T0=l(),g(Ml.$$.fragment),D0=l(),Js=p("div"),g(jp.$$.fragment),C0=l(),Du=p("p"),Du.textContent=QU,I0=l(),g(kl.$$.fragment),U0=l(),Ts=p("div"),g($p.$$.fragment),Z0=l(),Cu=p("p"),Cu.textContent=YU,R0=l(),Iu=p("p"),Iu.innerHTML=LU,F0=l(),Ds=p("div"),g(vp.$$.fragment),G0=l(),Uu=p("p"),Uu.innerHTML=SU,N0=l(),Zu=p("p"),Zu.innerHTML=AU,z0=l(),Jl=p("div"),g(wp.$$.fragment),X0=l(),Ru=p("p"),Ru.innerHTML=PU,V0=l(),qe=p("div"),g(Mp.$$.fragment),q0=l(),Fu=p("p"),Fu.innerHTML=KU,B0=l(),Gu=p("p"),Gu.innerHTML=OU,W0=l(),g(Tl.$$.fragment),H0=l(),g(Dl.$$.fragment),E0=l(),Cs=p("div"),g(kp.$$.fragment),Q0=l(),Nu=p("p"),Nu.innerHTML=eZ,Y0=l(),g(Cl.$$.fragment),L0=l(),jt=p("div"),g(Jp.$$.fragment),S0=l(),zu=p("p"),zu.innerHTML=tZ,A0=l(),Xu=p("p"),Xu.innerHTML=sZ,P0=l(),g(Il.$$.fragment),K0=l(),Be=p("div"),g(Tp.$$.fragment),O0=l(),Vu=p("p"),Vu.innerHTML=aZ,e1=l(),qu=p("p"),qu.innerHTML=nZ,t1=l(),Bu=p("p"),Bu.innerHTML=lZ,s1=l(),g(Ul.$$.fragment),a1=l(),We=p("div"),g(Dp.$$.fragment),n1=l(),Wu=p("p"),Wu.innerHTML=rZ,l1=l(),Hu=p("p"),Hu.innerHTML=oZ,r1=l(),Eu=p("p"),Eu.innerHTML=cZ,o1=l(),g(Zl.$$.fragment),c1=l(),Rl=p("div"),g(Cp.$$.fragment),p1=l(),Qu=p("p"),Qu.textContent=pZ,d1=l(),$t=p("div"),g(Ip.$$.fragment),i1=l(),Yu=p("p"),Yu.textContent=dZ,m1=l(),Lu=p("p"),Lu.textContent=iZ,h1=l(),g(Fl.$$.fragment),u1=l(),_e=p("div"),g(Up.$$.fragment),g1=l(),Su=p("p"),Su.textContent=mZ,f1=l(),Au=p("p"),Au.innerHTML=hZ,b1=l(),Pu=p("ul"),Pu.innerHTML=uZ,_1=l(),Ku=p("p"),Ku.innerHTML=gZ,x1=l(),g(Gl.$$.fragment),y1=l(),vt=p("div"),g(Zp.$$.fragment),j1=l(),Ou=p("p"),Ou.textContent=fZ,$1=l(),eg=p("p"),eg.innerHTML=bZ,v1=l(),g(Nl.$$.fragment),w1=l(),Is=p("div"),g(Rp.$$.fragment),M1=l(),tg=p("p"),tg.textContent=_Z,k1=l(),g(zl.$$.fragment),J1=l(),Us=p("div"),g(Fp.$$.fragment),T1=l(),sg=p("p"),sg.textContent=xZ,D1=l(),g(Xl.$$.fragment),C1=l(),O=p("div"),g(Gp.$$.fragment),I1=l(),ag=p("p"),ag.textContent=yZ,U1=l(),ng=p("p"),ng.textContent=jZ,Z1=l(),lg=p("p"),lg.innerHTML=$Z,R1=l(),g(Vl.$$.fragment),F1=l(),rg=p("p"),rg.innerHTML=vZ,G1=l(),g(ql.$$.fragment),N1=l(),g(Bl.$$.fragment),z1=l(),Zs=p("div"),g(Np.$$.fragment),X1=l(),og=p("p"),og.innerHTML=wZ,V1=l(),g(Wl.$$.fragment),q1=l(),Rs=p("div"),g(zp.$$.fragment),B1=l(),cg=p("p"),cg.innerHTML=MZ,W1=l(),g(Hl.$$.fragment),H1=l(),wt=p("div"),g(Xp.$$.fragment),E1=l(),pg=p("p"),pg.innerHTML=kZ,Q1=l(),dg=p("p"),dg.innerHTML=JZ,Y1=l(),g(El.$$.fragment),L1=l(),ne=p("div"),g(Vp.$$.fragment),S1=l(),ig=p("p"),ig.innerHTML=TZ,A1=l(),mg=p("p"),mg.innerHTML=DZ,P1=l(),hg=p("p"),hg.innerHTML=CZ,K1=l(),ug=p("p"),ug.innerHTML=IZ,O1=l(),gg=p("p"),gg.innerHTML=UZ,ev=l(),g(Ql.$$.fragment),tv=l(),Mt=p("div"),g(qp.$$.fragment),sv=l(),fg=p("p"),fg.innerHTML=ZZ,av=l(),bg=p("p"),bg.textContent=RZ,nv=l(),g(Yl.$$.fragment),lv=l(),Fs=p("div"),g(Bp.$$.fragment),rv=l(),_g=p("p"),_g.innerHTML=FZ,ov=l(),g(Ll.$$.fragment),cv=l(),xe=p("div"),g(Wp.$$.fragment),pv=l(),xg=p("p"),xg.textContent=GZ,dv=l(),yg=p("p"),yg.innerHTML=NZ,iv=l(),g(Sl.$$.fragment),mv=l(),g(Al.$$.fragment),hv=l(),g(Pl.$$.fragment),uv=l(),He=p("div"),g(Hp.$$.fragment),gv=l(),jg=p("p"),jg.innerHTML=zZ,fv=l(),$g=p("p"),$g.innerHTML=XZ,bv=l(),vg=p("p"),vg.textContent=VZ,_v=l(),g(Kl.$$.fragment),xv=l(),Gs=p("div"),g(Ep.$$.fragment),yv=l(),wg=p("p"),wg.innerHTML=qZ,jv=l(),g(Ol.$$.fragment),$v=l(),er=p("div"),g(Qp.$$.fragment),vv=l(),Mg=p("p"),Mg.textContent=BZ,wv=l(),Ns=p("div"),g(Yp.$$.fragment),Mv=l(),kg=p("p"),kg.textContent=WZ,kv=l(),g(tr.$$.fragment),Jv=l(),zs=p("div"),g(Lp.$$.fragment),Tv=l(),Jg=p("p"),Jg.innerHTML=HZ,Dv=l(),g(sr.$$.fragment),Cv=l(),Xs=p("div"),g(Sp.$$.fragment),Iv=l(),Tg=p("p"),Tg.textContent=EZ,Uv=l(),g(ar.$$.fragment),Zv=l(),kt=p("div"),g(Ap.$$.fragment),Rv=l(),Dg=p("p"),Dg.textContent=QZ,Fv=l(),Cg=p("p"),Cg.innerHTML=YZ,Gv=l(),g(nr.$$.fragment),Nv=l(),Vs=p("div"),g(Pp.$$.fragment),zv=l(),Ig=p("p"),Ig.textContent=LZ,Xv=l(),g(lr.$$.fragment),Vv=l(),qs=p("div"),g(Kp.$$.fragment),qv=l(),Ug=p("p"),Ug.textContent=SZ,Bv=l(),g(rr.$$.fragment),Wv=l(),N=p("div"),g(Op.$$.fragment),Hv=l(),Zg=p("p"),Zg.innerHTML=AZ,Ev=l(),Rg=p("p"),Rg.textContent=PZ,Qv=l(),Fg=p("p"),Fg.innerHTML=KZ,Yv=l(),Gg=p("p"),Gg.innerHTML=OZ,Lv=l(),Ng=p("p"),Ng.textContent=e3,Sv=l(),g(or.$$.fragment),Av=l(),g(cr.$$.fragment),Pv=l(),g(pr.$$.fragment),Kv=l(),g(dr.$$.fragment),Ov=l(),g(ir.$$.fragment),ew=l(),zg=p("p"),zg.textContent=t3,tw=l(),g(mr.$$.fragment),sw=l(),g(hr.$$.fragment),aw=rU("\nFeel free to also use `IterableDataset.set_epoch()` when using a PyTorch DataLoader or in distributed setups."),nw=l(),Jt=p("div"),g(ed.$$.fragment),lw=l(),Xg=p("p"),Xg.innerHTML=s3,rw=l(),Vg=p("ul"),Vg.innerHTML=a3,ow=l(),g(ur.$$.fragment),cw=l(),Bs=p("div"),g(td.$$.fragment),pw=l(),qg=p("p"),qg.innerHTML=n3,dw=l(),Bg=p("ul"),Bg.innerHTML=l3,iw=l(),gr=p("div"),g(sd.$$.fragment),mw=l(),Wg=p("p"),Wg.textContent=r3,hw=l(),Ws=p("div"),g(ad.$$.fragment),uw=l(),Hg=p("p"),Hg.textContent=o3,gw=l(),Eg=p("p"),Eg.innerHTML=c3,fw=l(),Hs=p("div"),g(nd.$$.fragment),bw=l(),Qg=p("p"),Qg.textContent=p3,_w=l(),g(fr.$$.fragment),xw=l(),br=p("div"),g(ld.$$.fragment),yw=l(),Yg=p("p"),Yg.textContent=d3,jw=l(),_r=p("div"),g(rd.$$.fragment),$w=l(),Lg=p("p"),Lg.innerHTML=i3,vw=l(),xr=p("div"),g(od.$$.fragment),ww=l(),Sg=p("p"),Sg.innerHTML=m3,Mw=l(),yr=p("div"),g(cd.$$.fragment),kw=l(),Ag=p("p"),Ag.textContent=h3,Jw=l(),jr=p("div"),g(pd.$$.fragment),Tw=l(),Pg=p("p"),Pg.textContent=u3,Dw=l(),$r=p("div"),g(dd.$$.fragment),Cw=l(),Kg=p("p"),Kg.textContent=g3,Iw=l(),vr=p("div"),g(id.$$.fragment),Uw=l(),Og=p("p"),Og.textContent=f3,Zw=l(),wr=p("div"),g(md.$$.fragment),Rw=l(),ef=p("p"),ef.textContent=b3,Fw=l(),Mr=p("div"),g(hd.$$.fragment),Gw=l(),tf=p("p"),tf.innerHTML=_3,Nw=l(),kr=p("div"),g(ud.$$.fragment),zw=l(),sf=p("p"),sf.innerHTML=x3,Xw=l(),af=p("div"),g(gd.$$.fragment),Vw=l(),nf=p("div"),g(fd.$$.fragment),qw=l(),lf=p("div"),g(bd.$$.fragment),Bw=l(),rf=p("div"),g(_d.$$.fragment),Ww=l(),of=p("div"),g(xd.$$.fragment),Hw=l(),cf=p("div"),g(yd.$$.fragment),Ew=l(),pf=p("div"),g(jd.$$.fragment),Qw=l(),df=p("div"),g($d.$$.fragment),Yw=l(),mf=p("div"),g(vd.$$.fragment),Lw=l(),hf=p("div"),g(wd.$$.fragment),Sw=l(),uf=p("div"),g(Md.$$.fragment),Aw=l(),gf=p("div"),g(kd.$$.fragment),Pw=l(),ff=p("div"),g(Jd.$$.fragment),Kw=l(),Es=p("div"),g(Td.$$.fragment),Ow=l(),bf=p("p"),bf.textContent=y3,eM=l(),g(Jr.$$.fragment),tM=l(),Qs=p("div"),g(Dd.$$.fragment),sM=l(),_f=p("p"),_f.textContent=j3,aM=l(),g(Tr.$$.fragment),nM=l(),Ys=p("div"),g(Cd.$$.fragment),lM=l(),xf=p("p"),xf.textContent=$3,rM=l(),g(Dr.$$.fragment),oM=l(),Ls=p("div"),g(Id.$$.fragment),cM=l(),yf=p("p"),yf.textContent=v3,pM=l(),g(Cr.$$.fragment),dM=l(),Tt=p("div"),g(Ud.$$.fragment),iM=l(),jf=p("p"),jf.textContent=w3,mM=l(),g(Ir.$$.fragment),hM=l(),g(Ur.$$.fragment),uM=l(),Ss=p("div"),g(Zd.$$.fragment),gM=l(),$f=p("p"),$f.innerHTML=M3,fM=l(),g(Zr.$$.fragment),Fj=l(),Vt=p("div"),g(Rd.$$.fragment),bM=l(),vf=p("p"),vf.innerHTML=k3,_M=l(),g(Rr.$$.fragment),Gj=l(),E=p("div"),g(Fd.$$.fragment),xM=l(),wf=p("p"),wf.textContent=J3,yM=l(),Mf=p("p"),Mf.innerHTML=T3,jM=l(),kf=p("ul"),kf.innerHTML=D3,$M=l(),Jf=p("p"),Jf.innerHTML=C3,vM=l(),Tf=p("p"),Tf.textContent=I3,wM=l(),Df=p("p"),Df.textContent=U3,MM=l(),Cf=p("p"),Cf.textContent=Z3,kM=l(),g(Fr.$$.fragment),Nj=l(),ie=p("div"),g(Gd.$$.fragment),JM=l(),If=p("p"),If.innerHTML=R3,TM=l(),Uf=p("p"),Uf.textContent=F3,DM=l(),Zf=p("p"),Zf.textContent=G3,CM=l(),Rf=p("p"),Rf.textContent=N3,IM=l(),Ff=p("p"),Ff.innerHTML=z3,zj=l(),Je=p("div"),g(Nd.$$.fragment),UM=l(),Gf=p("p"),Gf.textContent=X3,ZM=l(),Nf=p("p"),Nf.textContent=V3,RM=l(),zf=p("p"),zf.textContent=q3,FM=l(),Xf=p("ul"),Xf.innerHTML=B3,Xj=l(),Te=p("div"),g(zd.$$.fragment),GM=l(),Vf=p("p"),Vf.textContent=W3,NM=l(),qf=p("p"),qf.textContent=H3,zM=l(),Bf=p("p"),Bf.textContent=E3,XM=l(),Wf=p("ul"),Wf.innerHTML=Q3,Vj=l(),De=p("div"),g(Xd.$$.fragment),VM=l(),Hf=p("p"),Hf.textContent=Y3,qM=l(),Ef=p("p"),Ef.textContent=L3,BM=l(),Qf=p("p"),Qf.textContent=S3,WM=l(),Yf=p("ul"),Yf.innerHTML=A3,qj=l(),g(Vd.$$.fragment),Bj=l(),qd=p("p"),qd.innerHTML=P3,Wj=l(),R=p("div"),g(Bd.$$.fragment),HM=l(),Lf=p("p"),Lf.textContent=K3,EM=l(),As=p("div"),g(Wd.$$.fragment),QM=l(),Sf=p("p"),Sf.textContent=O3,YM=l(),g(Gr.$$.fragment),LM=l(),Ps=p("div"),g(Hd.$$.fragment),SM=l(),Af=p("p"),Af.textContent=e4,AM=l(),g(Nr.$$.fragment),PM=l(),Ks=p("div"),g(Ed.$$.fragment),KM=l(),Pf=p("p"),Pf.textContent=t4,OM=l(),g(zr.$$.fragment),ek=l(),Os=p("div"),g(Qd.$$.fragment),tk=l(),Kf=p("p"),Kf.textContent=s4,sk=l(),g(Xr.$$.fragment),ak=l(),ea=p("div"),g(Yd.$$.fragment),nk=l(),Of=p("p"),Of.textContent=a4,lk=l(),g(Vr.$$.fragment),rk=l(),ta=p("div"),g(Ld.$$.fragment),ok=l(),eb=p("p"),eb.textContent=n4,ck=l(),g(qr.$$.fragment),pk=l(),Dt=p("div"),g(Sd.$$.fragment),dk=l(),tb=p("p"),tb.textContent=l4,ik=l(),sb=p("p"),sb.textContent=r4,mk=l(),g(Br.$$.fragment),hk=l(),sa=p("div"),g(Ad.$$.fragment),uk=l(),ab=p("p"),ab.textContent=o4,gk=l(),g(Wr.$$.fragment),fk=l(),ye=p("div"),g(Pd.$$.fragment),bk=l(),nb=p("p"),nb.textContent=c4,_k=l(),lb=p("p"),lb.innerHTML=p4,xk=l(),rb=p("ul"),rb.innerHTML=d4,yk=l(),ob=p("p"),ob.innerHTML=i4,jk=l(),g(Hr.$$.fragment),$k=l(),aa=p("div"),g(Kd.$$.fragment),vk=l(),cb=p("p"),cb.textContent=m4,wk=l(),g(Er.$$.fragment),Mk=l(),na=p("div"),g(Od.$$.fragment),kk=l(),pb=p("p"),pb.textContent=h4,Jk=l(),g(Qr.$$.fragment),Tk=l(),Ee=p("div"),g(ei.$$.fragment),Dk=l(),db=p("p"),db.textContent=u4,Ck=l(),ib=p("p"),ib.textContent=g4,Ik=l(),mb=p("p"),mb.textContent=f4,Uk=l(),g(Yr.$$.fragment),Zk=l(),Qe=p("div"),g(ti.$$.fragment),Rk=l(),hb=p("p"),hb.innerHTML=b4,Fk=l(),ub=p("p"),ub.innerHTML=_4,Gk=l(),gb=p("p"),gb.innerHTML=x4,Nk=l(),g(Lr.$$.fragment),zk=l(),Ct=p("div"),g(si.$$.fragment),Xk=l(),fb=p("p"),fb.innerHTML=y4,Vk=l(),bb=p("p"),bb.innerHTML=j4,qk=l(),g(Sr.$$.fragment),Bk=l(),Ar=p("div"),g(ai.$$.fragment),Wk=l(),_b=p("p"),_b.innerHTML=$4,Hk=l(),Ye=p("div"),g(ni.$$.fragment),Ek=l(),xb=p("p"),xb.innerHTML=v4,Qk=l(),yb=p("p"),yb.innerHTML=w4,Yk=l(),jb=p("p"),jb.innerHTML=M4,Lk=l(),g(Pr.$$.fragment),Sk=l(),Le=p("div"),g(li.$$.fragment),Ak=l(),$b=p("p"),$b.innerHTML=k4,Pk=l(),vb=p("p"),vb.innerHTML=J4,Kk=l(),wb=p("p"),wb.innerHTML=T4,Ok=l(),g(Kr.$$.fragment),eJ=l(),la=p("div"),g(ri.$$.fragment),tJ=l(),Mb=p("p"),Mb.textContent=D4,sJ=l(),g(Or.$$.fragment),aJ=l(),ra=p("div"),g(oi.$$.fragment),nJ=l(),kb=p("p"),kb.textContent=C4,lJ=l(),g(eo.$$.fragment),rJ=l(),oa=p("div"),g(ci.$$.fragment),oJ=l(),Jb=p("p"),Jb.textContent=I4,cJ=l(),g(to.$$.fragment),pJ=l(),Se=p("div"),g(pi.$$.fragment),dJ=l(),Tb=p("p"),Tb.textContent=U4,iJ=l(),Db=p("p"),Db.textContent=Z4,mJ=l(),Cb=p("p"),Cb.innerHTML=R4,hJ=l(),g(so.$$.fragment),uJ=l(),Ae=p("div"),g(di.$$.fragment),gJ=l(),Ib=p("p"),Ib.textContent=F4,fJ=l(),Ub=p("p"),Ub.innerHTML=G4,bJ=l(),Zb=p("ul"),Zb.innerHTML=N4,_J=l(),g(ao.$$.fragment),xJ=l(),ca=p("div"),g(ii.$$.fragment),yJ=l(),Rb=p("p"),Rb.textContent=z4,jJ=l(),g(no.$$.fragment),$J=l(),It=p("div"),g(mi.$$.fragment),vJ=l(),Fb=p("p"),Fb.textContent=X4,wJ=l(),Gb=p("p"),Gb.textContent=V4,MJ=l(),g(lo.$$.fragment),kJ=l(),pa=p("div"),g(hi.$$.fragment),JJ=l(),Nb=p("p"),Nb.innerHTML=q4,TJ=l(),g(ro.$$.fragment),DJ=l(),je=p("div"),g(ui.$$.fragment),CJ=l(),zb=p("p"),zb.innerHTML=B4,IJ=l(),Xb=p("p"),Xb.textContent=W4,UJ=l(),Vb=p("p"),Vb.innerHTML=H4,ZJ=l(),g(oo.$$.fragment),RJ=l(),g(co.$$.fragment),FJ=l(),Pe=p("div"),g(gi.$$.fragment),GJ=l(),qb=p("p"),qb.innerHTML=E4,NJ=l(),Bb=p("p"),Bb.innerHTML=Q4,zJ=l(),Wb=p("p"),Wb.textContent=Y4,XJ=l(),g(po.$$.fragment),VJ=l(),da=p("div"),g(fi.$$.fragment),qJ=l(),Hb=p("p"),Hb.innerHTML=L4,BJ=l(),g(io.$$.fragment),WJ=l(),ia=p("div"),g(bi.$$.fragment),HJ=l(),Eb=p("p"),Eb.innerHTML=S4,EJ=l(),g(mo.$$.fragment),QJ=l(),ma=p("div"),g(_i.$$.fragment),YJ=l(),Qb=p("p"),Qb.innerHTML=A4,LJ=l(),g(ho.$$.fragment),SJ=l(),ha=p("div"),g(xi.$$.fragment),AJ=l(),Yb=p("p"),Yb.innerHTML=P4,PJ=l(),g(uo.$$.fragment),KJ=l(),ua=p("div"),g(yi.$$.fragment),OJ=l(),Lb=p("p"),Lb.innerHTML=K4,eT=l(),g(go.$$.fragment),Hj=l(),Sb=p("a"),Ej=l(),g(ji.$$.fragment),Qj=l(),$i=p("p"),$i.innerHTML=O4,Yj=l(),U=p("div"),g(vi.$$.fragment),tT=l(),Ab=p("p"),Ab.textContent=eR,sT=l(),Ut=p("div"),g(wi.$$.fragment),aT=l(),Pb=p("p"),Pb.textContent=tR,nT=l(),g(fo.$$.fragment),lT=l(),g(bo.$$.fragment),rT=l(),ga=p("div"),g(Mi.$$.fragment),oT=l(),Kb=p("p"),Kb.textContent=sR,cT=l(),g(_o.$$.fragment),pT=l(),fa=p("div"),g(ki.$$.fragment),dT=l(),Ob=p("p"),Ob.textContent=aR,iT=l(),g(xo.$$.fragment),mT=l(),ba=p("div"),g(Ji.$$.fragment),hT=l(),e_=p("p"),e_.textContent=nR,uT=l(),g(yo.$$.fragment),gT=l(),_a=p("div"),g(Ti.$$.fragment),fT=l(),t_=p("p"),t_.textContent=lR,bT=l(),g(jo.$$.fragment),_T=l(),S=p("div"),g(Di.$$.fragment),xT=l(),s_=p("p"),s_.textContent=rR,yT=l(),a_=p("p"),a_.textContent=oR,jT=l(),n_=p("ul"),n_.innerHTML=cR,$T=l(),l_=p("p"),l_.innerHTML=pR,vT=l(),r_=p("p"),r_.innerHTML=dR,wT=l(),o_=p("p"),o_.textContent=iR,MT=l(),g($o.$$.fragment),kT=l(),g(vo.$$.fragment),JT=l(),c_=p("div"),g(Ci.$$.fragment),TT=l(),wo=p("div"),g(Ii.$$.fragment),DT=l(),p_=p("p"),p_.innerHTML=mR,CT=l(),$e=p("div"),g(Ui.$$.fragment),IT=l(),d_=p("p"),d_.textContent=hR,UT=l(),i_=p("p"),i_.innerHTML=uR,ZT=l(),m_=p("ul"),m_.innerHTML=gR,RT=l(),h_=p("p"),h_.innerHTML=fR,FT=l(),g(Mo.$$.fragment),GT=l(),xa=p("div"),g(Zi.$$.fragment),NT=l(),u_=p("p"),u_.textContent=bR,zT=l(),g(ko.$$.fragment),XT=l(),Zt=p("div"),g(Ri.$$.fragment),VT=l(),g_=p("p"),g_.textContent=_R,qT=l(),f_=p("p"),f_.innerHTML=xR,BT=l(),g(Jo.$$.fragment),WT=l(),ve=p("div"),g(Fi.$$.fragment),HT=l(),b_=p("p"),b_.textContent=yR,ET=l(),__=p("p"),__.innerHTML=jR,QT=l(),x_=p("p"),x_.innerHTML=$R,YT=l(),y_=p("p"),y_.innerHTML=vR,LT=l(),g(To.$$.fragment),ST=l(),ya=p("div"),g(Gi.$$.fragment),AT=l(),j_=p("p"),j_.textContent=wR,PT=l(),g(Do.$$.fragment),KT=l(),ja=p("div"),g(Ni.$$.fragment),OT=l(),$_=p("p"),$_.innerHTML=MR,e7=l(),g(Co.$$.fragment),t7=l(),$a=p("div"),g(zi.$$.fragment),s7=l(),v_=p("p"),v_.innerHTML=kR,a7=l(),g(Io.$$.fragment),n7=l(),le=p("div"),g(Xi.$$.fragment),l7=l(),w_=p("p"),w_.innerHTML=JR,r7=l(),M_=p("p"),M_.innerHTML=TR,o7=l(),k_=p("p"),k_.innerHTML=DR,c7=l(),J_=p("p"),J_.innerHTML=CR,p7=l(),T_=p("p"),T_.innerHTML=IR,d7=l(),g(Uo.$$.fragment),i7=l(),Rt=p("div"),g(Vi.$$.fragment),m7=l(),D_=p("p"),D_.innerHTML=UR,h7=l(),C_=p("p"),C_.textContent=ZR,u7=l(),g(Zo.$$.fragment),g7=l(),re=p("div"),g(qi.$$.fragment),f7=l(),I_=p("p"),I_.textContent=RR,b7=l(),U_=p("p"),U_.textContent=FR,_7=l(),Z_=p("ol"),Z_.innerHTML=GR,x7=l(),g(Ro.$$.fragment),y7=l(),g(Fo.$$.fragment),j7=l(),g(Go.$$.fragment),$7=l(),oe=p("div"),g(Bi.$$.fragment),v7=l(),R_=p("p"),R_.textContent=NR,w7=l(),F_=p("p"),F_.textContent=zR,M7=l(),G_=p("ol"),G_.innerHTML=XR,k7=l(),g(No.$$.fragment),J7=l(),g(zo.$$.fragment),T7=l(),g(Xo.$$.fragment),D7=l(),Vo=p("div"),g(Wi.$$.fragment),C7=l(),N_=p("p"),N_.innerHTML=VR,I7=l(),qo=p("div"),g(Hi.$$.fragment),U7=l(),z_=p("p"),z_.innerHTML=qR,Z7=l(),X_=p("div"),g(Ei.$$.fragment),R7=l(),V_=p("div"),g(Qi.$$.fragment),F7=l(),q_=p("div"),g(Yi.$$.fragment),G7=l(),B_=p("div"),g(Li.$$.fragment),N7=l(),W_=p("div"),g(Si.$$.fragment),z7=l(),H_=p("div"),g(Ai.$$.fragment),X7=l(),E_=p("div"),g(Pi.$$.fragment),V7=l(),Q_=p("div"),g(Ki.$$.fragment),q7=l(),Y_=p("div"),g(Oi.$$.fragment),B7=l(),L_=p("div"),g(em.$$.fragment),W7=l(),S_=p("div"),g(tm.$$.fragment),H7=l(),A_=p("div"),g(sm.$$.fragment),E7=l(),P_=p("div"),g(am.$$.fragment),Lj=l(),g(nm.$$.fragment),Sj=l(),lm=p("p"),lm.innerHTML=BR,Aj=l(),q=p("div"),g(rm.$$.fragment),Q7=l(),we=p("div"),g(om.$$.fragment),Y7=l(),K_=p("p"),K_.textContent=WR,L7=l(),O_=p("p"),O_.innerHTML=HR,S7=l(),ex=p("ul"),ex.innerHTML=ER,A7=l(),tx=p("p"),tx.innerHTML=QR,P7=l(),g(Bo.$$.fragment),K7=l(),va=p("div"),g(cm.$$.fragment),O7=l(),sx=p("p"),sx.textContent=YR,eD=l(),g(Wo.$$.fragment),tD=l(),Me=p("div"),g(pm.$$.fragment),sD=l(),ax=p("p"),ax.textContent=LR,aD=l(),nx=p("p"),nx.textContent=SR,nD=l(),lx=p("p"),lx.innerHTML=AR,lD=l(),rx=p("p"),rx.innerHTML=PR,rD=l(),g(Ho.$$.fragment),oD=l(),wa=p("div"),g(dm.$$.fragment),cD=l(),ox=p("p"),ox.textContent=KR,pD=l(),g(Eo.$$.fragment),dD=l(),Ma=p("div"),g(im.$$.fragment),iD=l(),cx=p("p"),cx.textContent=OR,mD=l(),g(Qo.$$.fragment),hD=l(),ka=p("div"),g(mm.$$.fragment),uD=l(),px=p("p"),px.textContent=eF,gD=l(),g(Yo.$$.fragment),fD=l(),Ja=p("div"),g(hm.$$.fragment),bD=l(),dx=p("p"),dx.textContent=tF,_D=l(),g(Lo.$$.fragment),xD=l(),Ta=p("div"),g(um.$$.fragment),yD=l(),ix=p("p"),ix.textContent=sF,jD=l(),g(So.$$.fragment),$D=l(),Da=p("div"),g(gm.$$.fragment),vD=l(),mx=p("p"),mx.textContent=aF,wD=l(),g(Ao.$$.fragment),MD=l(),Ca=p("div"),g(fm.$$.fragment),kD=l(),hx=p("p"),hx.textContent=nF,JD=l(),g(Po.$$.fragment),Pj=l(),g(bm.$$.fragment),Kj=l(),G=p("div"),g(_m.$$.fragment),TD=l(),ux=p("p"),ux.textContent=lF,DD=l(),gx=p("p"),gx.innerHTML=rF,CD=l(),fx=p("p"),fx.innerHTML=oF,ID=l(),se=p("ul"),bx=p("li"),bx.innerHTML=cF,UD=l(),_x=p("li"),_x.innerHTML=pF,ZD=l(),xx=p("li"),xx.innerHTML=dF,RD=l(),xm=p("li"),yx=p("p"),yx.innerHTML=iF,FD=l(),g(Ko.$$.fragment),GD=l(),jx=p("li"),jx.innerHTML=mF,ND=l(),$x=p("li"),$x.innerHTML=hF,zD=l(),vx=p("li"),vx.innerHTML=uF,XD=l(),wx=p("li"),wx.innerHTML=gF,VD=l(),Ia=p("div"),g(ym.$$.fragment),qD=l(),Mx=p("p"),Mx.innerHTML=fF,BD=l(),g(Oo.$$.fragment),WD=l(),ec=p("div"),g(jm.$$.fragment),HD=l(),kx=p("p"),kx.textContent=bF,ED=l(),tc=p("div"),g($m.$$.fragment),QD=l(),Jx=p("p"),Jx.textContent=_F,YD=l(),sc=p("div"),g(vm.$$.fragment),LD=l(),Tx=p("p"),Tx.textContent=xF,SD=l(),ac=p("div"),g(wm.$$.fragment),AD=l(),Dx=p("p"),Dx.textContent=yF,PD=l(),nc=p("div"),g(Mm.$$.fragment),KD=l(),Cx=p("p"),Cx.textContent=jF,OD=l(),lc=p("div"),g(km.$$.fragment),eC=l(),Ix=p("p"),Ix.textContent=$F,tC=l(),Ft=p("div"),g(Jm.$$.fragment),sC=l(),Ux=p("p"),Ux.innerHTML=vF,aC=l(),Zx=p("p"),Zx.innerHTML=wF,nC=l(),g(rc.$$.fragment),lC=l(),Ua=p("div"),g(Tm.$$.fragment),rC=l(),Rx=p("p"),Rx.innerHTML=MF,oC=l(),Fx=p("p"),Fx.textContent=kF,cC=l(),Ke=p("div"),g(Dm.$$.fragment),pC=l(),Gx=p("p"),Gx.innerHTML=JF,dC=l(),Nx=p("p"),Nx.innerHTML=TF,iC=l(),zx=p("p"),zx.innerHTML=DF,mC=l(),g(oc.$$.fragment),hC=l(),Gt=p("div"),g(Cm.$$.fragment),uC=l(),Xx=p("p"),Xx.innerHTML=CF,gC=l(),Vx=p("p"),Vx.textContent=IF,fC=l(),g(cc.$$.fragment),Oj=l(),g(Im.$$.fragment),e2=l(),Ce=p("div"),g(Um.$$.fragment),bC=l(),qx=p("p"),qx.textContent=UF,_C=l(),Bx=p("p"),Bx.innerHTML=ZF,xC=l(),Wx=p("ul"),Wx.innerHTML=RF,yC=l(),g(pc.$$.fragment),t2=l(),Q=p("div"),g(Zm.$$.fragment),jC=l(),Hx=p("p"),Hx.textContent=FF,$C=l(),Ex=p("p"),Ex.innerHTML=GF,vC=l(),Qx=p("ul"),Qx.innerHTML=NF,wC=l(),Yx=p("p"),Yx.textContent=zF,MC=l(),g(dc.$$.fragment),kC=l(),Za=p("div"),g(Rm.$$.fragment),JC=l(),Lx=p("p"),Lx.innerHTML=XF,TC=l(),Sx=p("ul"),Sx.innerHTML=VF,DC=l(),Nt=p("div"),g(Fm.$$.fragment),CC=l(),Ax=p("p"),Ax.innerHTML=qF,IC=l(),Px=p("p"),Px.innerHTML=BF,UC=l(),g(ic.$$.fragment),ZC=l(),Ra=p("div"),g(Gm.$$.fragment),RC=l(),Kx=p("p"),Kx.innerHTML=WF,FC=l(),g(mc.$$.fragment),s2=l(),g(Nm.$$.fragment),a2=l(),qt=p("div"),g(zm.$$.fragment),GC=l(),Ox=p("p"),Ox.textContent=HF,NC=l(),ey=p("p"),ey.innerHTML=EF,n2=l(),Bt=p("div"),g(Xm.$$.fragment),zC=l(),ty=p("p"),ty.textContent=QF,XC=l(),g(hc.$$.fragment),l2=l(),g(Vm.$$.fragment),r2=l(),Oe=p("div"),g(qm.$$.fragment),VC=l(),sy=p("p"),sy.innerHTML=YF,qC=l(),g(uc.$$.fragment),BC=l(),gc=p("div"),g(Bm.$$.fragment),WC=l(),ay=p("p"),ay.textContent=LF,o2=l(),et=p("div"),g(Wm.$$.fragment),HC=l(),ny=p("p"),ny.innerHTML=SF,EC=l(),g(fc.$$.fragment),QC=l(),bc=p("div"),g(Hm.$$.fragment),YC=l(),ly=p("p"),ly.textContent=AF,c2=l(),g(Em.$$.fragment),p2=l(),Wt=p("div"),g(Qm.$$.fragment),LC=l(),ry=p("p"),ry.textContent=PF,SC=l(),g(_c.$$.fragment),d2=l(),Ht=p("div"),g(Ym.$$.fragment),AC=l(),oy=p("p"),oy.textContent=KF,PC=l(),g(xc.$$.fragment),i2=l(),Et=p("div"),g(Lm.$$.fragment),KC=l(),cy=p("p"),cy.textContent=OF,OC=l(),g(yc.$$.fragment),m2=l(),Qt=p("div"),g(Sm.$$.fragment),eI=l(),py=p("p"),py.textContent=eG,tI=l(),g(jc.$$.fragment),h2=l(),g(Am.$$.fragment),u2=l(),W=p("div"),g(Pm.$$.fragment),sI=l(),dy=p("p"),dy.innerHTML=tG,aI=l(),iy=p("p"),iy.textContent=sG,nI=l(),my=p("ul"),my.innerHTML=aG,lI=l(),g($c.$$.fragment),rI=l(),Fa=p("div"),g(Km.$$.fragment),oI=l(),hy=p("p"),hy.textContent=nG,cI=l(),uy=p("ul"),uy.innerHTML=lG,pI=l(),vc=p("div"),g(Om.$$.fragment),dI=l(),gy=p("p"),gy.textContent=rG,iI=l(),wc=p("div"),g(eh.$$.fragment),mI=l(),fy=p("p"),fy.textContent=oG,hI=l(),Mc=p("div"),g(th.$$.fragment),uI=l(),by=p("p"),by.textContent=cG,gI=l(),kc=p("div"),g(sh.$$.fragment),fI=l(),_y=p("p"),_y.textContent=pG,g2=l(),g(ah.$$.fragment),f2=l(),H=p("div"),g(nh.$$.fragment),bI=l(),xy=p("p"),xy.innerHTML=dG,_I=l(),yy=p("p"),yy.textContent=iG,xI=l(),jy=p("ul"),jy.innerHTML=mG,yI=l(),g(Jc.$$.fragment),jI=l(),Ga=p("div"),g(lh.$$.fragment),$I=l(),$y=p("p"),$y.textContent=hG,vI=l(),vy=p("ul"),vy.innerHTML=uG,wI=l(),Tc=p("div"),g(rh.$$.fragment),MI=l(),wy=p("p"),wy.textContent=gG,kI=l(),Dc=p("div"),g(oh.$$.fragment),JI=l(),My=p("p"),My.textContent=fG,TI=l(),Cc=p("div"),g(ch.$$.fragment),DI=l(),ky=p("p"),ky.textContent=bG,CI=l(),Ic=p("div"),g(ph.$$.fragment),II=l(),Jy=p("p"),Jy.textContent=_G,b2=l(),g(dh.$$.fragment),_2=l(),Y=p("div"),g(ih.$$.fragment),UI=l(),Ty=p("p"),Ty.innerHTML=xG,ZI=l(),Dy=p("p"),Dy.textContent=yG,RI=l(),Cy=p("ul"),Cy.innerHTML=jG,FI=l(),g(Uc.$$.fragment),GI=l(),Na=p("div"),g(mh.$$.fragment),NI=l(),Iy=p("p"),Iy.textContent=$G,zI=l(),Uy=p("ul"),Uy.innerHTML=vG,XI=l(),Zc=p("div"),g(hh.$$.fragment),VI=l(),Zy=p("p"),Zy.textContent=wG,qI=l(),Rc=p("div"),g(uh.$$.fragment),BI=l(),Ry=p("p"),Ry.textContent=MG,WI=l(),Fc=p("div"),g(gh.$$.fragment),HI=l(),Fy=p("p"),Fy.textContent=kG,x2=l(),g(fh.$$.fragment),y2=l(),L=p("div"),g(bh.$$.fragment),EI=l(),Gy=p("p"),Gy.innerHTML=JG,QI=l(),Ny=p("p"),Ny.textContent=TG,YI=l(),zy=p("ul"),zy.innerHTML=DG,LI=l(),g(Gc.$$.fragment),SI=l(),za=p("div"),g(_h.$$.fragment),AI=l(),Xy=p("p"),Xy.textContent=CG,PI=l(),Vy=p("ul"),Vy.innerHTML=IG,KI=l(),Nc=p("div"),g(xh.$$.fragment),OI=l(),qy=p("p"),qy.textContent=UG,eU=l(),zc=p("div"),g(yh.$$.fragment),tU=l(),By=p("p"),By.textContent=ZG,sU=l(),Xc=p("div"),g(jh.$$.fragment),aU=l(),Wy=p("p"),Wy.textContent=RG,j2=l(),g($h.$$.fragment),$2=l(),qa=p("div"),g(vh.$$.fragment),nU=l(),Hy=p("p"),Hy.innerHTML=FG,v2=l(),g(wh.$$.fragment),w2=l(),Ba=p("div"),g(Mh.$$.fragment),lU=l(),Ey=p("p"),Ey.textContent=GG,M2=l(),g(kh.$$.fragment),k2=l(),uj=p("p"),this.h()},l(n){const j=a5("svelte-u9bgzb",document.head);t=d(j,"META",{name:!0,content:!0}),j.forEach(i),y=r(n),o=d(n,"P",{}),w(o).forEach(i),a=r(n),f(c.$$.fragment,n),e=r(n),f(m.$$.fragment,n),B=r(n),V=d(n,"DIV",{class:!0});var Ie=w(V);f(Ec.$$.fragment,Ie),O2=r(Ie),Yh=d(Ie,"P",{"data-svelte-h":!0}),x(Yh)!=="svelte-lfwgxi"&&(Yh.textContent=pU),e$=r(Ie),Lh=d(Ie,"P",{"data-svelte-h":!0}),x(Lh)!=="svelte-fg3r3b"&&(Lh.innerHTML=dU),t$=r(Ie),Sh=d(Ie,"P",{"data-svelte-h":!0}),x(Sh)!=="svelte-1l13wc6"&&(Sh.textContent=iU),s$=r(Ie),Ve=d(Ie,"DIV",{class:!0});var tt=w(Ve);f(Qc.$$.fragment,tt),a$=r(tt),Ah=d(tt,"P",{"data-svelte-h":!0}),x(Ah)!=="svelte-143o08n"&&(Ah.innerHTML=mU),n$=r(tt),Ph=d(tt,"P",{"data-svelte-h":!0}),x(Ph)!=="svelte-mawg1m"&&(Ph.innerHTML=hU),l$=r(tt),Kh=d(tt,"P",{"data-svelte-h":!0}),x(Kh)!=="svelte-1wtf7je"&&(Kh.textContent=uU),r$=r(tt),f(sl.$$.fragment,tt),tt.forEach(i),o$=r(Ie),ms=d(Ie,"DIV",{class:!0});var Wa=w(ms);f(Yc.$$.fragment,Wa),c$=r(Wa),Oh=d(Wa,"P",{"data-svelte-h":!0}),x(Oh)!=="svelte-1rpq0vp"&&(Oh.innerHTML=gU),p$=r(Wa),f(al.$$.fragment,Wa),Wa.forEach(i),Ie.forEach(i),Uj=r(n),f(Lc.$$.fragment,n),Zj=r(n),Sc=d(n,"P",{"data-svelte-h":!0}),x(Sc)!=="svelte-9lv95b"&&(Sc.innerHTML=fU),Rj=r(n),J=d(n,"DIV",{class:!0});var T=w(J);f(Ac.$$.fragment,T),d$=r(T),eu=d(T,"P",{"data-svelte-h":!0}),x(eu)!=="svelte-um54g0"&&(eu.textContent=bU),i$=r(T),ft=d(T,"DIV",{class:!0});var Yt=w(ft);f(Pc.$$.fragment,Yt),m$=r(Yt),tu=d(Yt,"P",{"data-svelte-h":!0}),x(tu)!=="svelte-187423a"&&(tu.textContent=_U),h$=r(Yt),f(Kc.$$.fragment,Yt),u$=r(Yt),f(nl.$$.fragment,Yt),Yt.forEach(i),g$=r(T),bt=d(T,"DIV",{class:!0});var Lt=w(bt);f(Oc.$$.fragment,Lt),f$=r(Lt),su=d(Lt,"P",{"data-svelte-h":!0}),x(su)!=="svelte-1xnmsm1"&&(su.textContent=xU),b$=r(Lt),f(ep.$$.fragment,Lt),_$=r(Lt),f(ll.$$.fragment,Lt),Lt.forEach(i),x$=r(T),rl=d(T,"DIV",{class:!0});var Jh=w(rl);f(tp.$$.fragment,Jh),y$=r(Jh),au=d(Jh,"P",{"data-svelte-h":!0}),x(au)!=="svelte-xuyb7u"&&(au.textContent=yU),Jh.forEach(i),j$=r(T),ol=d(T,"DIV",{class:!0});var Th=w(ol);f(sp.$$.fragment,Th),$$=r(Th),nu=d(Th,"P",{"data-svelte-h":!0}),x(nu)!=="svelte-1bnh7kq"&&(nu.textContent=jU),Th.forEach(i),v$=r(T),be=d(T,"DIV",{class:!0});var Ue=w(be);f(ap.$$.fragment,Ue),w$=r(Ue),lu=d(Ue,"P",{"data-svelte-h":!0}),x(lu)!=="svelte-1i6qcsy"&&(lu.innerHTML=$U),M$=r(Ue),ru=d(Ue,"P",{"data-svelte-h":!0}),x(ru)!=="svelte-13069ts"&&(ru.innerHTML=vU),k$=r(Ue),ou=d(Ue,"P",{"data-svelte-h":!0}),x(ou)!=="svelte-1eneciw"&&(ou.innerHTML=wU),J$=r(Ue),cu=d(Ue,"P",{"data-svelte-h":!0}),x(cu)!=="svelte-1jn05ya"&&(cu.textContent=MU),T$=r(Ue),f(cl.$$.fragment,Ue),Ue.forEach(i),D$=r(T),hs=d(T,"DIV",{class:!0});var Ha=w(hs);f(np.$$.fragment,Ha),C$=r(Ha),pu=d(Ha,"P",{"data-svelte-h":!0}),x(pu)!=="svelte-2nnum0"&&(pu.innerHTML=kU),I$=r(Ha),du=d(Ha,"P",{"data-svelte-h":!0}),x(du)!=="svelte-ptgnn3"&&(du.textContent=JU),Ha.forEach(i),U$=r(T),_t=d(T,"DIV",{class:!0});var St=w(_t);f(lp.$$.fragment,St),Z$=r(St),iu=d(St,"P",{"data-svelte-h":!0}),x(iu)!=="svelte-1a4vwkt"&&(iu.textContent=TU),R$=r(St),f(pl.$$.fragment,St),F$=r(St),f(dl.$$.fragment,St),St.forEach(i),G$=r(T),us=d(T,"DIV",{class:!0});var Ea=w(us);f(rp.$$.fragment,Ea),N$=r(Ea),mu=d(Ea,"P",{"data-svelte-h":!0}),x(mu)!=="svelte-1r8czji"&&(mu.textContent=DU),z$=r(Ea),f(il.$$.fragment,Ea),Ea.forEach(i),X$=r(T),gs=d(T,"DIV",{class:!0});var Qa=w(gs);f(op.$$.fragment,Qa),V$=r(Qa),hu=d(Qa,"P",{"data-svelte-h":!0}),x(hu)!=="svelte-4a80bw"&&(hu.textContent=CU),q$=r(Qa),f(ml.$$.fragment,Qa),Qa.forEach(i),B$=r(T),fs=d(T,"DIV",{class:!0});var Ya=w(fs);f(cp.$$.fragment,Ya),W$=r(Ya),uu=d(Ya,"P",{"data-svelte-h":!0}),x(uu)!=="svelte-r539m7"&&(uu.textContent=IU),H$=r(Ya),f(hl.$$.fragment,Ya),Ya.forEach(i),E$=r(T),bs=d(T,"DIV",{class:!0});var La=w(bs);f(pp.$$.fragment,La),Q$=r(La),gu=d(La,"P",{"data-svelte-h":!0}),x(gu)!=="svelte-1t2lv9h"&&(gu.innerHTML=UU),Y$=r(La),f(ul.$$.fragment,La),La.forEach(i),L$=r(T),_s=d(T,"DIV",{class:!0});var Sa=w(_s);f(dp.$$.fragment,Sa),S$=r(Sa),fu=d(Sa,"P",{"data-svelte-h":!0}),x(fu)!=="svelte-1kx2obx"&&(fu.textContent=ZU),A$=r(Sa),f(gl.$$.fragment,Sa),Sa.forEach(i),P$=r(T),xs=d(T,"DIV",{class:!0});var Aa=w(xs);f(ip.$$.fragment,Aa),K$=r(Aa),bu=d(Aa,"P",{"data-svelte-h":!0}),x(bu)!=="svelte-184op1i"&&(bu.textContent=RU),O$=r(Aa),f(fl.$$.fragment,Aa),Aa.forEach(i),e0=r(T),xt=d(T,"DIV",{class:!0});var At=w(xt);f(mp.$$.fragment,At),t0=r(At),_u=d(At,"P",{"data-svelte-h":!0}),x(_u)!=="svelte-1maq29p"&&(_u.textContent=FU),s0=r(At),xu=d(At,"P",{"data-svelte-h":!0}),x(xu)!=="svelte-1sxlc2t"&&(xu.textContent=GU),a0=r(At),f(bl.$$.fragment,At),At.forEach(i),n0=r(T),ys=d(T,"DIV",{class:!0});var Pa=w(ys);f(hp.$$.fragment,Pa),l0=r(Pa),yu=d(Pa,"P",{"data-svelte-h":!0}),x(yu)!=="svelte-9kaomc"&&(yu.textContent=NU),r0=r(Pa),f(_l.$$.fragment,Pa),Pa.forEach(i),o0=r(T),js=d(T,"DIV",{class:!0});var Ka=w(js);f(up.$$.fragment,Ka),c0=r(Ka),ju=d(Ka,"P",{"data-svelte-h":!0}),x(ju)!=="svelte-gdaajq"&&(ju.textContent=zU),p0=r(Ka),f(xl.$$.fragment,Ka),Ka.forEach(i),d0=r(T),$s=d(T,"DIV",{class:!0});var Oa=w($s);f(gp.$$.fragment,Oa),i0=r(Oa),$u=d(Oa,"P",{"data-svelte-h":!0}),x($u)!=="svelte-6q86ko"&&($u.textContent=XU),m0=r(Oa),f(yl.$$.fragment,Oa),Oa.forEach(i),h0=r(T),yt=d(T,"DIV",{class:!0});var Pt=w(yt);f(fp.$$.fragment,Pt),u0=r(Pt),vu=d(Pt,"P",{"data-svelte-h":!0}),x(vu)!=="svelte-10hhe69"&&(vu.textContent=VU),g0=r(Pt),wu=d(Pt,"P",{"data-svelte-h":!0}),x(wu)!=="svelte-1e77a7b"&&(wu.innerHTML=qU),f0=r(Pt),f(jl.$$.fragment,Pt),Pt.forEach(i),b0=r(T),vs=d(T,"DIV",{class:!0});var en=w(vs);f(bp.$$.fragment,en),_0=r(en),Mu=d(en,"P",{"data-svelte-h":!0}),x(Mu)!=="svelte-l4yuic"&&(Mu.textContent=BU),x0=r(en),f($l.$$.fragment,en),en.forEach(i),y0=r(T),ws=d(T,"DIV",{class:!0});var tn=w(ws);f(_p.$$.fragment,tn),j0=r(tn),ku=d(tn,"P",{"data-svelte-h":!0}),x(ku)!=="svelte-1hi1vhm"&&(ku.textContent=WU),$0=r(tn),f(vl.$$.fragment,tn),tn.forEach(i),v0=r(T),Ms=d(T,"DIV",{class:!0});var sn=w(Ms);f(xp.$$.fragment,sn),w0=r(sn),Ju=d(sn,"P",{"data-svelte-h":!0}),x(Ju)!=="svelte-17e9g07"&&(Ju.textContent=HU),M0=r(sn),f(wl.$$.fragment,sn),sn.forEach(i),k0=r(T),ks=d(T,"DIV",{class:!0});var an=w(ks);f(yp.$$.fragment,an),J0=r(an),Tu=d(an,"P",{"data-svelte-h":!0}),x(Tu)!=="svelte-aslakd"&&(Tu.innerHTML=EU),T0=r(an),f(Ml.$$.fragment,an),an.forEach(i),D0=r(T),Js=d(T,"DIV",{class:!0});var nn=w(Js);f(jp.$$.fragment,nn),C0=r(nn),Du=d(nn,"P",{"data-svelte-h":!0}),x(Du)!=="svelte-27coxf"&&(Du.textContent=QU),I0=r(nn),f(kl.$$.fragment,nn),nn.forEach(i),U0=r(T),Ts=d(T,"DIV",{class:!0});var ln=w(Ts);f($p.$$.fragment,ln),Z0=r(ln),Cu=d(ln,"P",{"data-svelte-h":!0}),x(Cu)!=="svelte-5t5lj3"&&(Cu.textContent=YU),R0=r(ln),Iu=d(ln,"P",{"data-svelte-h":!0}),x(Iu)!=="svelte-603671"&&(Iu.innerHTML=LU),ln.forEach(i),F0=r(T),Ds=d(T,"DIV",{class:!0});var rn=w(Ds);f(vp.$$.fragment,rn),G0=r(rn),Uu=d(rn,"P",{"data-svelte-h":!0}),x(Uu)!=="svelte-3yz5m3"&&(Uu.innerHTML=SU),N0=r(rn),Zu=d(rn,"P",{"data-svelte-h":!0}),x(Zu)!=="svelte-15hkzd9"&&(Zu.innerHTML=AU),rn.forEach(i),z0=r(T),Jl=d(T,"DIV",{class:!0});var Dh=w(Jl);f(wp.$$.fragment,Dh),X0=r(Dh),Ru=d(Dh,"P",{"data-svelte-h":!0}),x(Ru)!=="svelte-h1u4ah"&&(Ru.innerHTML=PU),Dh.forEach(i),V0=r(T),qe=d(T,"DIV",{class:!0});var st=w(qe);f(Mp.$$.fragment,st),q0=r(st),Fu=d(st,"P",{"data-svelte-h":!0}),x(Fu)!=="svelte-n7vy49"&&(Fu.innerHTML=KU),B0=r(st),Gu=d(st,"P",{"data-svelte-h":!0}),x(Gu)!=="svelte-mmn5oe"&&(Gu.innerHTML=OU),W0=r(st),f(Tl.$$.fragment,st),H0=r(st),f(Dl.$$.fragment,st),st.forEach(i),E0=r(T),Cs=d(T,"DIV",{class:!0});var on=w(Cs);f(kp.$$.fragment,on),Q0=r(on),Nu=d(on,"P",{"data-svelte-h":!0}),x(Nu)!=="svelte-10czkmk"&&(Nu.innerHTML=eZ),Y0=r(on),f(Cl.$$.fragment,on),on.forEach(i),L0=r(T),jt=d(T,"DIV",{class:!0});var Kt=w(jt);f(Jp.$$.fragment,Kt),S0=r(Kt),zu=d(Kt,"P",{"data-svelte-h":!0}),x(zu)!=="svelte-3clgrk"&&(zu.innerHTML=tZ),A0=r(Kt),Xu=d(Kt,"P",{"data-svelte-h":!0}),x(Xu)!=="svelte-iyxfy2"&&(Xu.innerHTML=sZ),P0=r(Kt),f(Il.$$.fragment,Kt),Kt.forEach(i),K0=r(T),Be=d(T,"DIV",{class:!0});var at=w(Be);f(Tp.$$.fragment,at),O0=r(at),Vu=d(at,"P",{"data-svelte-h":!0}),x(Vu)!=="svelte-87ae2u"&&(Vu.innerHTML=aZ),e1=r(at),qu=d(at,"P",{"data-svelte-h":!0}),x(qu)!=="svelte-gjvspf"&&(qu.innerHTML=nZ),t1=r(at),Bu=d(at,"P",{"data-svelte-h":!0}),x(Bu)!=="svelte-1k0z1vc"&&(Bu.innerHTML=lZ),s1=r(at),f(Ul.$$.fragment,at),at.forEach(i),a1=r(T),We=d(T,"DIV",{class:!0});var nt=w(We);f(Dp.$$.fragment,nt),n1=r(nt),Wu=d(nt,"P",{"data-svelte-h":!0}),x(Wu)!=="svelte-1r4rcyu"&&(Wu.innerHTML=rZ),l1=r(nt),Hu=d(nt,"P",{"data-svelte-h":!0}),x(Hu)!=="svelte-16m2hyo"&&(Hu.innerHTML=oZ),r1=r(nt),Eu=d(nt,"P",{"data-svelte-h":!0}),x(Eu)!=="svelte-2c2nah"&&(Eu.innerHTML=cZ),o1=r(nt),f(Zl.$$.fragment,nt),nt.forEach(i),c1=r(T),Rl=d(T,"DIV",{class:!0});var Ch=w(Rl);f(Cp.$$.fragment,Ch),p1=r(Ch),Qu=d(Ch,"P",{"data-svelte-h":!0}),x(Qu)!=="svelte-gpicds"&&(Qu.textContent=pZ),Ch.forEach(i),d1=r(T),$t=d(T,"DIV",{class:!0});var Ot=w($t);f(Ip.$$.fragment,Ot),i1=r(Ot),Yu=d(Ot,"P",{"data-svelte-h":!0}),x(Yu)!=="svelte-bpj7c4"&&(Yu.textContent=dZ),m1=r(Ot),Lu=d(Ot,"P",{"data-svelte-h":!0}),x(Lu)!=="svelte-uj8hed"&&(Lu.textContent=iZ),h1=r(Ot),f(Fl.$$.fragment,Ot),Ot.forEach(i),u1=r(T),_e=d(T,"DIV",{class:!0});var Ze=w(_e);f(Up.$$.fragment,Ze),g1=r(Ze),Su=d(Ze,"P",{"data-svelte-h":!0}),x(Su)!=="svelte-9z7uvf"&&(Su.textContent=mZ),f1=r(Ze),Au=d(Ze,"P",{"data-svelte-h":!0}),x(Au)!=="svelte-nw1g8z"&&(Au.innerHTML=hZ),b1=r(Ze),Pu=d(Ze,"UL",{"data-svelte-h":!0}),x(Pu)!=="svelte-suoos2"&&(Pu.innerHTML=uZ),_1=r(Ze),Ku=d(Ze,"P",{"data-svelte-h":!0}),x(Ku)!=="svelte-1ut6ofn"&&(Ku.innerHTML=gZ),x1=r(Ze),f(Gl.$$.fragment,Ze),Ze.forEach(i),y1=r(T),vt=d(T,"DIV",{class:!0});var es=w(vt);f(Zp.$$.fragment,es),j1=r(es),Ou=d(es,"P",{"data-svelte-h":!0}),x(Ou)!=="svelte-1y7xb5x"&&(Ou.textContent=fZ),$1=r(es),eg=d(es,"P",{"data-svelte-h":!0}),x(eg)!=="svelte-130rh2n"&&(eg.innerHTML=bZ),v1=r(es),f(Nl.$$.fragment,es),es.forEach(i),w1=r(T),Is=d(T,"DIV",{class:!0});var cn=w(Is);f(Rp.$$.fragment,cn),M1=r(cn),tg=d(cn,"P",{"data-svelte-h":!0}),x(tg)!=="svelte-gt2ig5"&&(tg.textContent=_Z),k1=r(cn),f(zl.$$.fragment,cn),cn.forEach(i),J1=r(T),Us=d(T,"DIV",{class:!0});var pn=w(Us);f(Fp.$$.fragment,pn),T1=r(pn),sg=d(pn,"P",{"data-svelte-h":!0}),x(sg)!=="svelte-jv8sqa"&&(sg.textContent=xZ),D1=r(pn),f(Xl.$$.fragment,pn),pn.forEach(i),C1=r(T),O=d(T,"DIV",{class:!0});var ae=w(O);f(Gp.$$.fragment,ae),I1=r(ae),ag=d(ae,"P",{"data-svelte-h":!0}),x(ag)!=="svelte-9hwenr"&&(ag.textContent=yZ),U1=r(ae),ng=d(ae,"P",{"data-svelte-h":!0}),x(ng)!=="svelte-nds7wn"&&(ng.textContent=jZ),Z1=r(ae),lg=d(ae,"P",{"data-svelte-h":!0}),x(lg)!=="svelte-txnqsr"&&(lg.innerHTML=$Z),R1=r(ae),f(Vl.$$.fragment,ae),F1=r(ae),rg=d(ae,"P",{"data-svelte-h":!0}),x(rg)!=="svelte-10i2rzi"&&(rg.innerHTML=vZ),G1=r(ae),f(ql.$$.fragment,ae),N1=r(ae),f(Bl.$$.fragment,ae),ae.forEach(i),z1=r(T),Zs=d(T,"DIV",{class:!0});var dn=w(Zs);f(Np.$$.fragment,dn),X1=r(dn),og=d(dn,"P",{"data-svelte-h":!0}),x(og)!=="svelte-1f1jaji"&&(og.innerHTML=wZ),V1=r(dn),f(Wl.$$.fragment,dn),dn.forEach(i),q1=r(T),Rs=d(T,"DIV",{class:!0});var mn=w(Rs);f(zp.$$.fragment,mn),B1=r(mn),cg=d(mn,"P",{"data-svelte-h":!0}),x(cg)!=="svelte-zz1dd7"&&(cg.innerHTML=MZ),W1=r(mn),f(Hl.$$.fragment,mn),mn.forEach(i),H1=r(T),wt=d(T,"DIV",{class:!0});var ts=w(wt);f(Xp.$$.fragment,ts),E1=r(ts),pg=d(ts,"P",{"data-svelte-h":!0}),x(pg)!=="svelte-i0dm9f"&&(pg.innerHTML=kZ),Q1=r(ts),dg=d(ts,"P",{"data-svelte-h":!0}),x(dg)!=="svelte-rv8n1m"&&(dg.innerHTML=JZ),Y1=r(ts),f(El.$$.fragment,ts),ts.forEach(i),L1=r(T),ne=d(T,"DIV",{class:!0});var me=w(ne);f(Vp.$$.fragment,me),S1=r(me),ig=d(me,"P",{"data-svelte-h":!0}),x(ig)!=="svelte-vo46xv"&&(ig.innerHTML=TZ),A1=r(me),mg=d(me,"P",{"data-svelte-h":!0}),x(mg)!=="svelte-xcwjyp"&&(mg.innerHTML=DZ),P1=r(me),hg=d(me,"P",{"data-svelte-h":!0}),x(hg)!=="svelte-12b6l74"&&(hg.innerHTML=CZ),K1=r(me),ug=d(me,"P",{"data-svelte-h":!0}),x(ug)!=="svelte-17fe4n8"&&(ug.innerHTML=IZ),O1=r(me),gg=d(me,"P",{"data-svelte-h":!0}),x(gg)!=="svelte-1k56e43"&&(gg.innerHTML=UZ),ev=r(me),f(Ql.$$.fragment,me),me.forEach(i),tv=r(T),Mt=d(T,"DIV",{class:!0});var ss=w(Mt);f(qp.$$.fragment,ss),sv=r(ss),fg=d(ss,"P",{"data-svelte-h":!0}),x(fg)!=="svelte-t2vhsp"&&(fg.innerHTML=ZZ),av=r(ss),bg=d(ss,"P",{"data-svelte-h":!0}),x(bg)!=="svelte-5diok4"&&(bg.textContent=RZ),nv=r(ss),f(Yl.$$.fragment,ss),ss.forEach(i),lv=r(T),Fs=d(T,"DIV",{class:!0});var hn=w(Fs);f(Bp.$$.fragment,hn),rv=r(hn),_g=d(hn,"P",{"data-svelte-h":!0}),x(_g)!=="svelte-9hwqxf"&&(_g.innerHTML=FZ),ov=r(hn),f(Ll.$$.fragment,hn),hn.forEach(i),cv=r(T),xe=d(T,"DIV",{class:!0});var Re=w(xe);f(Wp.$$.fragment,Re),pv=r(Re),xg=d(Re,"P",{"data-svelte-h":!0}),x(xg)!=="svelte-12h8d1z"&&(xg.textContent=GZ),dv=r(Re),yg=d(Re,"P",{"data-svelte-h":!0}),x(yg)!=="svelte-3z73ro"&&(yg.innerHTML=NZ),iv=r(Re),f(Sl.$$.fragment,Re),mv=r(Re),f(Al.$$.fragment,Re),hv=r(Re),f(Pl.$$.fragment,Re),Re.forEach(i),uv=r(T),He=d(T,"DIV",{class:!0});var lt=w(He);f(Hp.$$.fragment,lt),gv=r(lt),jg=d(lt,"P",{"data-svelte-h":!0}),x(jg)!=="svelte-fuc3iu"&&(jg.innerHTML=zZ),fv=r(lt),$g=d(lt,"P",{"data-svelte-h":!0}),x($g)!=="svelte-1dxtgu9"&&($g.innerHTML=XZ),bv=r(lt),vg=d(lt,"P",{"data-svelte-h":!0}),x(vg)!=="svelte-k8w53u"&&(vg.textContent=VZ),_v=r(lt),f(Kl.$$.fragment,lt),lt.forEach(i),xv=r(T),Gs=d(T,"DIV",{class:!0});var un=w(Gs);f(Ep.$$.fragment,un),yv=r(un),wg=d(un,"P",{"data-svelte-h":!0}),x(wg)!=="svelte-afgi6s"&&(wg.innerHTML=qZ),jv=r(un),f(Ol.$$.fragment,un),un.forEach(i),$v=r(T),er=d(T,"DIV",{class:!0});var Ih=w(er);f(Qp.$$.fragment,Ih),vv=r(Ih),Mg=d(Ih,"P",{"data-svelte-h":!0}),x(Mg)!=="svelte-1upjh2b"&&(Mg.textContent=BZ),Ih.forEach(i),wv=r(T),Ns=d(T,"DIV",{class:!0});var gn=w(Ns);f(Yp.$$.fragment,gn),Mv=r(gn),kg=d(gn,"P",{"data-svelte-h":!0}),x(kg)!=="svelte-1vpxgwn"&&(kg.textContent=WZ),kv=r(gn),f(tr.$$.fragment,gn),gn.forEach(i),Jv=r(T),zs=d(T,"DIV",{class:!0});var fn=w(zs);f(Lp.$$.fragment,fn),Tv=r(fn),Jg=d(fn,"P",{"data-svelte-h":!0}),x(Jg)!=="svelte-16aovqo"&&(Jg.innerHTML=HZ),Dv=r(fn),f(sr.$$.fragment,fn),fn.forEach(i),Cv=r(T),Xs=d(T,"DIV",{class:!0});var bn=w(Xs);f(Sp.$$.fragment,bn),Iv=r(bn),Tg=d(bn,"P",{"data-svelte-h":!0}),x(Tg)!=="svelte-17wrjm3"&&(Tg.textContent=EZ),Uv=r(bn),f(ar.$$.fragment,bn),bn.forEach(i),Zv=r(T),kt=d(T,"DIV",{class:!0});var as=w(kt);f(Ap.$$.fragment,as),Rv=r(as),Dg=d(as,"P",{"data-svelte-h":!0}),x(Dg)!=="svelte-1myd95s"&&(Dg.textContent=QZ),Fv=r(as),Cg=d(as,"P",{"data-svelte-h":!0}),x(Cg)!=="svelte-4werc"&&(Cg.innerHTML=YZ),Gv=r(as),f(nr.$$.fragment,as),as.forEach(i),Nv=r(T),Vs=d(T,"DIV",{class:!0});var _n=w(Vs);f(Pp.$$.fragment,_n),zv=r(_n),Ig=d(_n,"P",{"data-svelte-h":!0}),x(Ig)!=="svelte-ojn5af"&&(Ig.textContent=LZ),Xv=r(_n),f(lr.$$.fragment,_n),_n.forEach(i),Vv=r(T),qs=d(T,"DIV",{class:!0});var xn=w(qs);f(Kp.$$.fragment,xn),qv=r(xn),Ug=d(xn,"P",{"data-svelte-h":!0}),x(Ug)!=="svelte-cr6o9"&&(Ug.textContent=SZ),Bv=r(xn),f(rr.$$.fragment,xn),xn.forEach(i),Wv=r(T),N=d(T,"DIV",{class:!0});var z=w(N);f(Op.$$.fragment,z),Hv=r(z),Zg=d(z,"P",{"data-svelte-h":!0}),x(Zg)!=="svelte-sfs0k3"&&(Zg.innerHTML=AZ),Ev=r(z),Rg=d(z,"P",{"data-svelte-h":!0}),x(Rg)!=="svelte-s5e69l"&&(Rg.textContent=PZ),Qv=r(z),Fg=d(z,"P",{"data-svelte-h":!0}),x(Fg)!=="svelte-8gaats"&&(Fg.innerHTML=KZ),Yv=r(z),Gg=d(z,"P",{"data-svelte-h":!0}),x(Gg)!=="svelte-fu6aa4"&&(Gg.innerHTML=OZ),Lv=r(z),Ng=d(z,"P",{"data-svelte-h":!0}),x(Ng)!=="svelte-11lpom8"&&(Ng.textContent=e3),Sv=r(z),f(or.$$.fragment,z),Av=r(z),f(cr.$$.fragment,z),Pv=r(z),f(pr.$$.fragment,z),Kv=r(z),f(dr.$$.fragment,z),Ov=r(z),f(ir.$$.fragment,z),ew=r(z),zg=d(z,"P",{"data-svelte-h":!0}),x(zg)!=="svelte-b72tz8"&&(zg.textContent=t3),tw=r(z),f(mr.$$.fragment,z),sw=r(z),f(hr.$$.fragment,z),aw=oU(z,"\nFeel free to also use `IterableDataset.set_epoch()` when using a PyTorch DataLoader or in distributed setups."),z.forEach(i),nw=r(T),Jt=d(T,"DIV",{class:!0});var ns=w(Jt);f(ed.$$.fragment,ns),lw=r(ns),Xg=d(ns,"P",{"data-svelte-h":!0}),x(Xg)!=="svelte-dxgty8"&&(Xg.innerHTML=s3),rw=r(ns),Vg=d(ns,"UL",{"data-svelte-h":!0}),x(Vg)!=="svelte-1no3fah"&&(Vg.innerHTML=a3),ow=r(ns),f(ur.$$.fragment,ns),ns.forEach(i),cw=r(T),Bs=d(T,"DIV",{class:!0});var yn=w(Bs);f(td.$$.fragment,yn),pw=r(yn),qg=d(yn,"P",{"data-svelte-h":!0}),x(qg)!=="svelte-2daopy"&&(qg.innerHTML=n3),dw=r(yn),Bg=d(yn,"UL",{"data-svelte-h":!0}),x(Bg)!=="svelte-1no3fah"&&(Bg.innerHTML=l3),yn.forEach(i),iw=r(T),gr=d(T,"DIV",{class:!0});var Uh=w(gr);f(sd.$$.fragment,Uh),mw=r(Uh),Wg=d(Uh,"P",{"data-svelte-h":!0}),x(Wg)!=="svelte-1404wtc"&&(Wg.textContent=r3),Uh.forEach(i),hw=r(T),Ws=d(T,"DIV",{class:!0});var jn=w(Ws);f(ad.$$.fragment,jn),uw=r(jn),Hg=d(jn,"P",{"data-svelte-h":!0}),x(Hg)!=="svelte-9ueubg"&&(Hg.textContent=o3),gw=r(jn),Eg=d(jn,"P",{"data-svelte-h":!0}),x(Eg)!=="svelte-150zuup"&&(Eg.innerHTML=c3),jn.forEach(i),fw=r(T),Hs=d(T,"DIV",{class:!0});var $n=w(Hs);f(nd.$$.fragment,$n),bw=r($n),Qg=d($n,"P",{"data-svelte-h":!0}),x(Qg)!=="svelte-m9un6o"&&(Qg.textContent=p3),_w=r($n),f(fr.$$.fragment,$n),$n.forEach(i),xw=r(T),br=d(T,"DIV",{class:!0});var Zh=w(br);f(ld.$$.fragment,Zh),yw=r(Zh),Yg=d(Zh,"P",{"data-svelte-h":!0}),x(Yg)!=="svelte-1oc11uj"&&(Yg.textContent=d3),Zh.forEach(i),jw=r(T),_r=d(T,"DIV",{class:!0});var Rh=w(_r);f(rd.$$.fragment,Rh),$w=r(Rh),Lg=d(Rh,"P",{"data-svelte-h":!0}),x(Lg)!=="svelte-12ndgxj"&&(Lg.innerHTML=i3),Rh.forEach(i),vw=r(T),xr=d(T,"DIV",{class:!0});var Fh=w(xr);f(od.$$.fragment,Fh),ww=r(Fh),Sg=d(Fh,"P",{"data-svelte-h":!0}),x(Sg)!=="svelte-wiqdbm"&&(Sg.innerHTML=m3),Fh.forEach(i),Mw=r(T),yr=d(T,"DIV",{class:!0});var Gh=w(yr);f(cd.$$.fragment,Gh),kw=r(Gh),Ag=d(Gh,"P",{"data-svelte-h":!0}),x(Ag)!=="svelte-1tg85xn"&&(Ag.textContent=h3),Gh.forEach(i),Jw=r(T),jr=d(T,"DIV",{class:!0});var Nh=w(jr);f(pd.$$.fragment,Nh),Tw=r(Nh),Pg=d(Nh,"P",{"data-svelte-h":!0}),x(Pg)!=="svelte-1rq6ygg"&&(Pg.textContent=u3),Nh.forEach(i),Dw=r(T),$r=d(T,"DIV",{class:!0});var zh=w($r);f(dd.$$.fragment,zh),Cw=r(zh),Kg=d(zh,"P",{"data-svelte-h":!0}),x(Kg)!=="svelte-1rq6ygg"&&(Kg.textContent=g3),zh.forEach(i),Iw=r(T),vr=d(T,"DIV",{class:!0});var Xh=w(vr);f(id.$$.fragment,Xh),Uw=r(Xh),Og=d(Xh,"P",{"data-svelte-h":!0}),x(Og)!=="svelte-1k9tte5"&&(Og.textContent=f3),Xh.forEach(i),Zw=r(T),wr=d(T,"DIV",{class:!0});var Vh=w(wr);f(md.$$.fragment,Vh),Rw=r(Vh),ef=d(Vh,"P",{"data-svelte-h":!0}),x(ef)!=="svelte-1k9tte5"&&(ef.textContent=b3),Vh.forEach(i),Fw=r(T),Mr=d(T,"DIV",{class:!0});var qh=w(Mr);f(hd.$$.fragment,qh),Gw=r(qh),tf=d(qh,"P",{"data-svelte-h":!0}),x(tf)!=="svelte-90roav"&&(tf.innerHTML=_3),qh.forEach(i),Nw=r(T),kr=d(T,"DIV",{class:!0});var Bh=w(kr);f(ud.$$.fragment,Bh),zw=r(Bh),sf=d(Bh,"P",{"data-svelte-h":!0}),x(sf)!=="svelte-skkx34"&&(sf.innerHTML=x3),Bh.forEach(i),Xw=r(T),af=d(T,"DIV",{class:!0});var gj=w(af);f(gd.$$.fragment,gj),gj.forEach(i),Vw=r(T),nf=d(T,"DIV",{class:!0});var fj=w(nf);f(fd.$$.fragment,fj),fj.forEach(i),qw=r(T),lf=d(T,"DIV",{class:!0});var bj=w(lf);f(bd.$$.fragment,bj),bj.forEach(i),Bw=r(T),rf=d(T,"DIV",{class:!0});var _j=w(rf);f(_d.$$.fragment,_j),_j.forEach(i),Ww=r(T),of=d(T,"DIV",{class:!0});var xj=w(of);f(xd.$$.fragment,xj),xj.forEach(i),Hw=r(T),cf=d(T,"DIV",{class:!0});var yj=w(cf);f(yd.$$.fragment,yj),yj.forEach(i),Ew=r(T),pf=d(T,"DIV",{class:!0});var jj=w(pf);f(jd.$$.fragment,jj),jj.forEach(i),Qw=r(T),df=d(T,"DIV",{class:!0});var $j=w(df);f($d.$$.fragment,$j),$j.forEach(i),Yw=r(T),mf=d(T,"DIV",{class:!0});var vj=w(mf);f(vd.$$.fragment,vj),vj.forEach(i),Lw=r(T),hf=d(T,"DIV",{class:!0});var wj=w(hf);f(wd.$$.fragment,wj),wj.forEach(i),Sw=r(T),uf=d(T,"DIV",{class:!0});var Mj=w(uf);f(Md.$$.fragment,Mj),Mj.forEach(i),Aw=r(T),gf=d(T,"DIV",{class:!0});var kj=w(gf);f(kd.$$.fragment,kj),kj.forEach(i),Pw=r(T),ff=d(T,"DIV",{class:!0});var Jj=w(ff);f(Jd.$$.fragment,Jj),Jj.forEach(i),Kw=r(T),Es=d(T,"DIV",{class:!0});var vn=w(Es);f(Td.$$.fragment,vn),Ow=r(vn),bf=d(vn,"P",{"data-svelte-h":!0}),x(bf)!=="svelte-17lbdfs"&&(bf.textContent=y3),eM=r(vn),f(Jr.$$.fragment,vn),vn.forEach(i),tM=r(T),Qs=d(T,"DIV",{class:!0});var wn=w(Qs);f(Dd.$$.fragment,wn),sM=r(wn),_f=d(wn,"P",{"data-svelte-h":!0}),x(_f)!=="svelte-1j26yi8"&&(_f.textContent=j3),aM=r(wn),f(Tr.$$.fragment,wn),wn.forEach(i),nM=r(T),Ys=d(T,"DIV",{class:!0});var Mn=w(Ys);f(Cd.$$.fragment,Mn),lM=r(Mn),xf=d(Mn,"P",{"data-svelte-h":!0}),x(xf)!=="svelte-7pct94"&&(xf.textContent=$3),rM=r(Mn),f(Dr.$$.fragment,Mn),Mn.forEach(i),oM=r(T),Ls=d(T,"DIV",{class:!0});var kn=w(Ls);f(Id.$$.fragment,kn),cM=r(kn),yf=d(kn,"P",{"data-svelte-h":!0}),x(yf)!=="svelte-17gtj61"&&(yf.textContent=v3),pM=r(kn),f(Cr.$$.fragment,kn),kn.forEach(i),dM=r(T),Tt=d(T,"DIV",{class:!0});var ls=w(Tt);f(Ud.$$.fragment,ls),iM=r(ls),jf=d(ls,"P",{"data-svelte-h":!0}),x(jf)!=="svelte-1c43104"&&(jf.textContent=w3),mM=r(ls),f(Ir.$$.fragment,ls),hM=r(ls),f(Ur.$$.fragment,ls),ls.forEach(i),uM=r(T),Ss=d(T,"DIV",{class:!0});var Jn=w(Ss);f(Zd.$$.fragment,Jn),gM=r(Jn),$f=d(Jn,"P",{"data-svelte-h":!0}),x($f)!=="svelte-1350uew"&&($f.innerHTML=M3),fM=r(Jn),f(Zr.$$.fragment,Jn),Jn.forEach(i),T.forEach(i),Fj=r(n),Vt=d(n,"DIV",{class:!0});var Tn=w(Vt);f(Rd.$$.fragment,Tn),bM=r(Tn),vf=d(Tn,"P",{"data-svelte-h":!0}),x(vf)!=="svelte-1usbdwf"&&(vf.innerHTML=k3),_M=r(Tn),f(Rr.$$.fragment,Tn),Tn.forEach(i),Gj=r(n),E=d(n,"DIV",{class:!0});var P=w(E);f(Fd.$$.fragment,P),xM=r(P),wf=d(P,"P",{"data-svelte-h":!0}),x(wf)!=="svelte-5mtlbp"&&(wf.textContent=J3),yM=r(P),Mf=d(P,"P",{"data-svelte-h":!0}),x(Mf)!=="svelte-1h73spf"&&(Mf.innerHTML=T3),jM=r(P),kf=d(P,"UL",{"data-svelte-h":!0}),x(kf)!=="svelte-innmou"&&(kf.innerHTML=D3),$M=r(P),Jf=d(P,"P",{"data-svelte-h":!0}),x(Jf)!=="svelte-19sfm5m"&&(Jf.innerHTML=C3),vM=r(P),Tf=d(P,"P",{"data-svelte-h":!0}),x(Tf)!=="svelte-13n49oy"&&(Tf.textContent=I3),wM=r(P),Df=d(P,"P",{"data-svelte-h":!0}),x(Df)!=="svelte-1lgko1a"&&(Df.textContent=U3),MM=r(P),Cf=d(P,"P",{"data-svelte-h":!0}),x(Cf)!=="svelte-11lpom8"&&(Cf.textContent=Z3),kM=r(P),f(Fr.$$.fragment,P),P.forEach(i),Nj=r(n),ie=d(n,"DIV",{class:!0});var Fe=w(ie);f(Gd.$$.fragment,Fe),JM=r(Fe),If=d(Fe,"P",{"data-svelte-h":!0}),x(If)!=="svelte-mz9vcq"&&(If.innerHTML=R3),TM=r(Fe),Uf=d(Fe,"P",{"data-svelte-h":!0}),x(Uf)!=="svelte-1a3gkys"&&(Uf.textContent=F3),DM=r(Fe),Zf=d(Fe,"P",{"data-svelte-h":!0}),x(Zf)!=="svelte-195dicq"&&(Zf.textContent=G3),CM=r(Fe),Rf=d(Fe,"P",{"data-svelte-h":!0}),x(Rf)!=="svelte-1kujsme"&&(Rf.textContent=N3),IM=r(Fe),Ff=d(Fe,"P",{"data-svelte-h":!0}),x(Ff)!=="svelte-tqahqj"&&(Ff.innerHTML=z3),Fe.forEach(i),zj=r(n),Je=d(n,"DIV",{class:!0});var rt=w(Je);f(Nd.$$.fragment,rt),UM=r(rt),Gf=d(rt,"P",{"data-svelte-h":!0}),x(Gf)!=="svelte-11p73zd"&&(Gf.textContent=X3),ZM=r(rt),Nf=d(rt,"P",{"data-svelte-h":!0}),x(Nf)!=="svelte-1l0khzq"&&(Nf.textContent=V3),RM=r(rt),zf=d(rt,"P",{"data-svelte-h":!0}),x(zf)!=="svelte-1njac64"&&(zf.textContent=q3),FM=r(rt),Xf=d(rt,"UL",{"data-svelte-h":!0}),x(Xf)!=="svelte-1oiwsc"&&(Xf.innerHTML=B3),rt.forEach(i),Xj=r(n),Te=d(n,"DIV",{class:!0});var ot=w(Te);f(zd.$$.fragment,ot),GM=r(ot),Vf=d(ot,"P",{"data-svelte-h":!0}),x(Vf)!=="svelte-11p73zd"&&(Vf.textContent=W3),NM=r(ot),qf=d(ot,"P",{"data-svelte-h":!0}),x(qf)!=="svelte-1l0khzq"&&(qf.textContent=H3),zM=r(ot),Bf=d(ot,"P",{"data-svelte-h":!0}),x(Bf)!=="svelte-1njac64"&&(Bf.textContent=E3),XM=r(ot),Wf=d(ot,"UL",{"data-svelte-h":!0}),x(Wf)!=="svelte-1oiwsc"&&(Wf.innerHTML=Q3),ot.forEach(i),Vj=r(n),De=d(n,"DIV",{class:!0});var ct=w(De);f(Xd.$$.fragment,ct),VM=r(ct),Hf=d(ct,"P",{"data-svelte-h":!0}),x(Hf)!=="svelte-11p73zd"&&(Hf.textContent=Y3),qM=r(ct),Ef=d(ct,"P",{"data-svelte-h":!0}),x(Ef)!=="svelte-1l0khzq"&&(Ef.textContent=L3),BM=r(ct),Qf=d(ct,"P",{"data-svelte-h":!0}),x(Qf)!=="svelte-1njac64"&&(Qf.textContent=S3),WM=r(ct),Yf=d(ct,"UL",{"data-svelte-h":!0}),x(Yf)!=="svelte-1qat81"&&(Yf.innerHTML=A3),ct.forEach(i),qj=r(n),f(Vd.$$.fragment,n),Bj=r(n),qd=d(n,"P",{"data-svelte-h":!0}),x(qd)!=="svelte-1pw0knt"&&(qd.innerHTML=P3),Wj=r(n),R=d(n,"DIV",{class:!0});var F=w(R);f(Bd.$$.fragment,F),HM=r(F),Lf=d(F,"P",{"data-svelte-h":!0}),x(Lf)!=="svelte-14lver1"&&(Lf.textContent=K3),EM=r(F),As=d(F,"DIV",{class:!0});var Dn=w(As);f(Wd.$$.fragment,Dn),QM=r(Dn),Sf=d(Dn,"P",{"data-svelte-h":!0}),x(Sf)!=="svelte-1pzcinj"&&(Sf.textContent=O3),YM=r(Dn),f(Gr.$$.fragment,Dn),Dn.forEach(i),LM=r(F),Ps=d(F,"DIV",{class:!0});var Cn=w(Ps);f(Hd.$$.fragment,Cn),SM=r(Cn),Af=d(Cn,"P",{"data-svelte-h":!0}),x(Af)!=="svelte-j9yykk"&&(Af.textContent=e4),AM=r(Cn),f(Nr.$$.fragment,Cn),Cn.forEach(i),PM=r(F),Ks=d(F,"DIV",{class:!0});var In=w(Ks);f(Ed.$$.fragment,In),KM=r(In),Pf=d(In,"P",{"data-svelte-h":!0}),x(Pf)!=="svelte-77ea4h"&&(Pf.textContent=t4),OM=r(In),f(zr.$$.fragment,In),In.forEach(i),ek=r(F),Os=d(F,"DIV",{class:!0});var Un=w(Os);f(Qd.$$.fragment,Un),tk=r(Un),Kf=d(Un,"P",{"data-svelte-h":!0}),x(Kf)!=="svelte-1dq0401"&&(Kf.textContent=s4),sk=r(Un),f(Xr.$$.fragment,Un),Un.forEach(i),ak=r(F),ea=d(F,"DIV",{class:!0});var Zn=w(ea);f(Yd.$$.fragment,Zn),nk=r(Zn),Of=d(Zn,"P",{"data-svelte-h":!0}),x(Of)!=="svelte-11j1fwn"&&(Of.textContent=a4),lk=r(Zn),f(Vr.$$.fragment,Zn),Zn.forEach(i),rk=r(F),ta=d(F,"DIV",{class:!0});var Rn=w(ta);f(Ld.$$.fragment,Rn),ok=r(Rn),eb=d(Rn,"P",{"data-svelte-h":!0}),x(eb)!=="svelte-1v4tf4q"&&(eb.textContent=n4),ck=r(Rn),f(qr.$$.fragment,Rn),Rn.forEach(i),pk=r(F),Dt=d(F,"DIV",{class:!0});var rs=w(Dt);f(Sd.$$.fragment,rs),dk=r(rs),tb=d(rs,"P",{"data-svelte-h":!0}),x(tb)!=="svelte-b4657d"&&(tb.textContent=l4),ik=r(rs),sb=d(rs,"P",{"data-svelte-h":!0}),x(sb)!=="svelte-1sxlc2t"&&(sb.textContent=r4),mk=r(rs),f(Br.$$.fragment,rs),rs.forEach(i),hk=r(F),sa=d(F,"DIV",{class:!0});var Fn=w(sa);f(Ad.$$.fragment,Fn),uk=r(Fn),ab=d(Fn,"P",{"data-svelte-h":!0}),x(ab)!=="svelte-1dkln5f"&&(ab.textContent=o4),gk=r(Fn),f(Wr.$$.fragment,Fn),Fn.forEach(i),fk=r(F),ye=d(F,"DIV",{class:!0});var Ge=w(ye);f(Pd.$$.fragment,Ge),bk=r(Ge),nb=d(Ge,"P",{"data-svelte-h":!0}),x(nb)!=="svelte-zvkjtg"&&(nb.textContent=c4),_k=r(Ge),lb=d(Ge,"P",{"data-svelte-h":!0}),x(lb)!=="svelte-nw1g8z"&&(lb.innerHTML=p4),xk=r(Ge),rb=d(Ge,"UL",{"data-svelte-h":!0}),x(rb)!=="svelte-suoos2"&&(rb.innerHTML=d4),yk=r(Ge),ob=d(Ge,"P",{"data-svelte-h":!0}),x(ob)!=="svelte-1o6vcan"&&(ob.innerHTML=i4),jk=r(Ge),f(Hr.$$.fragment,Ge),Ge.forEach(i),$k=r(F),aa=d(F,"DIV",{class:!0});var Gn=w(aa);f(Kd.$$.fragment,Gn),vk=r(Gn),cb=d(Gn,"P",{"data-svelte-h":!0}),x(cb)!=="svelte-65x6j8"&&(cb.textContent=m4),wk=r(Gn),f(Er.$$.fragment,Gn),Gn.forEach(i),Mk=r(F),na=d(F,"DIV",{class:!0});var Nn=w(na);f(Od.$$.fragment,Nn),kk=r(Nn),pb=d(Nn,"P",{"data-svelte-h":!0}),x(pb)!=="svelte-jv8sqa"&&(pb.textContent=h4),Jk=r(Nn),f(Qr.$$.fragment,Nn),Nn.forEach(i),Tk=r(F),Ee=d(F,"DIV",{class:!0});var pt=w(Ee);f(ei.$$.fragment,pt),Dk=r(pt),db=d(pt,"P",{"data-svelte-h":!0}),x(db)!=="svelte-9hwenr"&&(db.textContent=u4),Ck=r(pt),ib=d(pt,"P",{"data-svelte-h":!0}),x(ib)!=="svelte-oy0nqf"&&(ib.textContent=g4),Ik=r(pt),mb=d(pt,"P",{"data-svelte-h":!0}),x(mb)!=="svelte-nds7wn"&&(mb.textContent=f4),Uk=r(pt),f(Yr.$$.fragment,pt),pt.forEach(i),Zk=r(F),Qe=d(F,"DIV",{class:!0});var dt=w(Qe);f(ti.$$.fragment,dt),Rk=r(dt),hb=d(dt,"P",{"data-svelte-h":!0}),x(hb)!=="svelte-1q1ik80"&&(hb.innerHTML=b4),Fk=r(dt),ub=d(dt,"P",{"data-svelte-h":!0}),x(ub)!=="svelte-15z1w4c"&&(ub.innerHTML=_4),Gk=r(dt),gb=d(dt,"P",{"data-svelte-h":!0}),x(gb)!=="svelte-1tad20v"&&(gb.innerHTML=x4),Nk=r(dt),f(Lr.$$.fragment,dt),dt.forEach(i),zk=r(F),Ct=d(F,"DIV",{class:!0});var os=w(Ct);f(si.$$.fragment,os),Xk=r(os),fb=d(os,"P",{"data-svelte-h":!0}),x(fb)!=="svelte-1t1fvqt"&&(fb.innerHTML=y4),Vk=r(os),bb=d(os,"P",{"data-svelte-h":!0}),x(bb)!=="svelte-iyxfy2"&&(bb.innerHTML=j4),qk=r(os),f(Sr.$$.fragment,os),os.forEach(i),Bk=r(F),Ar=d(F,"DIV",{class:!0});var Wh=w(Ar);f(ai.$$.fragment,Wh),Wk=r(Wh),_b=d(Wh,"P",{"data-svelte-h":!0}),x(_b)!=="svelte-1cvucj0"&&(_b.innerHTML=$4),Wh.forEach(i),Hk=r(F),Ye=d(F,"DIV",{class:!0});var it=w(Ye);f(ni.$$.fragment,it),Ek=r(it),xb=d(it,"P",{"data-svelte-h":!0}),x(xb)!=="svelte-5o7j4w"&&(xb.innerHTML=v4),Qk=r(it),yb=d(it,"P",{"data-svelte-h":!0}),x(yb)!=="svelte-gjvspf"&&(yb.innerHTML=w4),Yk=r(it),jb=d(it,"P",{"data-svelte-h":!0}),x(jb)!=="svelte-1ljdy4d"&&(jb.innerHTML=M4),Lk=r(it),f(Pr.$$.fragment,it),it.forEach(i),Sk=r(F),Le=d(F,"DIV",{class:!0});var mt=w(Le);f(li.$$.fragment,mt),Ak=r(mt),$b=d(mt,"P",{"data-svelte-h":!0}),x($b)!=="svelte-v9r8r9"&&($b.innerHTML=k4),Pk=r(mt),vb=d(mt,"P",{"data-svelte-h":!0}),x(vb)!=="svelte-16m2hyo"&&(vb.innerHTML=J4),Kk=r(mt),wb=d(mt,"P",{"data-svelte-h":!0}),x(wb)!=="svelte-1xq9y03"&&(wb.innerHTML=T4),Ok=r(mt),f(Kr.$$.fragment,mt),mt.forEach(i),eJ=r(F),la=d(F,"DIV",{class:!0});var zn=w(la);f(ri.$$.fragment,zn),tJ=r(zn),Mb=d(zn,"P",{"data-svelte-h":!0}),x(Mb)!=="svelte-8vebwi"&&(Mb.textContent=D4),sJ=r(zn),f(Or.$$.fragment,zn),zn.forEach(i),aJ=r(F),ra=d(F,"DIV",{class:!0});var Xn=w(ra);f(oi.$$.fragment,Xn),nJ=r(Xn),kb=d(Xn,"P",{"data-svelte-h":!0}),x(kb)!=="svelte-1y0jkhx"&&(kb.textContent=C4),lJ=r(Xn),f(eo.$$.fragment,Xn),Xn.forEach(i),rJ=r(F),oa=d(F,"DIV",{class:!0});var Vn=w(oa);f(ci.$$.fragment,Vn),oJ=r(Vn),Jb=d(Vn,"P",{"data-svelte-h":!0}),x(Jb)!=="svelte-6q86ko"&&(Jb.textContent=I4),cJ=r(Vn),f(to.$$.fragment,Vn),Vn.forEach(i),pJ=r(F),Se=d(F,"DIV",{class:!0});var ht=w(Se);f(pi.$$.fragment,ht),dJ=r(ht),Tb=d(ht,"P",{"data-svelte-h":!0}),x(Tb)!=="svelte-xxkf15"&&(Tb.textContent=U4),iJ=r(ht),Db=d(ht,"P",{"data-svelte-h":!0}),x(Db)!=="svelte-q7bhdj"&&(Db.textContent=Z4),mJ=r(ht),Cb=d(ht,"P",{"data-svelte-h":!0}),x(Cb)!=="svelte-sz3lir"&&(Cb.innerHTML=R4),hJ=r(ht),f(so.$$.fragment,ht),ht.forEach(i),uJ=r(F),Ae=d(F,"DIV",{class:!0});var ut=w(Ae);f(di.$$.fragment,ut),gJ=r(ut),Ib=d(ut,"P",{"data-svelte-h":!0}),x(Ib)!=="svelte-q0ph7l"&&(Ib.textContent=F4),fJ=r(ut),Ub=d(ut,"P",{"data-svelte-h":!0}),x(Ub)!=="svelte-1ks066a"&&(Ub.innerHTML=G4),bJ=r(ut),Zb=d(ut,"UL",{"data-svelte-h":!0}),x(Zb)!=="svelte-1gu32p2"&&(Zb.innerHTML=N4),_J=r(ut),f(ao.$$.fragment,ut),ut.forEach(i),xJ=r(F),ca=d(F,"DIV",{class:!0});var qn=w(ca);f(ii.$$.fragment,qn),yJ=r(qn),Rb=d(qn,"P",{"data-svelte-h":!0}),x(Rb)!=="svelte-h617tn"&&(Rb.textContent=z4),jJ=r(qn),f(no.$$.fragment,qn),qn.forEach(i),$J=r(F),It=d(F,"DIV",{class:!0});var cs=w(It);f(mi.$$.fragment,cs),vJ=r(cs),Fb=d(cs,"P",{"data-svelte-h":!0}),x(Fb)!=="svelte-1qtckqx"&&(Fb.textContent=X4),wJ=r(cs),Gb=d(cs,"P",{"data-svelte-h":!0}),x(Gb)!=="svelte-1fw89ol"&&(Gb.textContent=V4),MJ=r(cs),f(lo.$$.fragment,cs),cs.forEach(i),kJ=r(F),pa=d(F,"DIV",{class:!0});var Bn=w(pa);f(hi.$$.fragment,Bn),JJ=r(Bn),Nb=d(Bn,"P",{"data-svelte-h":!0}),x(Nb)!=="svelte-5lqtia"&&(Nb.innerHTML=q4),TJ=r(Bn),f(ro.$$.fragment,Bn),Bn.forEach(i),DJ=r(F),je=d(F,"DIV",{class:!0});var Ne=w(je);f(ui.$$.fragment,Ne),CJ=r(Ne),zb=d(Ne,"P",{"data-svelte-h":!0}),x(zb)!=="svelte-1mx4v1x"&&(zb.innerHTML=B4),IJ=r(Ne),Xb=d(Ne,"P",{"data-svelte-h":!0}),x(Xb)!=="svelte-11tammr"&&(Xb.textContent=W4),UJ=r(Ne),Vb=d(Ne,"P",{"data-svelte-h":!0}),x(Vb)!=="svelte-4t9ro4"&&(Vb.innerHTML=H4),ZJ=r(Ne),f(oo.$$.fragment,Ne),RJ=r(Ne),f(co.$$.fragment,Ne),Ne.forEach(i),FJ=r(F),Pe=d(F,"DIV",{class:!0});var gt=w(Pe);f(gi.$$.fragment,gt),GJ=r(gt),qb=d(gt,"P",{"data-svelte-h":!0}),x(qb)!=="svelte-12ymtrf"&&(qb.innerHTML=E4),NJ=r(gt),Bb=d(gt,"P",{"data-svelte-h":!0}),x(Bb)!=="svelte-1dxtgu9"&&(Bb.innerHTML=Q4),zJ=r(gt),Wb=d(gt,"P",{"data-svelte-h":!0}),x(Wb)!=="svelte-k8w53u"&&(Wb.textContent=Y4),XJ=r(gt),f(po.$$.fragment,gt),gt.forEach(i),VJ=r(F),da=d(F,"DIV",{class:!0});var Wn=w(da);f(fi.$$.fragment,Wn),qJ=r(Wn),Hb=d(Wn,"P",{"data-svelte-h":!0}),x(Hb)!=="svelte-mf7sgr"&&(Hb.innerHTML=L4),BJ=r(Wn),f(io.$$.fragment,Wn),Wn.forEach(i),WJ=r(F),ia=d(F,"DIV",{class:!0});var Hn=w(ia);f(bi.$$.fragment,Hn),HJ=r(Hn),Eb=d(Hn,"P",{"data-svelte-h":!0}),x(Eb)!=="svelte-qq1a1"&&(Eb.innerHTML=S4),EJ=r(Hn),f(mo.$$.fragment,Hn),Hn.forEach(i),QJ=r(F),ma=d(F,"DIV",{class:!0});var En=w(ma);f(_i.$$.fragment,En),YJ=r(En),Qb=d(En,"P",{"data-svelte-h":!0}),x(Qb)!=="svelte-y88ue6"&&(Qb.innerHTML=A4),LJ=r(En),f(ho.$$.fragment,En),En.forEach(i),SJ=r(F),ha=d(F,"DIV",{class:!0});var Qn=w(ha);f(xi.$$.fragment,Qn),AJ=r(Qn),Yb=d(Qn,"P",{"data-svelte-h":!0}),x(Yb)!=="svelte-nwwxop"&&(Yb.innerHTML=P4),PJ=r(Qn),f(uo.$$.fragment,Qn),Qn.forEach(i),KJ=r(F),ua=d(F,"DIV",{class:!0});var Yn=w(ua);f(yi.$$.fragment,Yn),OJ=r(Yn),Lb=d(Yn,"P",{"data-svelte-h":!0}),x(Lb)!=="svelte-132ui2c"&&(Lb.innerHTML=K4),eT=r(Yn),f(go.$$.fragment,Yn),Yn.forEach(i),F.forEach(i),Hj=r(n),Sb=d(n,"A",{id:!0}),w(Sb).forEach(i),Ej=r(n),f(ji.$$.fragment,n),Qj=r(n),$i=d(n,"P",{"data-svelte-h":!0}),x($i)!=="svelte-1cg64dh"&&($i.innerHTML=O4),Yj=r(n),U=d(n,"DIV",{class:!0});var Z=w(U);f(vi.$$.fragment,Z),tT=r(Z),Ab=d(Z,"P",{"data-svelte-h":!0}),x(Ab)!=="svelte-klv7m9"&&(Ab.textContent=eR),sT=r(Z),Ut=d(Z,"DIV",{class:!0});var ps=w(Ut);f(wi.$$.fragment,ps),aT=r(ps),Pb=d(ps,"P",{"data-svelte-h":!0}),x(Pb)!=="svelte-11un0dh"&&(Pb.textContent=tR),nT=r(ps),f(fo.$$.fragment,ps),lT=r(ps),f(bo.$$.fragment,ps),ps.forEach(i),rT=r(Z),ga=d(Z,"DIV",{class:!0});var Ln=w(ga);f(Mi.$$.fragment,Ln),oT=r(Ln),Kb=d(Ln,"P",{"data-svelte-h":!0}),x(Kb)!=="svelte-1ayy7iq"&&(Kb.textContent=sR),cT=r(Ln),f(_o.$$.fragment,Ln),Ln.forEach(i),pT=r(Z),fa=d(Z,"DIV",{class:!0});var Sn=w(fa);f(ki.$$.fragment,Sn),dT=r(Sn),Ob=d(Sn,"P",{"data-svelte-h":!0}),x(Ob)!=="svelte-1r6z74q"&&(Ob.textContent=aR),iT=r(Sn),f(xo.$$.fragment,Sn),Sn.forEach(i),mT=r(Z),ba=d(Z,"DIV",{class:!0});var An=w(ba);f(Ji.$$.fragment,An),hT=r(An),e_=d(An,"P",{"data-svelte-h":!0}),x(e_)!=="svelte-6q86ko"&&(e_.textContent=nR),uT=r(An),f(yo.$$.fragment,An),An.forEach(i),gT=r(Z),_a=d(Z,"DIV",{class:!0});var Pn=w(_a);f(Ti.$$.fragment,Pn),fT=r(Pn),t_=d(Pn,"P",{"data-svelte-h":!0}),x(t_)!=="svelte-gdaajq"&&(t_.textContent=lR),bT=r(Pn),f(jo.$$.fragment,Pn),Pn.forEach(i),_T=r(Z),S=d(Z,"DIV",{class:!0});var K=w(S);f(Di.$$.fragment,K),xT=r(K),s_=d(K,"P",{"data-svelte-h":!0}),x(s_)!=="svelte-138387w"&&(s_.textContent=rR),yT=r(K),a_=d(K,"P",{"data-svelte-h":!0}),x(a_)!=="svelte-1ol1dhc"&&(a_.textContent=oR),jT=r(K),n_=d(K,"UL",{"data-svelte-h":!0}),x(n_)!=="svelte-1kmhkja"&&(n_.innerHTML=cR),$T=r(K),l_=d(K,"P",{"data-svelte-h":!0}),x(l_)!=="svelte-1yox2nm"&&(l_.innerHTML=pR),vT=r(K),r_=d(K,"P",{"data-svelte-h":!0}),x(r_)!=="svelte-mbbjf0"&&(r_.innerHTML=dR),wT=r(K),o_=d(K,"P",{"data-svelte-h":!0}),x(o_)!=="svelte-kvfsh7"&&(o_.textContent=iR),MT=r(K),f($o.$$.fragment,K),kT=r(K),f(vo.$$.fragment,K),K.forEach(i),JT=r(Z),c_=d(Z,"DIV",{class:!0});var Tj=w(c_);f(Ci.$$.fragment,Tj),Tj.forEach(i),TT=r(Z),wo=d(Z,"DIV",{class:!0});var Hh=w(wo);f(Ii.$$.fragment,Hh),DT=r(Hh),p_=d(Hh,"P",{"data-svelte-h":!0}),x(p_)!=="svelte-3yz5m3"&&(p_.innerHTML=mR),Hh.forEach(i),CT=r(Z),$e=d(Z,"DIV",{class:!0});var ze=w($e);f(Ui.$$.fragment,ze),IT=r(ze),d_=d(ze,"P",{"data-svelte-h":!0}),x(d_)!=="svelte-1oo88ic"&&(d_.textContent=hR),UT=r(ze),i_=d(ze,"P",{"data-svelte-h":!0}),x(i_)!=="svelte-nw1g8z"&&(i_.innerHTML=uR),ZT=r(ze),m_=d(ze,"UL",{"data-svelte-h":!0}),x(m_)!=="svelte-1cfjt5y"&&(m_.innerHTML=gR),RT=r(ze),h_=d(ze,"P",{"data-svelte-h":!0}),x(h_)!=="svelte-1o6vcan"&&(h_.innerHTML=fR),FT=r(ze),f(Mo.$$.fragment,ze),ze.forEach(i),GT=r(Z),xa=d(Z,"DIV",{class:!0});var Kn=w(xa);f(Zi.$$.fragment,Kn),NT=r(Kn),u_=d(Kn,"P",{"data-svelte-h":!0}),x(u_)!=="svelte-l4yuic"&&(u_.textContent=bR),zT=r(Kn),f(ko.$$.fragment,Kn),Kn.forEach(i),XT=r(Z),Zt=d(Z,"DIV",{class:!0});var ds=w(Zt);f(Ri.$$.fragment,ds),VT=r(ds),g_=d(ds,"P",{"data-svelte-h":!0}),x(g_)!=="svelte-nd2ell"&&(g_.textContent=_R),qT=r(ds),f_=d(ds,"P",{"data-svelte-h":!0}),x(f_)!=="svelte-6s7cv7"&&(f_.innerHTML=xR),BT=r(ds),f(Jo.$$.fragment,ds),ds.forEach(i),WT=r(Z),ve=d(Z,"DIV",{class:!0});var Xe=w(ve);f(Fi.$$.fragment,Xe),HT=r(Xe),b_=d(Xe,"P",{"data-svelte-h":!0}),x(b_)!=="svelte-1t555q9"&&(b_.textContent=yR),ET=r(Xe),__=d(Xe,"P",{"data-svelte-h":!0}),x(__)!=="svelte-1bfz8uc"&&(__.innerHTML=jR),QT=r(Xe),x_=d(Xe,"P",{"data-svelte-h":!0}),x(x_)!=="svelte-1imimjw"&&(x_.innerHTML=$R),YT=r(Xe),y_=d(Xe,"P",{"data-svelte-h":!0}),x(y_)!=="svelte-1t93jpr"&&(y_.innerHTML=vR),LT=r(Xe),f(To.$$.fragment,Xe),Xe.forEach(i),ST=r(Z),ya=d(Z,"DIV",{class:!0});var On=w(ya);f(Gi.$$.fragment,On),AT=r(On),j_=d(On,"P",{"data-svelte-h":!0}),x(j_)!=="svelte-ouzfa1"&&(j_.textContent=wR),PT=r(On),f(Do.$$.fragment,On),On.forEach(i),KT=r(Z),ja=d(Z,"DIV",{class:!0});var el=w(ja);f(Ni.$$.fragment,el),OT=r(el),$_=d(el,"P",{"data-svelte-h":!0}),x($_)!=="svelte-1v7mnfe"&&($_.innerHTML=MR),e7=r(el),f(Co.$$.fragment,el),el.forEach(i),t7=r(Z),$a=d(Z,"DIV",{class:!0});var tl=w($a);f(zi.$$.fragment,tl),s7=r(tl),v_=d(tl,"P",{"data-svelte-h":!0}),x(v_)!=="svelte-3f7f6f"&&(v_.innerHTML=kR),a7=r(tl),f(Io.$$.fragment,tl),tl.forEach(i),n7=r(Z),le=d(Z,"DIV",{class:!0});var he=w(le);f(Xi.$$.fragment,he),l7=r(he),w_=d(he,"P",{"data-svelte-h":!0}),x(w_)!=="svelte-vo46xv"&&(w_.innerHTML=JR),r7=r(he),M_=d(he,"P",{"data-svelte-h":!0}),x(M_)!=="svelte-rhcem5"&&(M_.innerHTML=TR),o7=r(he),k_=d(he,"P",{"data-svelte-h":!0}),x(k_)!=="svelte-144zgr4"&&(k_.innerHTML=DR),c7=r(he),J_=d(he,"P",{"data-svelte-h":!0}),x(J_)!=="svelte-1jvt9k1"&&(J_.innerHTML=CR),p7=r(he),T_=d(he,"P",{"data-svelte-h":!0}),x(T_)!=="svelte-1k56e43"&&(T_.innerHTML=IR),d7=r(he),f(Uo.$$.fragment,he),he.forEach(i),i7=r(Z),Rt=d(Z,"DIV",{class:!0});var is=w(Rt);f(Vi.$$.fragment,is),m7=r(is),D_=d(is,"P",{"data-svelte-h":!0}),x(D_)!=="svelte-1kbcel"&&(D_.innerHTML=UR),h7=r(is),C_=d(is,"P",{"data-svelte-h":!0}),x(C_)!=="svelte-115p2mp"&&(C_.textContent=ZR),u7=r(is),f(Zo.$$.fragment,is),is.forEach(i),g7=r(Z),re=d(Z,"DIV",{class:!0});var ue=w(re);f(qi.$$.fragment,ue),f7=r(ue),I_=d(ue,"P",{"data-svelte-h":!0}),x(I_)!=="svelte-11t5l9h"&&(I_.textContent=RR),b7=r(ue),U_=d(ue,"P",{"data-svelte-h":!0}),x(U_)!=="svelte-fyok9w"&&(U_.textContent=FR),_7=r(ue),Z_=d(ue,"OL",{"data-svelte-h":!0}),x(Z_)!=="svelte-11q9ndv"&&(Z_.innerHTML=GR),x7=r(ue),f(Ro.$$.fragment,ue),y7=r(ue),f(Fo.$$.fragment,ue),j7=r(ue),f(Go.$$.fragment,ue),ue.forEach(i),$7=r(Z),oe=d(Z,"DIV",{class:!0});var ge=w(oe);f(Bi.$$.fragment,ge),v7=r(ge),R_=d(ge,"P",{"data-svelte-h":!0}),x(R_)!=="svelte-1qoujby"&&(R_.textContent=NR),w7=r(ge),F_=d(ge,"P",{"data-svelte-h":!0}),x(F_)!=="svelte-fyok9w"&&(F_.textContent=zR),M7=r(ge),G_=d(ge,"OL",{"data-svelte-h":!0}),x(G_)!=="svelte-11q9ndv"&&(G_.innerHTML=XR),k7=r(ge),f(No.$$.fragment,ge),J7=r(ge),f(zo.$$.fragment,ge),T7=r(ge),f(Xo.$$.fragment,ge),ge.forEach(i),D7=r(Z),Vo=d(Z,"DIV",{class:!0});var Eh=w(Vo);f(Wi.$$.fragment,Eh),C7=r(Eh),N_=d(Eh,"P",{"data-svelte-h":!0}),x(N_)!=="svelte-90roav"&&(N_.innerHTML=VR),Eh.forEach(i),I7=r(Z),qo=d(Z,"DIV",{class:!0});var Qh=w(qo);f(Hi.$$.fragment,Qh),U7=r(Qh),z_=d(Qh,"P",{"data-svelte-h":!0}),x(z_)!=="svelte-skkx34"&&(z_.innerHTML=qR),Qh.forEach(i),Z7=r(Z),X_=d(Z,"DIV",{class:!0});var Dj=w(X_);f(Ei.$$.fragment,Dj),Dj.forEach(i),R7=r(Z),V_=d(Z,"DIV",{class:!0});var Cj=w(V_);f(Qi.$$.fragment,Cj),Cj.forEach(i),F7=r(Z),q_=d(Z,"DIV",{class:!0});var Ij=w(q_);f(Yi.$$.fragment,Ij),Ij.forEach(i),G7=r(Z),B_=d(Z,"DIV",{class:!0});var NG=w(B_);f(Li.$$.fragment,NG),NG.forEach(i),N7=r(Z),W_=d(Z,"DIV",{class:!0});var zG=w(W_);f(Si.$$.fragment,zG),zG.forEach(i),z7=r(Z),H_=d(Z,"DIV",{class:!0});var XG=w(H_);f(Ai.$$.fragment,XG),XG.forEach(i),X7=r(Z),E_=d(Z,"DIV",{class:!0});var VG=w(E_);f(Pi.$$.fragment,VG),VG.forEach(i),V7=r(Z),Q_=d(Z,"DIV",{class:!0});var qG=w(Q_);f(Ki.$$.fragment,qG),qG.forEach(i),q7=r(Z),Y_=d(Z,"DIV",{class:!0});var BG=w(Y_);f(Oi.$$.fragment,BG),BG.forEach(i),B7=r(Z),L_=d(Z,"DIV",{class:!0});var WG=w(L_);f(em.$$.fragment,WG),WG.forEach(i),W7=r(Z),S_=d(Z,"DIV",{class:!0});var HG=w(S_);f(tm.$$.fragment,HG),HG.forEach(i),H7=r(Z),A_=d(Z,"DIV",{class:!0});var EG=w(A_);f(sm.$$.fragment,EG),EG.forEach(i),E7=r(Z),P_=d(Z,"DIV",{class:!0});var QG=w(P_);f(am.$$.fragment,QG),QG.forEach(i),Z.forEach(i),Lj=r(n),f(nm.$$.fragment,n),Sj=r(n),lm=d(n,"P",{"data-svelte-h":!0}),x(lm)!=="svelte-bcebso"&&(lm.innerHTML=BR),Aj=r(n),q=d(n,"DIV",{class:!0});var A=w(q);f(rm.$$.fragment,A),Q7=r(A),we=d(A,"DIV",{class:!0});var zt=w(we);f(om.$$.fragment,zt),Y7=r(zt),K_=d(zt,"P",{"data-svelte-h":!0}),x(K_)!=="svelte-1trckff"&&(K_.textContent=WR),L7=r(zt),O_=d(zt,"P",{"data-svelte-h":!0}),x(O_)!=="svelte-nw1g8z"&&(O_.innerHTML=HR),S7=r(zt),ex=d(zt,"UL",{"data-svelte-h":!0}),x(ex)!=="svelte-sdrr7i"&&(ex.innerHTML=ER),A7=r(zt),tx=d(zt,"P",{"data-svelte-h":!0}),x(tx)!=="svelte-1o6vcan"&&(tx.innerHTML=QR),P7=r(zt),f(Bo.$$.fragment,zt),zt.forEach(i),K7=r(A),va=d(A,"DIV",{class:!0});var Qy=w(va);f(cm.$$.fragment,Qy),O7=r(Qy),sx=d(Qy,"P",{"data-svelte-h":!0}),x(sx)!=="svelte-17cfhcv"&&(sx.textContent=YR),eD=r(Qy),f(Wo.$$.fragment,Qy),Qy.forEach(i),tD=r(A),Me=d(A,"DIV",{class:!0});var Xt=w(Me);f(pm.$$.fragment,Xt),sD=r(Xt),ax=d(Xt,"P",{"data-svelte-h":!0}),x(ax)!=="svelte-1hiiixb"&&(ax.textContent=LR),aD=r(Xt),nx=d(Xt,"P",{"data-svelte-h":!0}),x(nx)!=="svelte-1hbfiyb"&&(nx.textContent=SR),nD=r(Xt),lx=d(Xt,"P",{"data-svelte-h":!0}),x(lx)!=="svelte-1imimjw"&&(lx.innerHTML=AR),lD=r(Xt),rx=d(Xt,"P",{"data-svelte-h":!0}),x(rx)!=="svelte-1fl55qg"&&(rx.innerHTML=PR),rD=r(Xt),f(Ho.$$.fragment,Xt),Xt.forEach(i),oD=r(A),wa=d(A,"DIV",{class:!0});var Yy=w(wa);f(dm.$$.fragment,Yy),cD=r(Yy),ox=d(Yy,"P",{"data-svelte-h":!0}),x(ox)!=="svelte-1j86jxl"&&(ox.textContent=KR),pD=r(Yy),f(Eo.$$.fragment,Yy),Yy.forEach(i),dD=r(A),Ma=d(A,"DIV",{class:!0});var Ly=w(Ma);f(im.$$.fragment,Ly),iD=r(Ly),cx=d(Ly,"P",{"data-svelte-h":!0}),x(cx)!=="svelte-1wrj59"&&(cx.textContent=OR),mD=r(Ly),f(Qo.$$.fragment,Ly),Ly.forEach(i),hD=r(A),ka=d(A,"DIV",{class:!0});var Sy=w(ka);f(mm.$$.fragment,Sy),uD=r(Sy),px=d(Sy,"P",{"data-svelte-h":!0}),x(px)!=="svelte-xf9m5z"&&(px.textContent=eF),gD=r(Sy),f(Yo.$$.fragment,Sy),Sy.forEach(i),fD=r(A),Ja=d(A,"DIV",{class:!0});var Ay=w(Ja);f(hm.$$.fragment,Ay),bD=r(Ay),dx=d(Ay,"P",{"data-svelte-h":!0}),x(dx)!=="svelte-1q2nooa"&&(dx.textContent=tF),_D=r(Ay),f(Lo.$$.fragment,Ay),Ay.forEach(i),xD=r(A),Ta=d(A,"DIV",{class:!0});var Py=w(Ta);f(um.$$.fragment,Py),yD=r(Py),ix=d(Py,"P",{"data-svelte-h":!0}),x(ix)!=="svelte-1bvysnr"&&(ix.textContent=sF),jD=r(Py),f(So.$$.fragment,Py),Py.forEach(i),$D=r(A),Da=d(A,"DIV",{class:!0});var Ky=w(Da);f(gm.$$.fragment,Ky),vD=r(Ky),mx=d(Ky,"P",{"data-svelte-h":!0}),x(mx)!=="svelte-1e299r"&&(mx.textContent=aF),wD=r(Ky),f(Ao.$$.fragment,Ky),Ky.forEach(i),MD=r(A),Ca=d(A,"DIV",{class:!0});var Oy=w(Ca);f(fm.$$.fragment,Oy),kD=r(Oy),hx=d(Oy,"P",{"data-svelte-h":!0}),x(hx)!=="svelte-1lkkmts"&&(hx.textContent=nF),JD=r(Oy),f(Po.$$.fragment,Oy),Oy.forEach(i),A.forEach(i),Pj=r(n),f(bm.$$.fragment,n),Kj=r(n),G=d(n,"DIV",{class:!0});var X=w(G);f(_m.$$.fragment,X),TD=r(X),ux=d(X,"P",{"data-svelte-h":!0}),x(ux)!=="svelte-1jylqo6"&&(ux.textContent=lF),DD=r(X),gx=d(X,"P",{"data-svelte-h":!0}),x(gx)!=="svelte-1709x5u"&&(gx.innerHTML=rF),CD=r(X),fx=d(X,"P",{"data-svelte-h":!0}),x(fx)!=="svelte-kq6msj"&&(fx.innerHTML=oF),ID=r(X),se=d(X,"UL",{});var ke=w(se);bx=d(ke,"LI",{"data-svelte-h":!0}),x(bx)!=="svelte-1pciwd4"&&(bx.innerHTML=cF),UD=r(ke),_x=d(ke,"LI",{"data-svelte-h":!0}),x(_x)!=="svelte-1sb3tec"&&(_x.innerHTML=pF),ZD=r(ke),xx=d(ke,"LI",{"data-svelte-h":!0}),x(xx)!=="svelte-1y9bkix"&&(xx.innerHTML=dF),RD=r(ke),xm=d(ke,"LI",{});var T2=w(xm);yx=d(T2,"P",{"data-svelte-h":!0}),x(yx)!=="svelte-15rebw3"&&(yx.innerHTML=iF),FD=r(T2),f(Ko.$$.fragment,T2),T2.forEach(i),GD=r(ke),jx=d(ke,"LI",{"data-svelte-h":!0}),x(jx)!=="svelte-1q4yj41"&&(jx.innerHTML=mF),ND=r(ke),$x=d(ke,"LI",{"data-svelte-h":!0}),x($x)!=="svelte-84q75h"&&($x.innerHTML=hF),zD=r(ke),vx=d(ke,"LI",{"data-svelte-h":!0}),x(vx)!=="svelte-jbrxmc"&&(vx.innerHTML=uF),XD=r(ke),wx=d(ke,"LI",{"data-svelte-h":!0}),x(wx)!=="svelte-15yon37"&&(wx.innerHTML=gF),ke.forEach(i),VD=r(X),Ia=d(X,"DIV",{class:!0});var ej=w(Ia);f(ym.$$.fragment,ej),qD=r(ej),Mx=d(ej,"P",{"data-svelte-h":!0}),x(Mx)!=="svelte-3ef83k"&&(Mx.innerHTML=fF),BD=r(ej),f(Oo.$$.fragment,ej),ej.forEach(i),WD=r(X),ec=d(X,"DIV",{class:!0});var D2=w(ec);f(jm.$$.fragment,D2),HD=r(D2),kx=d(D2,"P",{"data-svelte-h":!0}),x(kx)!=="svelte-176mzim"&&(kx.textContent=bF),D2.forEach(i),ED=r(X),tc=d(X,"DIV",{class:!0});var C2=w(tc);f($m.$$.fragment,C2),QD=r(C2),Jx=d(C2,"P",{"data-svelte-h":!0}),x(Jx)!=="svelte-1dh8kdw"&&(Jx.textContent=_F),C2.forEach(i),YD=r(X),sc=d(X,"DIV",{class:!0});var I2=w(sc);f(vm.$$.fragment,I2),LD=r(I2),Tx=d(I2,"P",{"data-svelte-h":!0}),x(Tx)!=="svelte-19iv1kc"&&(Tx.textContent=xF),I2.forEach(i),SD=r(X),ac=d(X,"DIV",{class:!0});var U2=w(ac);f(wm.$$.fragment,U2),AD=r(U2),Dx=d(U2,"P",{"data-svelte-h":!0}),x(Dx)!=="svelte-1ui1q6e"&&(Dx.textContent=yF),U2.forEach(i),PD=r(X),nc=d(X,"DIV",{class:!0});var Z2=w(nc);f(Mm.$$.fragment,Z2),KD=r(Z2),Cx=d(Z2,"P",{"data-svelte-h":!0}),x(Cx)!=="svelte-1updbyg"&&(Cx.textContent=jF),Z2.forEach(i),OD=r(X),lc=d(X,"DIV",{class:!0});var R2=w(lc);f(km.$$.fragment,R2),eC=r(R2),Ix=d(R2,"P",{"data-svelte-h":!0}),x(Ix)!=="svelte-fiz4kg"&&(Ix.textContent=$F),R2.forEach(i),tC=r(X),Ft=d(X,"DIV",{class:!0});var Vc=w(Ft);f(Jm.$$.fragment,Vc),sC=r(Vc),Ux=d(Vc,"P",{"data-svelte-h":!0}),x(Ux)!=="svelte-1wcuag3"&&(Ux.innerHTML=vF),aC=r(Vc),Zx=d(Vc,"P",{"data-svelte-h":!0}),x(Zx)!=="svelte-1o74wxf"&&(Zx.innerHTML=wF),nC=r(Vc),f(rc.$$.fragment,Vc),Vc.forEach(i),lC=r(X),Ua=d(X,"DIV",{class:!0});var tj=w(Ua);f(Tm.$$.fragment,tj),rC=r(tj),Rx=d(tj,"P",{"data-svelte-h":!0}),x(Rx)!=="svelte-g8b3jh"&&(Rx.innerHTML=MF),oC=r(tj),Fx=d(tj,"P",{"data-svelte-h":!0}),x(Fx)!=="svelte-qsxzv8"&&(Fx.textContent=kF),tj.forEach(i),cC=r(X),Ke=d(X,"DIV",{class:!0});var Xa=w(Ke);f(Dm.$$.fragment,Xa),pC=r(Xa),Gx=d(Xa,"P",{"data-svelte-h":!0}),x(Gx)!=="svelte-4nqzr7"&&(Gx.innerHTML=JF),dC=r(Xa),Nx=d(Xa,"P",{"data-svelte-h":!0}),x(Nx)!=="svelte-pi4np6"&&(Nx.innerHTML=TF),iC=r(Xa),zx=d(Xa,"P",{"data-svelte-h":!0}),x(zx)!=="svelte-1yubjw9"&&(zx.innerHTML=DF),mC=r(Xa),f(oc.$$.fragment,Xa),Xa.forEach(i),hC=r(X),Gt=d(X,"DIV",{class:!0});var qc=w(Gt);f(Cm.$$.fragment,qc),uC=r(qc),Xx=d(qc,"P",{"data-svelte-h":!0}),x(Xx)!=="svelte-1cygjyf"&&(Xx.innerHTML=CF),gC=r(qc),Vx=d(qc,"P",{"data-svelte-h":!0}),x(Vx)!=="svelte-whtedo"&&(Vx.textContent=IF),fC=r(qc),f(cc.$$.fragment,qc),qc.forEach(i),X.forEach(i),Oj=r(n),f(Im.$$.fragment,n),e2=r(n),Ce=d(n,"DIV",{class:!0});var Va=w(Ce);f(Um.$$.fragment,Va),bC=r(Va),qx=d(Va,"P",{"data-svelte-h":!0}),x(qx)!=="svelte-zmg4ns"&&(qx.textContent=UF),_C=r(Va),Bx=d(Va,"P",{"data-svelte-h":!0}),x(Bx)!=="svelte-e7lqi2"&&(Bx.innerHTML=ZF),xC=r(Va),Wx=d(Va,"UL",{"data-svelte-h":!0}),x(Wx)!=="svelte-vd1z00"&&(Wx.innerHTML=RF),yC=r(Va),f(pc.$$.fragment,Va),Va.forEach(i),t2=r(n),Q=d(n,"DIV",{class:!0});var ce=w(Q);f(Zm.$$.fragment,ce),jC=r(ce),Hx=d(ce,"P",{"data-svelte-h":!0}),x(Hx)!=="svelte-1xnvn4g"&&(Hx.textContent=FF),$C=r(ce),Ex=d(ce,"P",{"data-svelte-h":!0}),x(Ex)!=="svelte-o3wlni"&&(Ex.innerHTML=GF),vC=r(ce),Qx=d(ce,"UL",{"data-svelte-h":!0}),x(Qx)!=="svelte-c26y92"&&(Qx.innerHTML=NF),wC=r(ce),Yx=d(ce,"P",{"data-svelte-h":!0}),x(Yx)!=="svelte-15ivgce"&&(Yx.textContent=zF),MC=r(ce),f(dc.$$.fragment,ce),kC=r(ce),Za=d(ce,"DIV",{class:!0});var sj=w(Za);f(Rm.$$.fragment,sj),JC=r(sj),Lx=d(sj,"P",{"data-svelte-h":!0}),x(Lx)!=="svelte-156pqhu"&&(Lx.innerHTML=XF),TC=r(sj),Sx=d(sj,"UL",{"data-svelte-h":!0}),x(Sx)!=="svelte-1d5lbk6"&&(Sx.innerHTML=VF),sj.forEach(i),DC=r(ce),Nt=d(ce,"DIV",{class:!0});var Bc=w(Nt);f(Fm.$$.fragment,Bc),CC=r(Bc),Ax=d(Bc,"P",{"data-svelte-h":!0}),x(Ax)!=="svelte-18p6gyr"&&(Ax.innerHTML=qF),IC=r(Bc),Px=d(Bc,"P",{"data-svelte-h":!0}),x(Px)!=="svelte-1axj24d"&&(Px.innerHTML=BF),UC=r(Bc),f(ic.$$.fragment,Bc),Bc.forEach(i),ZC=r(ce),Ra=d(ce,"DIV",{class:!0});var aj=w(Ra);f(Gm.$$.fragment,aj),RC=r(aj),Kx=d(aj,"P",{"data-svelte-h":!0}),x(Kx)!=="svelte-bn939v"&&(Kx.innerHTML=WF),FC=r(aj),f(mc.$$.fragment,aj),aj.forEach(i),ce.forEach(i),s2=r(n),f(Nm.$$.fragment,n),a2=r(n),qt=d(n,"DIV",{class:!0});var nj=w(qt);f(zm.$$.fragment,nj),GC=r(nj),Ox=d(nj,"P",{"data-svelte-h":!0}),x(Ox)!=="svelte-pm3cjb"&&(Ox.textContent=HF),NC=r(nj),ey=d(nj,"P",{"data-svelte-h":!0}),x(ey)!=="svelte-3agqvs"&&(ey.innerHTML=EF),nj.forEach(i),n2=r(n),Bt=d(n,"DIV",{class:!0});var lj=w(Bt);f(Xm.$$.fragment,lj),zC=r(lj),ty=d(lj,"P",{"data-svelte-h":!0}),x(ty)!=="svelte-1cxss91"&&(ty.textContent=QF),XC=r(lj),f(hc.$$.fragment,lj),lj.forEach(i),l2=r(n),f(Vm.$$.fragment,n),r2=r(n),Oe=d(n,"DIV",{class:!0});var Wc=w(Oe);f(qm.$$.fragment,Wc),VC=r(Wc),sy=d(Wc,"P",{"data-svelte-h":!0}),x(sy)!=="svelte-m9j7yq"&&(sy.innerHTML=YF),qC=r(Wc),f(uc.$$.fragment,Wc),BC=r(Wc),gc=d(Wc,"DIV",{class:!0});var F2=w(gc);f(Bm.$$.fragment,F2),WC=r(F2),ay=d(F2,"P",{"data-svelte-h":!0}),x(ay)!=="svelte-m6djit"&&(ay.textContent=LF),F2.forEach(i),Wc.forEach(i),o2=r(n),et=d(n,"DIV",{class:!0});var Hc=w(et);f(Wm.$$.fragment,Hc),HC=r(Hc),ny=d(Hc,"P",{"data-svelte-h":!0}),x(ny)!=="svelte-6k9jnc"&&(ny.innerHTML=SF),EC=r(Hc),f(fc.$$.fragment,Hc),QC=r(Hc),bc=d(Hc,"DIV",{class:!0});var G2=w(bc);f(Hm.$$.fragment,G2),YC=r(G2),ly=d(G2,"P",{"data-svelte-h":!0}),x(ly)!=="svelte-192kpca"&&(ly.textContent=AF),G2.forEach(i),Hc.forEach(i),c2=r(n),f(Em.$$.fragment,n),p2=r(n),Wt=d(n,"DIV",{class:!0});var rj=w(Wt);f(Qm.$$.fragment,rj),LC=r(rj),ry=d(rj,"P",{"data-svelte-h":!0}),x(ry)!=="svelte-sflycm"&&(ry.textContent=PF),SC=r(rj),f(_c.$$.fragment,rj),rj.forEach(i),d2=r(n),Ht=d(n,"DIV",{class:!0});var oj=w(Ht);f(Ym.$$.fragment,oj),AC=r(oj),oy=d(oj,"P",{"data-svelte-h":!0}),x(oy)!=="svelte-54qrxk"&&(oy.textContent=KF),PC=r(oj),f(xc.$$.fragment,oj),oj.forEach(i),i2=r(n),Et=d(n,"DIV",{class:!0});var cj=w(Et);f(Lm.$$.fragment,cj),KC=r(cj),cy=d(cj,"P",{"data-svelte-h":!0}),x(cy)!=="svelte-8i2n0u"&&(cy.textContent=OF),OC=r(cj),f(yc.$$.fragment,cj),cj.forEach(i),m2=r(n),Qt=d(n,"DIV",{class:!0});var pj=w(Qt);f(Sm.$$.fragment,pj),eI=r(pj),py=d(pj,"P",{"data-svelte-h":!0}),x(py)!=="svelte-apnj56"&&(py.textContent=eG),tI=r(pj),f(jc.$$.fragment,pj),pj.forEach(i),h2=r(n),f(Am.$$.fragment,n),u2=r(n),W=d(n,"DIV",{class:!0});var ee=w(W);f(Pm.$$.fragment,ee),sI=r(ee),dy=d(ee,"P",{"data-svelte-h":!0}),x(dy)!=="svelte-1w1fc68"&&(dy.innerHTML=tG),aI=r(ee),iy=d(ee,"P",{"data-svelte-h":!0}),x(iy)!=="svelte-16tyu3i"&&(iy.textContent=sG),nI=r(ee),my=d(ee,"UL",{"data-svelte-h":!0}),x(my)!=="svelte-1400qwt"&&(my.innerHTML=aG),lI=r(ee),f($c.$$.fragment,ee),rI=r(ee),Fa=d(ee,"DIV",{class:!0});var dj=w(Fa);f(Km.$$.fragment,dj),oI=r(dj),hy=d(dj,"P",{"data-svelte-h":!0}),x(hy)!=="svelte-1rqntss"&&(hy.textContent=nG),cI=r(dj),uy=d(dj,"UL",{"data-svelte-h":!0}),x(uy)!=="svelte-11klihy"&&(uy.innerHTML=lG),dj.forEach(i),pI=r(ee),vc=d(ee,"DIV",{class:!0});var N2=w(vc);f(Om.$$.fragment,N2),dI=r(N2),gy=d(N2,"P",{"data-svelte-h":!0}),x(gy)!=="svelte-12gxlom"&&(gy.textContent=rG),N2.forEach(i),iI=r(ee),wc=d(ee,"DIV",{class:!0});var z2=w(wc);f(eh.$$.fragment,z2),mI=r(z2),fy=d(z2,"P",{"data-svelte-h":!0}),x(fy)!=="svelte-tijd25"&&(fy.textContent=oG),z2.forEach(i),hI=r(ee),Mc=d(ee,"DIV",{class:!0});var X2=w(Mc);f(th.$$.fragment,X2),uI=r(X2),by=d(X2,"P",{"data-svelte-h":!0}),x(by)!=="svelte-fiz4kg"&&(by.textContent=cG),X2.forEach(i),gI=r(ee),kc=d(ee,"DIV",{class:!0});var V2=w(kc);f(sh.$$.fragment,V2),fI=r(V2),_y=d(V2,"P",{"data-svelte-h":!0}),x(_y)!=="svelte-im5jl2"&&(_y.textContent=pG),V2.forEach(i),ee.forEach(i),g2=r(n),f(ah.$$.fragment,n),f2=r(n),H=d(n,"DIV",{class:!0});var te=w(H);f(nh.$$.fragment,te),bI=r(te),xy=d(te,"P",{"data-svelte-h":!0}),x(xy)!=="svelte-1y1aqwq"&&(xy.innerHTML=dG),_I=r(te),yy=d(te,"P",{"data-svelte-h":!0}),x(yy)!=="svelte-bt262r"&&(yy.textContent=iG),xI=r(te),jy=d(te,"UL",{"data-svelte-h":!0}),x(jy)!=="svelte-hx3bug"&&(jy.innerHTML=mG),yI=r(te),f(Jc.$$.fragment,te),jI=r(te),Ga=d(te,"DIV",{class:!0});var ij=w(Ga);f(lh.$$.fragment,ij),$I=r(ij),$y=d(ij,"P",{"data-svelte-h":!0}),x($y)!=="svelte-1x9lbim"&&($y.textContent=hG),vI=r(ij),vy=d(ij,"UL",{"data-svelte-h":!0}),x(vy)!=="svelte-1aojjd7"&&(vy.innerHTML=uG),ij.forEach(i),wI=r(te),Tc=d(te,"DIV",{class:!0});var q2=w(Tc);f(rh.$$.fragment,q2),MI=r(q2),wy=d(q2,"P",{"data-svelte-h":!0}),x(wy)!=="svelte-36ujp2"&&(wy.textContent=gG),q2.forEach(i),kI=r(te),Dc=d(te,"DIV",{class:!0});var B2=w(Dc);f(oh.$$.fragment,B2),JI=r(B2),My=d(B2,"P",{"data-svelte-h":!0}),x(My)!=="svelte-1f418ti"&&(My.textContent=fG),B2.forEach(i),TI=r(te),Cc=d(te,"DIV",{class:!0});var W2=w(Cc);f(ch.$$.fragment,W2),DI=r(W2),ky=d(W2,"P",{"data-svelte-h":!0}),x(ky)!=="svelte-fiz4kg"&&(ky.textContent=bG),W2.forEach(i),CI=r(te),Ic=d(te,"DIV",{class:!0});var H2=w(Ic);f(ph.$$.fragment,H2),II=r(H2),Jy=d(H2,"P",{"data-svelte-h":!0}),x(Jy)!=="svelte-1lmy675"&&(Jy.textContent=_G),H2.forEach(i),te.forEach(i),b2=r(n),f(dh.$$.fragment,n),_2=r(n),Y=d(n,"DIV",{class:!0});var pe=w(Y);f(ih.$$.fragment,pe),UI=r(pe),Ty=d(pe,"P",{"data-svelte-h":!0}),x(Ty)!=="svelte-1hmmful"&&(Ty.innerHTML=xG),ZI=r(pe),Dy=d(pe,"P",{"data-svelte-h":!0}),x(Dy)!=="svelte-1lb68gh"&&(Dy.textContent=yG),RI=r(pe),Cy=d(pe,"UL",{"data-svelte-h":!0}),x(Cy)!=="svelte-11n6qzs"&&(Cy.innerHTML=jG),FI=r(pe),f(Uc.$$.fragment,pe),GI=r(pe),Na=d(pe,"DIV",{class:!0});var mj=w(Na);f(mh.$$.fragment,mj),NI=r(mj),Iy=d(mj,"P",{"data-svelte-h":!0}),x(Iy)!=="svelte-1stivdm"&&(Iy.textContent=$G),zI=r(mj),Uy=d(mj,"UL",{"data-svelte-h":!0}),x(Uy)!=="svelte-181tw77"&&(Uy.innerHTML=vG),mj.forEach(i),XI=r(pe),Zc=d(pe,"DIV",{class:!0});var E2=w(Zc);f(hh.$$.fragment,E2),VI=r(E2),Zy=d(E2,"P",{"data-svelte-h":!0}),x(Zy)!=="svelte-1ew3bke"&&(Zy.textContent=wG),E2.forEach(i),qI=r(pe),Rc=d(pe,"DIV",{class:!0});var Q2=w(Rc);f(uh.$$.fragment,Q2),BI=r(Q2),Ry=d(Q2,"P",{"data-svelte-h":!0}),x(Ry)!=="svelte-fiz4kg"&&(Ry.textContent=MG),Q2.forEach(i),WI=r(pe),Fc=d(pe,"DIV",{class:!0});var Y2=w(Fc);f(gh.$$.fragment,Y2),HI=r(Y2),Fy=d(Y2,"P",{"data-svelte-h":!0}),x(Fy)!=="svelte-1lmy675"&&(Fy.textContent=kG),Y2.forEach(i),pe.forEach(i),x2=r(n),f(fh.$$.fragment,n),y2=r(n),L=d(n,"DIV",{class:!0});var de=w(L);f(bh.$$.fragment,de),EI=r(de),Gy=d(de,"P",{"data-svelte-h":!0}),x(Gy)!=="svelte-tv0nhw"&&(Gy.innerHTML=JG),QI=r(de),Ny=d(de,"P",{"data-svelte-h":!0}),x(Ny)!=="svelte-1qhr836"&&(Ny.textContent=TG),YI=r(de),zy=d(de,"UL",{"data-svelte-h":!0}),x(zy)!=="svelte-1ipl196"&&(zy.innerHTML=DG),LI=r(de),f(Gc.$$.fragment,de),SI=r(de),za=d(de,"DIV",{class:!0});var hj=w(za);f(_h.$$.fragment,hj),AI=r(hj),Xy=d(hj,"P",{"data-svelte-h":!0}),x(Xy)!=="svelte-6cyxpw"&&(Xy.textContent=CG),PI=r(hj),Vy=d(hj,"UL",{"data-svelte-h":!0}),x(Vy)!=="svelte-u1dq44"&&(Vy.innerHTML=IG),hj.forEach(i),KI=r(de),Nc=d(de,"DIV",{class:!0});var L2=w(Nc);f(xh.$$.fragment,L2),OI=r(L2),qy=d(L2,"P",{"data-svelte-h":!0}),x(qy)!=="svelte-1c2d2j2"&&(qy.textContent=UG),L2.forEach(i),eU=r(de),zc=d(de,"DIV",{class:!0});var S2=w(zc);f(yh.$$.fragment,S2),tU=r(S2),By=d(S2,"P",{"data-svelte-h":!0}),x(By)!=="svelte-fiz4kg"&&(By.textContent=ZG),S2.forEach(i),sU=r(de),Xc=d(de,"DIV",{class:!0});var A2=w(Xc);f(jh.$$.fragment,A2),aU=r(A2),Wy=d(A2,"P",{"data-svelte-h":!0}),x(Wy)!=="svelte-1lmy675"&&(Wy.textContent=RG),A2.forEach(i),de.forEach(i),j2=r(n),f($h.$$.fragment,n),$2=r(n),qa=d(n,"DIV",{class:!0});var P2=w(qa);f(vh.$$.fragment,P2),nU=r(P2),Hy=d(P2,"P",{"data-svelte-h":!0}),x(Hy)!=="svelte-1njqea8"&&(Hy.innerHTML=FG),P2.forEach(i),v2=r(n),f(wh.$$.fragment,n),w2=r(n),Ba=d(n,"DIV",{class:!0});var K2=w(Ba);f(Mh.$$.fragment,K2),lU=r(K2),Ey=d(K2,"P",{"data-svelte-h":!0}),x(Ey)!=="svelte-1cgdp3y"&&(Ey.textContent=GG),K2.forEach(i),M2=r(n),f(kh.$$.fragment,n),k2=r(n),uj=d(n,"P",{}),w(uj).forEach(i),this.h()},h(){M(t,"name","hf:doc:metadata"),M(t,"content",n6),M(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(rl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ol,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Jl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Rl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(zs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(af,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(nf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(lf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(rf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(of,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(cf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(pf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(df,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(mf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(hf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(uf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(gf,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ff,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(As,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Sb,"id","package_reference_features"),M(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(c_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(X_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(V_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(q_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(B_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(W_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(H_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(E_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Q_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Y_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(L_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(S_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(A_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(P_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ec,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(tc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(sc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(ac,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(nc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(lc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(gc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(bc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(vc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(wc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Mc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(kc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Tc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Dc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Cc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ic,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Zc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Rc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Fc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Nc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(zc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Xc,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),M(Ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(n,j){s(document.head,t),$(n,y,j),$(n,o,j),$(n,a,j),b(c,n,j),$(n,e,j),b(m,n,j),$(n,B,j),$(n,V,j),b(Ec,V,null),s(V,O2),s(V,Yh),s(V,e$),s(V,Lh),s(V,t$),s(V,Sh),s(V,s$),s(V,Ve),b(Qc,Ve,null),s(Ve,a$),s(Ve,Ah),s(Ve,n$),s(Ve,Ph),s(Ve,l$),s(Ve,Kh),s(Ve,r$),b(sl,Ve,null),s(V,o$),s(V,ms),b(Yc,ms,null),s(ms,c$),s(ms,Oh),s(ms,p$),b(al,ms,null),$(n,Uj,j),b(Lc,n,j),$(n,Zj,j),$(n,Sc,j),$(n,Rj,j),$(n,J,j),b(Ac,J,null),s(J,d$),s(J,eu),s(J,i$),s(J,ft),b(Pc,ft,null),s(ft,m$),s(ft,tu),s(ft,h$),b(Kc,ft,null),s(ft,u$),b(nl,ft,null),s(J,g$),s(J,bt),b(Oc,bt,null),s(bt,f$),s(bt,su),s(bt,b$),b(ep,bt,null),s(bt,_$),b(ll,bt,null),s(J,x$),s(J,rl),b(tp,rl,null),s(rl,y$),s(rl,au),s(J,j$),s(J,ol),b(sp,ol,null),s(ol,$$),s(ol,nu),s(J,v$),s(J,be),b(ap,be,null),s(be,w$),s(be,lu),s(be,M$),s(be,ru),s(be,k$),s(be,ou),s(be,J$),s(be,cu),s(be,T$),b(cl,be,null),s(J,D$),s(J,hs),b(np,hs,null),s(hs,C$),s(hs,pu),s(hs,I$),s(hs,du),s(J,U$),s(J,_t),b(lp,_t,null),s(_t,Z$),s(_t,iu),s(_t,R$),b(pl,_t,null),s(_t,F$),b(dl,_t,null),s(J,G$),s(J,us),b(rp,us,null),s(us,N$),s(us,mu),s(us,z$),b(il,us,null),s(J,X$),s(J,gs),b(op,gs,null),s(gs,V$),s(gs,hu),s(gs,q$),b(ml,gs,null),s(J,B$),s(J,fs),b(cp,fs,null),s(fs,W$),s(fs,uu),s(fs,H$),b(hl,fs,null),s(J,E$),s(J,bs),b(pp,bs,null),s(bs,Q$),s(bs,gu),s(bs,Y$),b(ul,bs,null),s(J,L$),s(J,_s),b(dp,_s,null),s(_s,S$),s(_s,fu),s(_s,A$),b(gl,_s,null),s(J,P$),s(J,xs),b(ip,xs,null),s(xs,K$),s(xs,bu),s(xs,O$),b(fl,xs,null),s(J,e0),s(J,xt),b(mp,xt,null),s(xt,t0),s(xt,_u),s(xt,s0),s(xt,xu),s(xt,a0),b(bl,xt,null),s(J,n0),s(J,ys),b(hp,ys,null),s(ys,l0),s(ys,yu),s(ys,r0),b(_l,ys,null),s(J,o0),s(J,js),b(up,js,null),s(js,c0),s(js,ju),s(js,p0),b(xl,js,null),s(J,d0),s(J,$s),b(gp,$s,null),s($s,i0),s($s,$u),s($s,m0),b(yl,$s,null),s(J,h0),s(J,yt),b(fp,yt,null),s(yt,u0),s(yt,vu),s(yt,g0),s(yt,wu),s(yt,f0),b(jl,yt,null),s(J,b0),s(J,vs),b(bp,vs,null),s(vs,_0),s(vs,Mu),s(vs,x0),b($l,vs,null),s(J,y0),s(J,ws),b(_p,ws,null),s(ws,j0),s(ws,ku),s(ws,$0),b(vl,ws,null),s(J,v0),s(J,Ms),b(xp,Ms,null),s(Ms,w0),s(Ms,Ju),s(Ms,M0),b(wl,Ms,null),s(J,k0),s(J,ks),b(yp,ks,null),s(ks,J0),s(ks,Tu),s(ks,T0),b(Ml,ks,null),s(J,D0),s(J,Js),b(jp,Js,null),s(Js,C0),s(Js,Du),s(Js,I0),b(kl,Js,null),s(J,U0),s(J,Ts),b($p,Ts,null),s(Ts,Z0),s(Ts,Cu),s(Ts,R0),s(Ts,Iu),s(J,F0),s(J,Ds),b(vp,Ds,null),s(Ds,G0),s(Ds,Uu),s(Ds,N0),s(Ds,Zu),s(J,z0),s(J,Jl),b(wp,Jl,null),s(Jl,X0),s(Jl,Ru),s(J,V0),s(J,qe),b(Mp,qe,null),s(qe,q0),s(qe,Fu),s(qe,B0),s(qe,Gu),s(qe,W0),b(Tl,qe,null),s(qe,H0),b(Dl,qe,null),s(J,E0),s(J,Cs),b(kp,Cs,null),s(Cs,Q0),s(Cs,Nu),s(Cs,Y0),b(Cl,Cs,null),s(J,L0),s(J,jt),b(Jp,jt,null),s(jt,S0),s(jt,zu),s(jt,A0),s(jt,Xu),s(jt,P0),b(Il,jt,null),s(J,K0),s(J,Be),b(Tp,Be,null),s(Be,O0),s(Be,Vu),s(Be,e1),s(Be,qu),s(Be,t1),s(Be,Bu),s(Be,s1),b(Ul,Be,null),s(J,a1),s(J,We),b(Dp,We,null),s(We,n1),s(We,Wu),s(We,l1),s(We,Hu),s(We,r1),s(We,Eu),s(We,o1),b(Zl,We,null),s(J,c1),s(J,Rl),b(Cp,Rl,null),s(Rl,p1),s(Rl,Qu),s(J,d1),s(J,$t),b(Ip,$t,null),s($t,i1),s($t,Yu),s($t,m1),s($t,Lu),s($t,h1),b(Fl,$t,null),s(J,u1),s(J,_e),b(Up,_e,null),s(_e,g1),s(_e,Su),s(_e,f1),s(_e,Au),s(_e,b1),s(_e,Pu),s(_e,_1),s(_e,Ku),s(_e,x1),b(Gl,_e,null),s(J,y1),s(J,vt),b(Zp,vt,null),s(vt,j1),s(vt,Ou),s(vt,$1),s(vt,eg),s(vt,v1),b(Nl,vt,null),s(J,w1),s(J,Is),b(Rp,Is,null),s(Is,M1),s(Is,tg),s(Is,k1),b(zl,Is,null),s(J,J1),s(J,Us),b(Fp,Us,null),s(Us,T1),s(Us,sg),s(Us,D1),b(Xl,Us,null),s(J,C1),s(J,O),b(Gp,O,null),s(O,I1),s(O,ag),s(O,U1),s(O,ng),s(O,Z1),s(O,lg),s(O,R1),b(Vl,O,null),s(O,F1),s(O,rg),s(O,G1),b(ql,O,null),s(O,N1),b(Bl,O,null),s(J,z1),s(J,Zs),b(Np,Zs,null),s(Zs,X1),s(Zs,og),s(Zs,V1),b(Wl,Zs,null),s(J,q1),s(J,Rs),b(zp,Rs,null),s(Rs,B1),s(Rs,cg),s(Rs,W1),b(Hl,Rs,null),s(J,H1),s(J,wt),b(Xp,wt,null),s(wt,E1),s(wt,pg),s(wt,Q1),s(wt,dg),s(wt,Y1),b(El,wt,null),s(J,L1),s(J,ne),b(Vp,ne,null),s(ne,S1),s(ne,ig),s(ne,A1),s(ne,mg),s(ne,P1),s(ne,hg),s(ne,K1),s(ne,ug),s(ne,O1),s(ne,gg),s(ne,ev),b(Ql,ne,null),s(J,tv),s(J,Mt),b(qp,Mt,null),s(Mt,sv),s(Mt,fg),s(Mt,av),s(Mt,bg),s(Mt,nv),b(Yl,Mt,null),s(J,lv),s(J,Fs),b(Bp,Fs,null),s(Fs,rv),s(Fs,_g),s(Fs,ov),b(Ll,Fs,null),s(J,cv),s(J,xe),b(Wp,xe,null),s(xe,pv),s(xe,xg),s(xe,dv),s(xe,yg),s(xe,iv),b(Sl,xe,null),s(xe,mv),b(Al,xe,null),s(xe,hv),b(Pl,xe,null),s(J,uv),s(J,He),b(Hp,He,null),s(He,gv),s(He,jg),s(He,fv),s(He,$g),s(He,bv),s(He,vg),s(He,_v),b(Kl,He,null),s(J,xv),s(J,Gs),b(Ep,Gs,null),s(Gs,yv),s(Gs,wg),s(Gs,jv),b(Ol,Gs,null),s(J,$v),s(J,er),b(Qp,er,null),s(er,vv),s(er,Mg),s(J,wv),s(J,Ns),b(Yp,Ns,null),s(Ns,Mv),s(Ns,kg),s(Ns,kv),b(tr,Ns,null),s(J,Jv),s(J,zs),b(Lp,zs,null),s(zs,Tv),s(zs,Jg),s(zs,Dv),b(sr,zs,null),s(J,Cv),s(J,Xs),b(Sp,Xs,null),s(Xs,Iv),s(Xs,Tg),s(Xs,Uv),b(ar,Xs,null),s(J,Zv),s(J,kt),b(Ap,kt,null),s(kt,Rv),s(kt,Dg),s(kt,Fv),s(kt,Cg),s(kt,Gv),b(nr,kt,null),s(J,Nv),s(J,Vs),b(Pp,Vs,null),s(Vs,zv),s(Vs,Ig),s(Vs,Xv),b(lr,Vs,null),s(J,Vv),s(J,qs),b(Kp,qs,null),s(qs,qv),s(qs,Ug),s(qs,Bv),b(rr,qs,null),s(J,Wv),s(J,N),b(Op,N,null),s(N,Hv),s(N,Zg),s(N,Ev),s(N,Rg),s(N,Qv),s(N,Fg),s(N,Yv),s(N,Gg),s(N,Lv),s(N,Ng),s(N,Sv),b(or,N,null),s(N,Av),b(cr,N,null),s(N,Pv),b(pr,N,null),s(N,Kv),b(dr,N,null),s(N,Ov),b(ir,N,null),s(N,ew),s(N,zg),s(N,tw),b(mr,N,null),s(N,sw),b(hr,N,null),s(N,aw),s(J,nw),s(J,Jt),b(ed,Jt,null),s(Jt,lw),s(Jt,Xg),s(Jt,rw),s(Jt,Vg),s(Jt,ow),b(ur,Jt,null),s(J,cw),s(J,Bs),b(td,Bs,null),s(Bs,pw),s(Bs,qg),s(Bs,dw),s(Bs,Bg),s(J,iw),s(J,gr),b(sd,gr,null),s(gr,mw),s(gr,Wg),s(J,hw),s(J,Ws),b(ad,Ws,null),s(Ws,uw),s(Ws,Hg),s(Ws,gw),s(Ws,Eg),s(J,fw),s(J,Hs),b(nd,Hs,null),s(Hs,bw),s(Hs,Qg),s(Hs,_w),b(fr,Hs,null),s(J,xw),s(J,br),b(ld,br,null),s(br,yw),s(br,Yg),s(J,jw),s(J,_r),b(rd,_r,null),s(_r,$w),s(_r,Lg),s(J,vw),s(J,xr),b(od,xr,null),s(xr,ww),s(xr,Sg),s(J,Mw),s(J,yr),b(cd,yr,null),s(yr,kw),s(yr,Ag),s(J,Jw),s(J,jr),b(pd,jr,null),s(jr,Tw),s(jr,Pg),s(J,Dw),s(J,$r),b(dd,$r,null),s($r,Cw),s($r,Kg),s(J,Iw),s(J,vr),b(id,vr,null),s(vr,Uw),s(vr,Og),s(J,Zw),s(J,wr),b(md,wr,null),s(wr,Rw),s(wr,ef),s(J,Fw),s(J,Mr),b(hd,Mr,null),s(Mr,Gw),s(Mr,tf),s(J,Nw),s(J,kr),b(ud,kr,null),s(kr,zw),s(kr,sf),s(J,Xw),s(J,af),b(gd,af,null),s(J,Vw),s(J,nf),b(fd,nf,null),s(J,qw),s(J,lf),b(bd,lf,null),s(J,Bw),s(J,rf),b(_d,rf,null),s(J,Ww),s(J,of),b(xd,of,null),s(J,Hw),s(J,cf),b(yd,cf,null),s(J,Ew),s(J,pf),b(jd,pf,null),s(J,Qw),s(J,df),b($d,df,null),s(J,Yw),s(J,mf),b(vd,mf,null),s(J,Lw),s(J,hf),b(wd,hf,null),s(J,Sw),s(J,uf),b(Md,uf,null),s(J,Aw),s(J,gf),b(kd,gf,null),s(J,Pw),s(J,ff),b(Jd,ff,null),s(J,Kw),s(J,Es),b(Td,Es,null),s(Es,Ow),s(Es,bf),s(Es,eM),b(Jr,Es,null),s(J,tM),s(J,Qs),b(Dd,Qs,null),s(Qs,sM),s(Qs,_f),s(Qs,aM),b(Tr,Qs,null),s(J,nM),s(J,Ys),b(Cd,Ys,null),s(Ys,lM),s(Ys,xf),s(Ys,rM),b(Dr,Ys,null),s(J,oM),s(J,Ls),b(Id,Ls,null),s(Ls,cM),s(Ls,yf),s(Ls,pM),b(Cr,Ls,null),s(J,dM),s(J,Tt),b(Ud,Tt,null),s(Tt,iM),s(Tt,jf),s(Tt,mM),b(Ir,Tt,null),s(Tt,hM),b(Ur,Tt,null),s(J,uM),s(J,Ss),b(Zd,Ss,null),s(Ss,gM),s(Ss,$f),s(Ss,fM),b(Zr,Ss,null),$(n,Fj,j),$(n,Vt,j),b(Rd,Vt,null),s(Vt,bM),s(Vt,vf),s(Vt,_M),b(Rr,Vt,null),$(n,Gj,j),$(n,E,j),b(Fd,E,null),s(E,xM),s(E,wf),s(E,yM),s(E,Mf),s(E,jM),s(E,kf),s(E,$M),s(E,Jf),s(E,vM),s(E,Tf),s(E,wM),s(E,Df),s(E,MM),s(E,Cf),s(E,kM),b(Fr,E,null),$(n,Nj,j),$(n,ie,j),b(Gd,ie,null),s(ie,JM),s(ie,If),s(ie,TM),s(ie,Uf),s(ie,DM),s(ie,Zf),s(ie,CM),s(ie,Rf),s(ie,IM),s(ie,Ff),$(n,zj,j),$(n,Je,j),b(Nd,Je,null),s(Je,UM),s(Je,Gf),s(Je,ZM),s(Je,Nf),s(Je,RM),s(Je,zf),s(Je,FM),s(Je,Xf),$(n,Xj,j),$(n,Te,j),b(zd,Te,null),s(Te,GM),s(Te,Vf),s(Te,NM),s(Te,qf),s(Te,zM),s(Te,Bf),s(Te,XM),s(Te,Wf),$(n,Vj,j),$(n,De,j),b(Xd,De,null),s(De,VM),s(De,Hf),s(De,qM),s(De,Ef),s(De,BM),s(De,Qf),s(De,WM),s(De,Yf),$(n,qj,j),b(Vd,n,j),$(n,Bj,j),$(n,qd,j),$(n,Wj,j),$(n,R,j),b(Bd,R,null),s(R,HM),s(R,Lf),s(R,EM),s(R,As),b(Wd,As,null),s(As,QM),s(As,Sf),s(As,YM),b(Gr,As,null),s(R,LM),s(R,Ps),b(Hd,Ps,null),s(Ps,SM),s(Ps,Af),s(Ps,AM),b(Nr,Ps,null),s(R,PM),s(R,Ks),b(Ed,Ks,null),s(Ks,KM),s(Ks,Pf),s(Ks,OM),b(zr,Ks,null),s(R,ek),s(R,Os),b(Qd,Os,null),s(Os,tk),s(Os,Kf),s(Os,sk),b(Xr,Os,null),s(R,ak),s(R,ea),b(Yd,ea,null),s(ea,nk),s(ea,Of),s(ea,lk),b(Vr,ea,null),s(R,rk),s(R,ta),b(Ld,ta,null),s(ta,ok),s(ta,eb),s(ta,ck),b(qr,ta,null),s(R,pk),s(R,Dt),b(Sd,Dt,null),s(Dt,dk),s(Dt,tb),s(Dt,ik),s(Dt,sb),s(Dt,mk),b(Br,Dt,null),s(R,hk),s(R,sa),b(Ad,sa,null),s(sa,uk),s(sa,ab),s(sa,gk),b(Wr,sa,null),s(R,fk),s(R,ye),b(Pd,ye,null),s(ye,bk),s(ye,nb),s(ye,_k),s(ye,lb),s(ye,xk),s(ye,rb),s(ye,yk),s(ye,ob),s(ye,jk),b(Hr,ye,null),s(R,$k),s(R,aa),b(Kd,aa,null),s(aa,vk),s(aa,cb),s(aa,wk),b(Er,aa,null),s(R,Mk),s(R,na),b(Od,na,null),s(na,kk),s(na,pb),s(na,Jk),b(Qr,na,null),s(R,Tk),s(R,Ee),b(ei,Ee,null),s(Ee,Dk),s(Ee,db),s(Ee,Ck),s(Ee,ib),s(Ee,Ik),s(Ee,mb),s(Ee,Uk),b(Yr,Ee,null),s(R,Zk),s(R,Qe),b(ti,Qe,null),s(Qe,Rk),s(Qe,hb),s(Qe,Fk),s(Qe,ub),s(Qe,Gk),s(Qe,gb),s(Qe,Nk),b(Lr,Qe,null),s(R,zk),s(R,Ct),b(si,Ct,null),s(Ct,Xk),s(Ct,fb),s(Ct,Vk),s(Ct,bb),s(Ct,qk),b(Sr,Ct,null),s(R,Bk),s(R,Ar),b(ai,Ar,null),s(Ar,Wk),s(Ar,_b),s(R,Hk),s(R,Ye),b(ni,Ye,null),s(Ye,Ek),s(Ye,xb),s(Ye,Qk),s(Ye,yb),s(Ye,Yk),s(Ye,jb),s(Ye,Lk),b(Pr,Ye,null),s(R,Sk),s(R,Le),b(li,Le,null),s(Le,Ak),s(Le,$b),s(Le,Pk),s(Le,vb),s(Le,Kk),s(Le,wb),s(Le,Ok),b(Kr,Le,null),s(R,eJ),s(R,la),b(ri,la,null),s(la,tJ),s(la,Mb),s(la,sJ),b(Or,la,null),s(R,aJ),s(R,ra),b(oi,ra,null),s(ra,nJ),s(ra,kb),s(ra,lJ),b(eo,ra,null),s(R,rJ),s(R,oa),b(ci,oa,null),s(oa,oJ),s(oa,Jb),s(oa,cJ),b(to,oa,null),s(R,pJ),s(R,Se),b(pi,Se,null),s(Se,dJ),s(Se,Tb),s(Se,iJ),s(Se,Db),s(Se,mJ),s(Se,Cb),s(Se,hJ),b(so,Se,null),s(R,uJ),s(R,Ae),b(di,Ae,null),s(Ae,gJ),s(Ae,Ib),s(Ae,fJ),s(Ae,Ub),s(Ae,bJ),s(Ae,Zb),s(Ae,_J),b(ao,Ae,null),s(R,xJ),s(R,ca),b(ii,ca,null),s(ca,yJ),s(ca,Rb),s(ca,jJ),b(no,ca,null),s(R,$J),s(R,It),b(mi,It,null),s(It,vJ),s(It,Fb),s(It,wJ),s(It,Gb),s(It,MJ),b(lo,It,null),s(R,kJ),s(R,pa),b(hi,pa,null),s(pa,JJ),s(pa,Nb),s(pa,TJ),b(ro,pa,null),s(R,DJ),s(R,je),b(ui,je,null),s(je,CJ),s(je,zb),s(je,IJ),s(je,Xb),s(je,UJ),s(je,Vb),s(je,ZJ),b(oo,je,null),s(je,RJ),b(co,je,null),s(R,FJ),s(R,Pe),b(gi,Pe,null),s(Pe,GJ),s(Pe,qb),s(Pe,NJ),s(Pe,Bb),s(Pe,zJ),s(Pe,Wb),s(Pe,XJ),b(po,Pe,null),s(R,VJ),s(R,da),b(fi,da,null),s(da,qJ),s(da,Hb),s(da,BJ),b(io,da,null),s(R,WJ),s(R,ia),b(bi,ia,null),s(ia,HJ),s(ia,Eb),s(ia,EJ),b(mo,ia,null),s(R,QJ),s(R,ma),b(_i,ma,null),s(ma,YJ),s(ma,Qb),s(ma,LJ),b(ho,ma,null),s(R,SJ),s(R,ha),b(xi,ha,null),s(ha,AJ),s(ha,Yb),s(ha,PJ),b(uo,ha,null),s(R,KJ),s(R,ua),b(yi,ua,null),s(ua,OJ),s(ua,Lb),s(ua,eT),b(go,ua,null),$(n,Hj,j),$(n,Sb,j),$(n,Ej,j),b(ji,n,j),$(n,Qj,j),$(n,$i,j),$(n,Yj,j),$(n,U,j),b(vi,U,null),s(U,tT),s(U,Ab),s(U,sT),s(U,Ut),b(wi,Ut,null),s(Ut,aT),s(Ut,Pb),s(Ut,nT),b(fo,Ut,null),s(Ut,lT),b(bo,Ut,null),s(U,rT),s(U,ga),b(Mi,ga,null),s(ga,oT),s(ga,Kb),s(ga,cT),b(_o,ga,null),s(U,pT),s(U,fa),b(ki,fa,null),s(fa,dT),s(fa,Ob),s(fa,iT),b(xo,fa,null),s(U,mT),s(U,ba),b(Ji,ba,null),s(ba,hT),s(ba,e_),s(ba,uT),b(yo,ba,null),s(U,gT),s(U,_a),b(Ti,_a,null),s(_a,fT),s(_a,t_),s(_a,bT),b(jo,_a,null),s(U,_T),s(U,S),b(Di,S,null),s(S,xT),s(S,s_),s(S,yT),s(S,a_),s(S,jT),s(S,n_),s(S,$T),s(S,l_),s(S,vT),s(S,r_),s(S,wT),s(S,o_),s(S,MT),b($o,S,null),s(S,kT),b(vo,S,null),s(U,JT),s(U,c_),b(Ci,c_,null),s(U,TT),s(U,wo),b(Ii,wo,null),s(wo,DT),s(wo,p_),s(U,CT),s(U,$e),b(Ui,$e,null),s($e,IT),s($e,d_),s($e,UT),s($e,i_),s($e,ZT),s($e,m_),s($e,RT),s($e,h_),s($e,FT),b(Mo,$e,null),s(U,GT),s(U,xa),b(Zi,xa,null),s(xa,NT),s(xa,u_),s(xa,zT),b(ko,xa,null),s(U,XT),s(U,Zt),b(Ri,Zt,null),s(Zt,VT),s(Zt,g_),s(Zt,qT),s(Zt,f_),s(Zt,BT),b(Jo,Zt,null),s(U,WT),s(U,ve),b(Fi,ve,null),s(ve,HT),s(ve,b_),s(ve,ET),s(ve,__),s(ve,QT),s(ve,x_),s(ve,YT),s(ve,y_),s(ve,LT),b(To,ve,null),s(U,ST),s(U,ya),b(Gi,ya,null),s(ya,AT),s(ya,j_),s(ya,PT),b(Do,ya,null),s(U,KT),s(U,ja),b(Ni,ja,null),s(ja,OT),s(ja,$_),s(ja,e7),b(Co,ja,null),s(U,t7),s(U,$a),b(zi,$a,null),s($a,s7),s($a,v_),s($a,a7),b(Io,$a,null),s(U,n7),s(U,le),b(Xi,le,null),s(le,l7),s(le,w_),s(le,r7),s(le,M_),s(le,o7),s(le,k_),s(le,c7),s(le,J_),s(le,p7),s(le,T_),s(le,d7),b(Uo,le,null),s(U,i7),s(U,Rt),b(Vi,Rt,null),s(Rt,m7),s(Rt,D_),s(Rt,h7),s(Rt,C_),s(Rt,u7),b(Zo,Rt,null),s(U,g7),s(U,re),b(qi,re,null),s(re,f7),s(re,I_),s(re,b7),s(re,U_),s(re,_7),s(re,Z_),s(re,x7),b(Ro,re,null),s(re,y7),b(Fo,re,null),s(re,j7),b(Go,re,null),s(U,$7),s(U,oe),b(Bi,oe,null),s(oe,v7),s(oe,R_),s(oe,w7),s(oe,F_),s(oe,M7),s(oe,G_),s(oe,k7),b(No,oe,null),s(oe,J7),b(zo,oe,null),s(oe,T7),b(Xo,oe,null),s(U,D7),s(U,Vo),b(Wi,Vo,null),s(Vo,C7),s(Vo,N_),s(U,I7),s(U,qo),b(Hi,qo,null),s(qo,U7),s(qo,z_),s(U,Z7),s(U,X_),b(Ei,X_,null),s(U,R7),s(U,V_),b(Qi,V_,null),s(U,F7),s(U,q_),b(Yi,q_,null),s(U,G7),s(U,B_),b(Li,B_,null),s(U,N7),s(U,W_),b(Si,W_,null),s(U,z7),s(U,H_),b(Ai,H_,null),s(U,X7),s(U,E_),b(Pi,E_,null),s(U,V7),s(U,Q_),b(Ki,Q_,null),s(U,q7),s(U,Y_),b(Oi,Y_,null),s(U,B7),s(U,L_),b(em,L_,null),s(U,W7),s(U,S_),b(tm,S_,null),s(U,H7),s(U,A_),b(sm,A_,null),s(U,E7),s(U,P_),b(am,P_,null),$(n,Lj,j),b(nm,n,j),$(n,Sj,j),$(n,lm,j),$(n,Aj,j),$(n,q,j),b(rm,q,null),s(q,Q7),s(q,we),b(om,we,null),s(we,Y7),s(we,K_),s(we,L7),s(we,O_),s(we,S7),s(we,ex),s(we,A7),s(we,tx),s(we,P7),b(Bo,we,null),s(q,K7),s(q,va),b(cm,va,null),s(va,O7),s(va,sx),s(va,eD),b(Wo,va,null),s(q,tD),s(q,Me),b(pm,Me,null),s(Me,sD),s(Me,ax),s(Me,aD),s(Me,nx),s(Me,nD),s(Me,lx),s(Me,lD),s(Me,rx),s(Me,rD),b(Ho,Me,null),s(q,oD),s(q,wa),b(dm,wa,null),s(wa,cD),s(wa,ox),s(wa,pD),b(Eo,wa,null),s(q,dD),s(q,Ma),b(im,Ma,null),s(Ma,iD),s(Ma,cx),s(Ma,mD),b(Qo,Ma,null),s(q,hD),s(q,ka),b(mm,ka,null),s(ka,uD),s(ka,px),s(ka,gD),b(Yo,ka,null),s(q,fD),s(q,Ja),b(hm,Ja,null),s(Ja,bD),s(Ja,dx),s(Ja,_D),b(Lo,Ja,null),s(q,xD),s(q,Ta),b(um,Ta,null),s(Ta,yD),s(Ta,ix),s(Ta,jD),b(So,Ta,null),s(q,$D),s(q,Da),b(gm,Da,null),s(Da,vD),s(Da,mx),s(Da,wD),b(Ao,Da,null),s(q,MD),s(q,Ca),b(fm,Ca,null),s(Ca,kD),s(Ca,hx),s(Ca,JD),b(Po,Ca,null),$(n,Pj,j),b(bm,n,j),$(n,Kj,j),$(n,G,j),b(_m,G,null),s(G,TD),s(G,ux),s(G,DD),s(G,gx),s(G,CD),s(G,fx),s(G,ID),s(G,se),s(se,bx),s(se,UD),s(se,_x),s(se,ZD),s(se,xx),s(se,RD),s(se,xm),s(xm,yx),s(xm,FD),b(Ko,xm,null),s(se,GD),s(se,jx),s(se,ND),s(se,$x),s(se,zD),s(se,vx),s(se,XD),s(se,wx),s(G,VD),s(G,Ia),b(ym,Ia,null),s(Ia,qD),s(Ia,Mx),s(Ia,BD),b(Oo,Ia,null),s(G,WD),s(G,ec),b(jm,ec,null),s(ec,HD),s(ec,kx),s(G,ED),s(G,tc),b($m,tc,null),s(tc,QD),s(tc,Jx),s(G,YD),s(G,sc),b(vm,sc,null),s(sc,LD),s(sc,Tx),s(G,SD),s(G,ac),b(wm,ac,null),s(ac,AD),s(ac,Dx),s(G,PD),s(G,nc),b(Mm,nc,null),s(nc,KD),s(nc,Cx),s(G,OD),s(G,lc),b(km,lc,null),s(lc,eC),s(lc,Ix),s(G,tC),s(G,Ft),b(Jm,Ft,null),s(Ft,sC),s(Ft,Ux),s(Ft,aC),s(Ft,Zx),s(Ft,nC),b(rc,Ft,null),s(G,lC),s(G,Ua),b(Tm,Ua,null),s(Ua,rC),s(Ua,Rx),s(Ua,oC),s(Ua,Fx),s(G,cC),s(G,Ke),b(Dm,Ke,null),s(Ke,pC),s(Ke,Gx),s(Ke,dC),s(Ke,Nx),s(Ke,iC),s(Ke,zx),s(Ke,mC),b(oc,Ke,null),s(G,hC),s(G,Gt),b(Cm,Gt,null),s(Gt,uC),s(Gt,Xx),s(Gt,gC),s(Gt,Vx),s(Gt,fC),b(cc,Gt,null),$(n,Oj,j),b(Im,n,j),$(n,e2,j),$(n,Ce,j),b(Um,Ce,null),s(Ce,bC),s(Ce,qx),s(Ce,_C),s(Ce,Bx),s(Ce,xC),s(Ce,Wx),s(Ce,yC),b(pc,Ce,null),$(n,t2,j),$(n,Q,j),b(Zm,Q,null),s(Q,jC),s(Q,Hx),s(Q,$C),s(Q,Ex),s(Q,vC),s(Q,Qx),s(Q,wC),s(Q,Yx),s(Q,MC),b(dc,Q,null),s(Q,kC),s(Q,Za),b(Rm,Za,null),s(Za,JC),s(Za,Lx),s(Za,TC),s(Za,Sx),s(Q,DC),s(Q,Nt),b(Fm,Nt,null),s(Nt,CC),s(Nt,Ax),s(Nt,IC),s(Nt,Px),s(Nt,UC),b(ic,Nt,null),s(Q,ZC),s(Q,Ra),b(Gm,Ra,null),s(Ra,RC),s(Ra,Kx),s(Ra,FC),b(mc,Ra,null),$(n,s2,j),b(Nm,n,j),$(n,a2,j),$(n,qt,j),b(zm,qt,null),s(qt,GC),s(qt,Ox),s(qt,NC),s(qt,ey),$(n,n2,j),$(n,Bt,j),b(Xm,Bt,null),s(Bt,zC),s(Bt,ty),s(Bt,XC),b(hc,Bt,null),$(n,l2,j),b(Vm,n,j),$(n,r2,j),$(n,Oe,j),b(qm,Oe,null),s(Oe,VC),s(Oe,sy),s(Oe,qC),b(uc,Oe,null),s(Oe,BC),s(Oe,gc),b(Bm,gc,null),s(gc,WC),s(gc,ay),$(n,o2,j),$(n,et,j),b(Wm,et,null),s(et,HC),s(et,ny),s(et,EC),b(fc,et,null),s(et,QC),s(et,bc),b(Hm,bc,null),s(bc,YC),s(bc,ly),$(n,c2,j),b(Em,n,j),$(n,p2,j),$(n,Wt,j),b(Qm,Wt,null),s(Wt,LC),s(Wt,ry),s(Wt,SC),b(_c,Wt,null),$(n,d2,j),$(n,Ht,j),b(Ym,Ht,null),s(Ht,AC),s(Ht,oy),s(Ht,PC),b(xc,Ht,null),$(n,i2,j),$(n,Et,j),b(Lm,Et,null),s(Et,KC),s(Et,cy),s(Et,OC),b(yc,Et,null),$(n,m2,j),$(n,Qt,j),b(Sm,Qt,null),s(Qt,eI),s(Qt,py),s(Qt,tI),b(jc,Qt,null),$(n,h2,j),b(Am,n,j),$(n,u2,j),$(n,W,j),b(Pm,W,null),s(W,sI),s(W,dy),s(W,aI),s(W,iy),s(W,nI),s(W,my),s(W,lI),b($c,W,null),s(W,rI),s(W,Fa),b(Km,Fa,null),s(Fa,oI),s(Fa,hy),s(Fa,cI),s(Fa,uy),s(W,pI),s(W,vc),b(Om,vc,null),s(vc,dI),s(vc,gy),s(W,iI),s(W,wc),b(eh,wc,null),s(wc,mI),s(wc,fy),s(W,hI),s(W,Mc),b(th,Mc,null),s(Mc,uI),s(Mc,by),s(W,gI),s(W,kc),b(sh,kc,null),s(kc,fI),s(kc,_y),$(n,g2,j),b(ah,n,j),$(n,f2,j),$(n,H,j),b(nh,H,null),s(H,bI),s(H,xy),s(H,_I),s(H,yy),s(H,xI),s(H,jy),s(H,yI),b(Jc,H,null),s(H,jI),s(H,Ga),b(lh,Ga,null),s(Ga,$I),s(Ga,$y),s(Ga,vI),s(Ga,vy),s(H,wI),s(H,Tc),b(rh,Tc,null),s(Tc,MI),s(Tc,wy),s(H,kI),s(H,Dc),b(oh,Dc,null),s(Dc,JI),s(Dc,My),s(H,TI),s(H,Cc),b(ch,Cc,null),s(Cc,DI),s(Cc,ky),s(H,CI),s(H,Ic),b(ph,Ic,null),s(Ic,II),s(Ic,Jy),$(n,b2,j),b(dh,n,j),$(n,_2,j),$(n,Y,j),b(ih,Y,null),s(Y,UI),s(Y,Ty),s(Y,ZI),s(Y,Dy),s(Y,RI),s(Y,Cy),s(Y,FI),b(Uc,Y,null),s(Y,GI),s(Y,Na),b(mh,Na,null),s(Na,NI),s(Na,Iy),s(Na,zI),s(Na,Uy),s(Y,XI),s(Y,Zc),b(hh,Zc,null),s(Zc,VI),s(Zc,Zy),s(Y,qI),s(Y,Rc),b(uh,Rc,null),s(Rc,BI),s(Rc,Ry),s(Y,WI),s(Y,Fc),b(gh,Fc,null),s(Fc,HI),s(Fc,Fy),$(n,x2,j),b(fh,n,j),$(n,y2,j),$(n,L,j),b(bh,L,null),s(L,EI),s(L,Gy),s(L,QI),s(L,Ny),s(L,YI),s(L,zy),s(L,LI),b(Gc,L,null),s(L,SI),s(L,za),b(_h,za,null),s(za,AI),s(za,Xy),s(za,PI),s(za,Vy),s(L,KI),s(L,Nc),b(xh,Nc,null),s(Nc,OI),s(Nc,qy),s(L,eU),s(L,zc),b(yh,zc,null),s(zc,tU),s(zc,By),s(L,sU),s(L,Xc),b(jh,Xc,null),s(Xc,aU),s(Xc,Wy),$(n,j2,j),b($h,n,j),$(n,$2,j),$(n,qa,j),b(vh,qa,null),s(qa,nU),s(qa,Hy),$(n,v2,j),b(wh,n,j),$(n,w2,j),$(n,Ba,j),b(Mh,Ba,null),s(Ba,lU),s(Ba,Ey),$(n,M2,j),b(kh,n,j),$(n,k2,j),$(n,uj,j),J2=!0},p(n,[j]){const Ie={};j&2&&(Ie.$$scope={dirty:j,ctx:n}),sl.$set(Ie);const tt={};j&2&&(tt.$$scope={dirty:j,ctx:n}),al.$set(tt);const Wa={};j&2&&(Wa.$$scope={dirty:j,ctx:n}),nl.$set(Wa);const T={};j&2&&(T.$$scope={dirty:j,ctx:n}),ll.$set(T);const Yt={};j&2&&(Yt.$$scope={dirty:j,ctx:n}),cl.$set(Yt);const Lt={};j&2&&(Lt.$$scope={dirty:j,ctx:n}),pl.$set(Lt);const Jh={};j&2&&(Jh.$$scope={dirty:j,ctx:n}),dl.$set(Jh);const Th={};j&2&&(Th.$$scope={dirty:j,ctx:n}),il.$set(Th);const Ue={};j&2&&(Ue.$$scope={dirty:j,ctx:n}),ml.$set(Ue);const Ha={};j&2&&(Ha.$$scope={dirty:j,ctx:n}),hl.$set(Ha);const St={};j&2&&(St.$$scope={dirty:j,ctx:n}),ul.$set(St);const Ea={};j&2&&(Ea.$$scope={dirty:j,ctx:n}),gl.$set(Ea);const Qa={};j&2&&(Qa.$$scope={dirty:j,ctx:n}),fl.$set(Qa);const Ya={};j&2&&(Ya.$$scope={dirty:j,ctx:n}),bl.$set(Ya);const La={};j&2&&(La.$$scope={dirty:j,ctx:n}),_l.$set(La);const Sa={};j&2&&(Sa.$$scope={dirty:j,ctx:n}),xl.$set(Sa);const Aa={};j&2&&(Aa.$$scope={dirty:j,ctx:n}),yl.$set(Aa);const At={};j&2&&(At.$$scope={dirty:j,ctx:n}),jl.$set(At);const Pa={};j&2&&(Pa.$$scope={dirty:j,ctx:n}),$l.$set(Pa);const Ka={};j&2&&(Ka.$$scope={dirty:j,ctx:n}),vl.$set(Ka);const Oa={};j&2&&(Oa.$$scope={dirty:j,ctx:n}),wl.$set(Oa);const Pt={};j&2&&(Pt.$$scope={dirty:j,ctx:n}),Ml.$set(Pt);const en={};j&2&&(en.$$scope={dirty:j,ctx:n}),kl.$set(en);const tn={};j&2&&(tn.$$scope={dirty:j,ctx:n}),Tl.$set(tn);const sn={};j&2&&(sn.$$scope={dirty:j,ctx:n}),Dl.$set(sn);const an={};j&2&&(an.$$scope={dirty:j,ctx:n}),Cl.$set(an);const nn={};j&2&&(nn.$$scope={dirty:j,ctx:n}),Il.$set(nn);const ln={};j&2&&(ln.$$scope={dirty:j,ctx:n}),Ul.$set(ln);const rn={};j&2&&(rn.$$scope={dirty:j,ctx:n}),Zl.$set(rn);const Dh={};j&2&&(Dh.$$scope={dirty:j,ctx:n}),Fl.$set(Dh);const st={};j&2&&(st.$$scope={dirty:j,ctx:n}),Gl.$set(st);const on={};j&2&&(on.$$scope={dirty:j,ctx:n}),Nl.$set(on);const Kt={};j&2&&(Kt.$$scope={dirty:j,ctx:n}),zl.$set(Kt);const at={};j&2&&(at.$$scope={dirty:j,ctx:n}),Xl.$set(at);const nt={};j&2&&(nt.$$scope={dirty:j,ctx:n}),Vl.$set(nt);const Ch={};j&2&&(Ch.$$scope={dirty:j,ctx:n}),ql.$set(Ch);const Ot={};j&2&&(Ot.$$scope={dirty:j,ctx:n}),Bl.$set(Ot);const Ze={};j&2&&(Ze.$$scope={dirty:j,ctx:n}),Wl.$set(Ze);const es={};j&2&&(es.$$scope={dirty:j,ctx:n}),Hl.$set(es);const cn={};j&2&&(cn.$$scope={dirty:j,ctx:n}),El.$set(cn);const pn={};j&2&&(pn.$$scope={dirty:j,ctx:n}),Ql.$set(pn);const ae={};j&2&&(ae.$$scope={dirty:j,ctx:n}),Yl.$set(ae);const dn={};j&2&&(dn.$$scope={dirty:j,ctx:n}),Ll.$set(dn);const mn={};j&2&&(mn.$$scope={dirty:j,ctx:n}),Sl.$set(mn);const ts={};j&2&&(ts.$$scope={dirty:j,ctx:n}),Al.$set(ts);const me={};j&2&&(me.$$scope={dirty:j,ctx:n}),Pl.$set(me);const ss={};j&2&&(ss.$$scope={dirty:j,ctx:n}),Kl.$set(ss);const hn={};j&2&&(hn.$$scope={dirty:j,ctx:n}),Ol.$set(hn);const Re={};j&2&&(Re.$$scope={dirty:j,ctx:n}),tr.$set(Re);const lt={};j&2&&(lt.$$scope={dirty:j,ctx:n}),sr.$set(lt);const un={};j&2&&(un.$$scope={dirty:j,ctx:n}),ar.$set(un);const Ih={};j&2&&(Ih.$$scope={dirty:j,ctx:n}),nr.$set(Ih);const gn={};j&2&&(gn.$$scope={dirty:j,ctx:n}),lr.$set(gn);const fn={};j&2&&(fn.$$scope={dirty:j,ctx:n}),rr.$set(fn);const bn={};j&2&&(bn.$$scope={dirty:j,ctx:n}),or.$set(bn);const as={};j&2&&(as.$$scope={dirty:j,ctx:n}),cr.$set(as);const _n={};j&2&&(_n.$$scope={dirty:j,ctx:n}),pr.$set(_n);const xn={};j&2&&(xn.$$scope={dirty:j,ctx:n}),dr.$set(xn);const z={};j&2&&(z.$$scope={dirty:j,ctx:n}),ir.$set(z);const ns={};j&2&&(ns.$$scope={dirty:j,ctx:n}),mr.$set(ns);const yn={};j&2&&(yn.$$scope={dirty:j,ctx:n}),hr.$set(yn);const Uh={};j&2&&(Uh.$$scope={dirty:j,ctx:n}),ur.$set(Uh);const jn={};j&2&&(jn.$$scope={dirty:j,ctx:n}),fr.$set(jn);const $n={};j&2&&($n.$$scope={dirty:j,ctx:n}),Jr.$set($n);const Zh={};j&2&&(Zh.$$scope={dirty:j,ctx:n}),Tr.$set(Zh);const Rh={};j&2&&(Rh.$$scope={dirty:j,ctx:n}),Dr.$set(Rh);const Fh={};j&2&&(Fh.$$scope={dirty:j,ctx:n}),Cr.$set(Fh);const Gh={};j&2&&(Gh.$$scope={dirty:j,ctx:n}),Ir.$set(Gh);const Nh={};j&2&&(Nh.$$scope={dirty:j,ctx:n}),Ur.$set(Nh);const zh={};j&2&&(zh.$$scope={dirty:j,ctx:n}),Zr.$set(zh);const Xh={};j&2&&(Xh.$$scope={dirty:j,ctx:n}),Rr.$set(Xh);const Vh={};j&2&&(Vh.$$scope={dirty:j,ctx:n}),Fr.$set(Vh);const qh={};j&2&&(qh.$$scope={dirty:j,ctx:n}),Gr.$set(qh);const Bh={};j&2&&(Bh.$$scope={dirty:j,ctx:n}),Nr.$set(Bh);const gj={};j&2&&(gj.$$scope={dirty:j,ctx:n}),zr.$set(gj);const fj={};j&2&&(fj.$$scope={dirty:j,ctx:n}),Xr.$set(fj);const bj={};j&2&&(bj.$$scope={dirty:j,ctx:n}),Vr.$set(bj);const _j={};j&2&&(_j.$$scope={dirty:j,ctx:n}),qr.$set(_j);const xj={};j&2&&(xj.$$scope={dirty:j,ctx:n}),Br.$set(xj);const yj={};j&2&&(yj.$$scope={dirty:j,ctx:n}),Wr.$set(yj);const jj={};j&2&&(jj.$$scope={dirty:j,ctx:n}),Hr.$set(jj);const $j={};j&2&&($j.$$scope={dirty:j,ctx:n}),Er.$set($j);const vj={};j&2&&(vj.$$scope={dirty:j,ctx:n}),Qr.$set(vj);const wj={};j&2&&(wj.$$scope={dirty:j,ctx:n}),Yr.$set(wj);const Mj={};j&2&&(Mj.$$scope={dirty:j,ctx:n}),Lr.$set(Mj);const kj={};j&2&&(kj.$$scope={dirty:j,ctx:n}),Sr.$set(kj);const Jj={};j&2&&(Jj.$$scope={dirty:j,ctx:n}),Pr.$set(Jj);const vn={};j&2&&(vn.$$scope={dirty:j,ctx:n}),Kr.$set(vn);const wn={};j&2&&(wn.$$scope={dirty:j,ctx:n}),Or.$set(wn);const Mn={};j&2&&(Mn.$$scope={dirty:j,ctx:n}),eo.$set(Mn);const kn={};j&2&&(kn.$$scope={dirty:j,ctx:n}),to.$set(kn);const ls={};j&2&&(ls.$$scope={dirty:j,ctx:n}),so.$set(ls);const Jn={};j&2&&(Jn.$$scope={dirty:j,ctx:n}),ao.$set(Jn);const Tn={};j&2&&(Tn.$$scope={dirty:j,ctx:n}),no.$set(Tn);const P={};j&2&&(P.$$scope={dirty:j,ctx:n}),lo.$set(P);const Fe={};j&2&&(Fe.$$scope={dirty:j,ctx:n}),ro.$set(Fe);const rt={};j&2&&(rt.$$scope={dirty:j,ctx:n}),oo.$set(rt);const ot={};j&2&&(ot.$$scope={dirty:j,ctx:n}),co.$set(ot);const ct={};j&2&&(ct.$$scope={dirty:j,ctx:n}),po.$set(ct);const F={};j&2&&(F.$$scope={dirty:j,ctx:n}),io.$set(F);const Dn={};j&2&&(Dn.$$scope={dirty:j,ctx:n}),mo.$set(Dn);const Cn={};j&2&&(Cn.$$scope={dirty:j,ctx:n}),ho.$set(Cn);const In={};j&2&&(In.$$scope={dirty:j,ctx:n}),uo.$set(In);const Un={};j&2&&(Un.$$scope={dirty:j,ctx:n}),go.$set(Un);const Zn={};j&2&&(Zn.$$scope={dirty:j,ctx:n}),fo.$set(Zn);const Rn={};j&2&&(Rn.$$scope={dirty:j,ctx:n}),bo.$set(Rn);const rs={};j&2&&(rs.$$scope={dirty:j,ctx:n}),_o.$set(rs);const Fn={};j&2&&(Fn.$$scope={dirty:j,ctx:n}),xo.$set(Fn);const Ge={};j&2&&(Ge.$$scope={dirty:j,ctx:n}),yo.$set(Ge);const Gn={};j&2&&(Gn.$$scope={dirty:j,ctx:n}),jo.$set(Gn);const Nn={};j&2&&(Nn.$$scope={dirty:j,ctx:n}),$o.$set(Nn);const pt={};j&2&&(pt.$$scope={dirty:j,ctx:n}),vo.$set(pt);const dt={};j&2&&(dt.$$scope={dirty:j,ctx:n}),Mo.$set(dt);const os={};j&2&&(os.$$scope={dirty:j,ctx:n}),ko.$set(os);const Wh={};j&2&&(Wh.$$scope={dirty:j,ctx:n}),Jo.$set(Wh);const it={};j&2&&(it.$$scope={dirty:j,ctx:n}),To.$set(it);const mt={};j&2&&(mt.$$scope={dirty:j,ctx:n}),Do.$set(mt);const zn={};j&2&&(zn.$$scope={dirty:j,ctx:n}),Co.$set(zn);const Xn={};j&2&&(Xn.$$scope={dirty:j,ctx:n}),Io.$set(Xn);const Vn={};j&2&&(Vn.$$scope={dirty:j,ctx:n}),Uo.$set(Vn);const ht={};j&2&&(ht.$$scope={dirty:j,ctx:n}),Zo.$set(ht);const ut={};j&2&&(ut.$$scope={dirty:j,ctx:n}),Ro.$set(ut);const qn={};j&2&&(qn.$$scope={dirty:j,ctx:n}),Fo.$set(qn);const cs={};j&2&&(cs.$$scope={dirty:j,ctx:n}),Go.$set(cs);const Bn={};j&2&&(Bn.$$scope={dirty:j,ctx:n}),No.$set(Bn);const Ne={};j&2&&(Ne.$$scope={dirty:j,ctx:n}),zo.$set(Ne);const gt={};j&2&&(gt.$$scope={dirty:j,ctx:n}),Xo.$set(gt);const Wn={};j&2&&(Wn.$$scope={dirty:j,ctx:n}),Bo.$set(Wn);const Hn={};j&2&&(Hn.$$scope={dirty:j,ctx:n}),Wo.$set(Hn);const En={};j&2&&(En.$$scope={dirty:j,ctx:n}),Ho.$set(En);const Qn={};j&2&&(Qn.$$scope={dirty:j,ctx:n}),Eo.$set(Qn);const Yn={};j&2&&(Yn.$$scope={dirty:j,ctx:n}),Qo.$set(Yn);const Z={};j&2&&(Z.$$scope={dirty:j,ctx:n}),Yo.$set(Z);const ps={};j&2&&(ps.$$scope={dirty:j,ctx:n}),Lo.$set(ps);const Ln={};j&2&&(Ln.$$scope={dirty:j,ctx:n}),So.$set(Ln);const Sn={};j&2&&(Sn.$$scope={dirty:j,ctx:n}),Ao.$set(Sn);const An={};j&2&&(An.$$scope={dirty:j,ctx:n}),Po.$set(An);const Pn={};j&2&&(Pn.$$scope={dirty:j,ctx:n}),Ko.$set(Pn);const K={};j&2&&(K.$$scope={dirty:j,ctx:n}),Oo.$set(K);const Tj={};j&2&&(Tj.$$scope={dirty:j,ctx:n}),rc.$set(Tj);const Hh={};j&2&&(Hh.$$scope={dirty:j,ctx:n}),oc.$set(Hh);const ze={};j&2&&(ze.$$scope={dirty:j,ctx:n}),cc.$set(ze);const Kn={};j&2&&(Kn.$$scope={dirty:j,ctx:n}),pc.$set(Kn);const ds={};j&2&&(ds.$$scope={dirty:j,ctx:n}),dc.$set(ds);const Xe={};j&2&&(Xe.$$scope={dirty:j,ctx:n}),ic.$set(Xe);const On={};j&2&&(On.$$scope={dirty:j,ctx:n}),mc.$set(On);const el={};j&2&&(el.$$scope={dirty:j,ctx:n}),hc.$set(el);const tl={};j&2&&(tl.$$scope={dirty:j,ctx:n}),uc.$set(tl);const he={};j&2&&(he.$$scope={dirty:j,ctx:n}),fc.$set(he);const is={};j&2&&(is.$$scope={dirty:j,ctx:n}),_c.$set(is);const ue={};j&2&&(ue.$$scope={dirty:j,ctx:n}),xc.$set(ue);const ge={};j&2&&(ge.$$scope={dirty:j,ctx:n}),yc.$set(ge);const Eh={};j&2&&(Eh.$$scope={dirty:j,ctx:n}),jc.$set(Eh);const Qh={};j&2&&(Qh.$$scope={dirty:j,ctx:n}),$c.$set(Qh);const Dj={};j&2&&(Dj.$$scope={dirty:j,ctx:n}),Jc.$set(Dj);const Cj={};j&2&&(Cj.$$scope={dirty:j,ctx:n}),Uc.$set(Cj);const Ij={};j&2&&(Ij.$$scope={dirty:j,ctx:n}),Gc.$set(Ij)},i(n){J2||(h(c.$$.fragment,n),h(m.$$.fragment,n),h(Ec.$$.fragment,n),h(Qc.$$.fragment,n),h(sl.$$.fragment,n),h(Yc.$$.fragment,n),h(al.$$.fragment,n),h(Lc.$$.fragment,n),h(Ac.$$.fragment,n),h(Pc.$$.fragment,n),h(Kc.$$.fragment,n),h(nl.$$.fragment,n),h(Oc.$$.fragment,n),h(ep.$$.fragment,n),h(ll.$$.fragment,n),h(tp.$$.fragment,n),h(sp.$$.fragment,n),h(ap.$$.fragment,n),h(cl.$$.fragment,n),h(np.$$.fragment,n),h(lp.$$.fragment,n),h(pl.$$.fragment,n),h(dl.$$.fragment,n),h(rp.$$.fragment,n),h(il.$$.fragment,n),h(op.$$.fragment,n),h(ml.$$.fragment,n),h(cp.$$.fragment,n),h(hl.$$.fragment,n),h(pp.$$.fragment,n),h(ul.$$.fragment,n),h(dp.$$.fragment,n),h(gl.$$.fragment,n),h(ip.$$.fragment,n),h(fl.$$.fragment,n),h(mp.$$.fragment,n),h(bl.$$.fragment,n),h(hp.$$.fragment,n),h(_l.$$.fragment,n),h(up.$$.fragment,n),h(xl.$$.fragment,n),h(gp.$$.fragment,n),h(yl.$$.fragment,n),h(fp.$$.fragment,n),h(jl.$$.fragment,n),h(bp.$$.fragment,n),h($l.$$.fragment,n),h(_p.$$.fragment,n),h(vl.$$.fragment,n),h(xp.$$.fragment,n),h(wl.$$.fragment,n),h(yp.$$.fragment,n),h(Ml.$$.fragment,n),h(jp.$$.fragment,n),h(kl.$$.fragment,n),h($p.$$.fragment,n),h(vp.$$.fragment,n),h(wp.$$.fragment,n),h(Mp.$$.fragment,n),h(Tl.$$.fragment,n),h(Dl.$$.fragment,n),h(kp.$$.fragment,n),h(Cl.$$.fragment,n),h(Jp.$$.fragment,n),h(Il.$$.fragment,n),h(Tp.$$.fragment,n),h(Ul.$$.fragment,n),h(Dp.$$.fragment,n),h(Zl.$$.fragment,n),h(Cp.$$.fragment,n),h(Ip.$$.fragment,n),h(Fl.$$.fragment,n),h(Up.$$.fragment,n),h(Gl.$$.fragment,n),h(Zp.$$.fragment,n),h(Nl.$$.fragment,n),h(Rp.$$.fragment,n),h(zl.$$.fragment,n),h(Fp.$$.fragment,n),h(Xl.$$.fragment,n),h(Gp.$$.fragment,n),h(Vl.$$.fragment,n),h(ql.$$.fragment,n),h(Bl.$$.fragment,n),h(Np.$$.fragment,n),h(Wl.$$.fragment,n),h(zp.$$.fragment,n),h(Hl.$$.fragment,n),h(Xp.$$.fragment,n),h(El.$$.fragment,n),h(Vp.$$.fragment,n),h(Ql.$$.fragment,n),h(qp.$$.fragment,n),h(Yl.$$.fragment,n),h(Bp.$$.fragment,n),h(Ll.$$.fragment,n),h(Wp.$$.fragment,n),h(Sl.$$.fragment,n),h(Al.$$.fragment,n),h(Pl.$$.fragment,n),h(Hp.$$.fragment,n),h(Kl.$$.fragment,n),h(Ep.$$.fragment,n),h(Ol.$$.fragment,n),h(Qp.$$.fragment,n),h(Yp.$$.fragment,n),h(tr.$$.fragment,n),h(Lp.$$.fragment,n),h(sr.$$.fragment,n),h(Sp.$$.fragment,n),h(ar.$$.fragment,n),h(Ap.$$.fragment,n),h(nr.$$.fragment,n),h(Pp.$$.fragment,n),h(lr.$$.fragment,n),h(Kp.$$.fragment,n),h(rr.$$.fragment,n),h(Op.$$.fragment,n),h(or.$$.fragment,n),h(cr.$$.fragment,n),h(pr.$$.fragment,n),h(dr.$$.fragment,n),h(ir.$$.fragment,n),h(mr.$$.fragment,n),h(hr.$$.fragment,n),h(ed.$$.fragment,n),h(ur.$$.fragment,n),h(td.$$.fragment,n),h(sd.$$.fragment,n),h(ad.$$.fragment,n),h(nd.$$.fragment,n),h(fr.$$.fragment,n),h(ld.$$.fragment,n),h(rd.$$.fragment,n),h(od.$$.fragment,n),h(cd.$$.fragment,n),h(pd.$$.fragment,n),h(dd.$$.fragment,n),h(id.$$.fragment,n),h(md.$$.fragment,n),h(hd.$$.fragment,n),h(ud.$$.fragment,n),h(gd.$$.fragment,n),h(fd.$$.fragment,n),h(bd.$$.fragment,n),h(_d.$$.fragment,n),h(xd.$$.fragment,n),h(yd.$$.fragment,n),h(jd.$$.fragment,n),h($d.$$.fragment,n),h(vd.$$.fragment,n),h(wd.$$.fragment,n),h(Md.$$.fragment,n),h(kd.$$.fragment,n),h(Jd.$$.fragment,n),h(Td.$$.fragment,n),h(Jr.$$.fragment,n),h(Dd.$$.fragment,n),h(Tr.$$.fragment,n),h(Cd.$$.fragment,n),h(Dr.$$.fragment,n),h(Id.$$.fragment,n),h(Cr.$$.fragment,n),h(Ud.$$.fragment,n),h(Ir.$$.fragment,n),h(Ur.$$.fragment,n),h(Zd.$$.fragment,n),h(Zr.$$.fragment,n),h(Rd.$$.fragment,n),h(Rr.$$.fragment,n),h(Fd.$$.fragment,n),h(Fr.$$.fragment,n),h(Gd.$$.fragment,n),h(Nd.$$.fragment,n),h(zd.$$.fragment,n),h(Xd.$$.fragment,n),h(Vd.$$.fragment,n),h(Bd.$$.fragment,n),h(Wd.$$.fragment,n),h(Gr.$$.fragment,n),h(Hd.$$.fragment,n),h(Nr.$$.fragment,n),h(Ed.$$.fragment,n),h(zr.$$.fragment,n),h(Qd.$$.fragment,n),h(Xr.$$.fragment,n),h(Yd.$$.fragment,n),h(Vr.$$.fragment,n),h(Ld.$$.fragment,n),h(qr.$$.fragment,n),h(Sd.$$.fragment,n),h(Br.$$.fragment,n),h(Ad.$$.fragment,n),h(Wr.$$.fragment,n),h(Pd.$$.fragment,n),h(Hr.$$.fragment,n),h(Kd.$$.fragment,n),h(Er.$$.fragment,n),h(Od.$$.fragment,n),h(Qr.$$.fragment,n),h(ei.$$.fragment,n),h(Yr.$$.fragment,n),h(ti.$$.fragment,n),h(Lr.$$.fragment,n),h(si.$$.fragment,n),h(Sr.$$.fragment,n),h(ai.$$.fragment,n),h(ni.$$.fragment,n),h(Pr.$$.fragment,n),h(li.$$.fragment,n),h(Kr.$$.fragment,n),h(ri.$$.fragment,n),h(Or.$$.fragment,n),h(oi.$$.fragment,n),h(eo.$$.fragment,n),h(ci.$$.fragment,n),h(to.$$.fragment,n),h(pi.$$.fragment,n),h(so.$$.fragment,n),h(di.$$.fragment,n),h(ao.$$.fragment,n),h(ii.$$.fragment,n),h(no.$$.fragment,n),h(mi.$$.fragment,n),h(lo.$$.fragment,n),h(hi.$$.fragment,n),h(ro.$$.fragment,n),h(ui.$$.fragment,n),h(oo.$$.fragment,n),h(co.$$.fragment,n),h(gi.$$.fragment,n),h(po.$$.fragment,n),h(fi.$$.fragment,n),h(io.$$.fragment,n),h(bi.$$.fragment,n),h(mo.$$.fragment,n),h(_i.$$.fragment,n),h(ho.$$.fragment,n),h(xi.$$.fragment,n),h(uo.$$.fragment,n),h(yi.$$.fragment,n),h(go.$$.fragment,n),h(ji.$$.fragment,n),h(vi.$$.fragment,n),h(wi.$$.fragment,n),h(fo.$$.fragment,n),h(bo.$$.fragment,n),h(Mi.$$.fragment,n),h(_o.$$.fragment,n),h(ki.$$.fragment,n),h(xo.$$.fragment,n),h(Ji.$$.fragment,n),h(yo.$$.fragment,n),h(Ti.$$.fragment,n),h(jo.$$.fragment,n),h(Di.$$.fragment,n),h($o.$$.fragment,n),h(vo.$$.fragment,n),h(Ci.$$.fragment,n),h(Ii.$$.fragment,n),h(Ui.$$.fragment,n),h(Mo.$$.fragment,n),h(Zi.$$.fragment,n),h(ko.$$.fragment,n),h(Ri.$$.fragment,n),h(Jo.$$.fragment,n),h(Fi.$$.fragment,n),h(To.$$.fragment,n),h(Gi.$$.fragment,n),h(Do.$$.fragment,n),h(Ni.$$.fragment,n),h(Co.$$.fragment,n),h(zi.$$.fragment,n),h(Io.$$.fragment,n),h(Xi.$$.fragment,n),h(Uo.$$.fragment,n),h(Vi.$$.fragment,n),h(Zo.$$.fragment,n),h(qi.$$.fragment,n),h(Ro.$$.fragment,n),h(Fo.$$.fragment,n),h(Go.$$.fragment,n),h(Bi.$$.fragment,n),h(No.$$.fragment,n),h(zo.$$.fragment,n),h(Xo.$$.fragment,n),h(Wi.$$.fragment,n),h(Hi.$$.fragment,n),h(Ei.$$.fragment,n),h(Qi.$$.fragment,n),h(Yi.$$.fragment,n),h(Li.$$.fragment,n),h(Si.$$.fragment,n),h(Ai.$$.fragment,n),h(Pi.$$.fragment,n),h(Ki.$$.fragment,n),h(Oi.$$.fragment,n),h(em.$$.fragment,n),h(tm.$$.fragment,n),h(sm.$$.fragment,n),h(am.$$.fragment,n),h(nm.$$.fragment,n),h(rm.$$.fragment,n),h(om.$$.fragment,n),h(Bo.$$.fragment,n),h(cm.$$.fragment,n),h(Wo.$$.fragment,n),h(pm.$$.fragment,n),h(Ho.$$.fragment,n),h(dm.$$.fragment,n),h(Eo.$$.fragment,n),h(im.$$.fragment,n),h(Qo.$$.fragment,n),h(mm.$$.fragment,n),h(Yo.$$.fragment,n),h(hm.$$.fragment,n),h(Lo.$$.fragment,n),h(um.$$.fragment,n),h(So.$$.fragment,n),h(gm.$$.fragment,n),h(Ao.$$.fragment,n),h(fm.$$.fragment,n),h(Po.$$.fragment,n),h(bm.$$.fragment,n),h(_m.$$.fragment,n),h(Ko.$$.fragment,n),h(ym.$$.fragment,n),h(Oo.$$.fragment,n),h(jm.$$.fragment,n),h($m.$$.fragment,n),h(vm.$$.fragment,n),h(wm.$$.fragment,n),h(Mm.$$.fragment,n),h(km.$$.fragment,n),h(Jm.$$.fragment,n),h(rc.$$.fragment,n),h(Tm.$$.fragment,n),h(Dm.$$.fragment,n),h(oc.$$.fragment,n),h(Cm.$$.fragment,n),h(cc.$$.fragment,n),h(Im.$$.fragment,n),h(Um.$$.fragment,n),h(pc.$$.fragment,n),h(Zm.$$.fragment,n),h(dc.$$.fragment,n),h(Rm.$$.fragment,n),h(Fm.$$.fragment,n),h(ic.$$.fragment,n),h(Gm.$$.fragment,n),h(mc.$$.fragment,n),h(Nm.$$.fragment,n),h(zm.$$.fragment,n),h(Xm.$$.fragment,n),h(hc.$$.fragment,n),h(Vm.$$.fragment,n),h(qm.$$.fragment,n),h(uc.$$.fragment,n),h(Bm.$$.fragment,n),h(Wm.$$.fragment,n),h(fc.$$.fragment,n),h(Hm.$$.fragment,n),h(Em.$$.fragment,n),h(Qm.$$.fragment,n),h(_c.$$.fragment,n),h(Ym.$$.fragment,n),h(xc.$$.fragment,n),h(Lm.$$.fragment,n),h(yc.$$.fragment,n),h(Sm.$$.fragment,n),h(jc.$$.fragment,n),h(Am.$$.fragment,n),h(Pm.$$.fragment,n),h($c.$$.fragment,n),h(Km.$$.fragment,n),h(Om.$$.fragment,n),h(eh.$$.fragment,n),h(th.$$.fragment,n),h(sh.$$.fragment,n),h(ah.$$.fragment,n),h(nh.$$.fragment,n),h(Jc.$$.fragment,n),h(lh.$$.fragment,n),h(rh.$$.fragment,n),h(oh.$$.fragment,n),h(ch.$$.fragment,n),h(ph.$$.fragment,n),h(dh.$$.fragment,n),h(ih.$$.fragment,n),h(Uc.$$.fragment,n),h(mh.$$.fragment,n),h(hh.$$.fragment,n),h(uh.$$.fragment,n),h(gh.$$.fragment,n),h(fh.$$.fragment,n),h(bh.$$.fragment,n),h(Gc.$$.fragment,n),h(_h.$$.fragment,n),h(xh.$$.fragment,n),h(yh.$$.fragment,n),h(jh.$$.fragment,n),h($h.$$.fragment,n),h(vh.$$.fragment,n),h(wh.$$.fragment,n),h(Mh.$$.fragment,n),h(kh.$$.fragment,n),J2=!0)},o(n){u(c.$$.fragment,n),u(m.$$.fragment,n),u(Ec.$$.fragment,n),u(Qc.$$.fragment,n),u(sl.$$.fragment,n),u(Yc.$$.fragment,n),u(al.$$.fragment,n),u(Lc.$$.fragment,n),u(Ac.$$.fragment,n),u(Pc.$$.fragment,n),u(Kc.$$.fragment,n),u(nl.$$.fragment,n),u(Oc.$$.fragment,n),u(ep.$$.fragment,n),u(ll.$$.fragment,n),u(tp.$$.fragment,n),u(sp.$$.fragment,n),u(ap.$$.fragment,n),u(cl.$$.fragment,n),u(np.$$.fragment,n),u(lp.$$.fragment,n),u(pl.$$.fragment,n),u(dl.$$.fragment,n),u(rp.$$.fragment,n),u(il.$$.fragment,n),u(op.$$.fragment,n),u(ml.$$.fragment,n),u(cp.$$.fragment,n),u(hl.$$.fragment,n),u(pp.$$.fragment,n),u(ul.$$.fragment,n),u(dp.$$.fragment,n),u(gl.$$.fragment,n),u(ip.$$.fragment,n),u(fl.$$.fragment,n),u(mp.$$.fragment,n),u(bl.$$.fragment,n),u(hp.$$.fragment,n),u(_l.$$.fragment,n),u(up.$$.fragment,n),u(xl.$$.fragment,n),u(gp.$$.fragment,n),u(yl.$$.fragment,n),u(fp.$$.fragment,n),u(jl.$$.fragment,n),u(bp.$$.fragment,n),u($l.$$.fragment,n),u(_p.$$.fragment,n),u(vl.$$.fragment,n),u(xp.$$.fragment,n),u(wl.$$.fragment,n),u(yp.$$.fragment,n),u(Ml.$$.fragment,n),u(jp.$$.fragment,n),u(kl.$$.fragment,n),u($p.$$.fragment,n),u(vp.$$.fragment,n),u(wp.$$.fragment,n),u(Mp.$$.fragment,n),u(Tl.$$.fragment,n),u(Dl.$$.fragment,n),u(kp.$$.fragment,n),u(Cl.$$.fragment,n),u(Jp.$$.fragment,n),u(Il.$$.fragment,n),u(Tp.$$.fragment,n),u(Ul.$$.fragment,n),u(Dp.$$.fragment,n),u(Zl.$$.fragment,n),u(Cp.$$.fragment,n),u(Ip.$$.fragment,n),u(Fl.$$.fragment,n),u(Up.$$.fragment,n),u(Gl.$$.fragment,n),u(Zp.$$.fragment,n),u(Nl.$$.fragment,n),u(Rp.$$.fragment,n),u(zl.$$.fragment,n),u(Fp.$$.fragment,n),u(Xl.$$.fragment,n),u(Gp.$$.fragment,n),u(Vl.$$.fragment,n),u(ql.$$.fragment,n),u(Bl.$$.fragment,n),u(Np.$$.fragment,n),u(Wl.$$.fragment,n),u(zp.$$.fragment,n),u(Hl.$$.fragment,n),u(Xp.$$.fragment,n),u(El.$$.fragment,n),u(Vp.$$.fragment,n),u(Ql.$$.fragment,n),u(qp.$$.fragment,n),u(Yl.$$.fragment,n),u(Bp.$$.fragment,n),u(Ll.$$.fragment,n),u(Wp.$$.fragment,n),u(Sl.$$.fragment,n),u(Al.$$.fragment,n),u(Pl.$$.fragment,n),u(Hp.$$.fragment,n),u(Kl.$$.fragment,n),u(Ep.$$.fragment,n),u(Ol.$$.fragment,n),u(Qp.$$.fragment,n),u(Yp.$$.fragment,n),u(tr.$$.fragment,n),u(Lp.$$.fragment,n),u(sr.$$.fragment,n),u(Sp.$$.fragment,n),u(ar.$$.fragment,n),u(Ap.$$.fragment,n),u(nr.$$.fragment,n),u(Pp.$$.fragment,n),u(lr.$$.fragment,n),u(Kp.$$.fragment,n),u(rr.$$.fragment,n),u(Op.$$.fragment,n),u(or.$$.fragment,n),u(cr.$$.fragment,n),u(pr.$$.fragment,n),u(dr.$$.fragment,n),u(ir.$$.fragment,n),u(mr.$$.fragment,n),u(hr.$$.fragment,n),u(ed.$$.fragment,n),u(ur.$$.fragment,n),u(td.$$.fragment,n),u(sd.$$.fragment,n),u(ad.$$.fragment,n),u(nd.$$.fragment,n),u(fr.$$.fragment,n),u(ld.$$.fragment,n),u(rd.$$.fragment,n),u(od.$$.fragment,n),u(cd.$$.fragment,n),u(pd.$$.fragment,n),u(dd.$$.fragment,n),u(id.$$.fragment,n),u(md.$$.fragment,n),u(hd.$$.fragment,n),u(ud.$$.fragment,n),u(gd.$$.fragment,n),u(fd.$$.fragment,n),u(bd.$$.fragment,n),u(_d.$$.fragment,n),u(xd.$$.fragment,n),u(yd.$$.fragment,n),u(jd.$$.fragment,n),u($d.$$.fragment,n),u(vd.$$.fragment,n),u(wd.$$.fragment,n),u(Md.$$.fragment,n),u(kd.$$.fragment,n),u(Jd.$$.fragment,n),u(Td.$$.fragment,n),u(Jr.$$.fragment,n),u(Dd.$$.fragment,n),u(Tr.$$.fragment,n),u(Cd.$$.fragment,n),u(Dr.$$.fragment,n),u(Id.$$.fragment,n),u(Cr.$$.fragment,n),u(Ud.$$.fragment,n),u(Ir.$$.fragment,n),u(Ur.$$.fragment,n),u(Zd.$$.fragment,n),u(Zr.$$.fragment,n),u(Rd.$$.fragment,n),u(Rr.$$.fragment,n),u(Fd.$$.fragment,n),u(Fr.$$.fragment,n),u(Gd.$$.fragment,n),u(Nd.$$.fragment,n),u(zd.$$.fragment,n),u(Xd.$$.fragment,n),u(Vd.$$.fragment,n),u(Bd.$$.fragment,n),u(Wd.$$.fragment,n),u(Gr.$$.fragment,n),u(Hd.$$.fragment,n),u(Nr.$$.fragment,n),u(Ed.$$.fragment,n),u(zr.$$.fragment,n),u(Qd.$$.fragment,n),u(Xr.$$.fragment,n),u(Yd.$$.fragment,n),u(Vr.$$.fragment,n),u(Ld.$$.fragment,n),u(qr.$$.fragment,n),u(Sd.$$.fragment,n),u(Br.$$.fragment,n),u(Ad.$$.fragment,n),u(Wr.$$.fragment,n),u(Pd.$$.fragment,n),u(Hr.$$.fragment,n),u(Kd.$$.fragment,n),u(Er.$$.fragment,n),u(Od.$$.fragment,n),u(Qr.$$.fragment,n),u(ei.$$.fragment,n),u(Yr.$$.fragment,n),u(ti.$$.fragment,n),u(Lr.$$.fragment,n),u(si.$$.fragment,n),u(Sr.$$.fragment,n),u(ai.$$.fragment,n),u(ni.$$.fragment,n),u(Pr.$$.fragment,n),u(li.$$.fragment,n),u(Kr.$$.fragment,n),u(ri.$$.fragment,n),u(Or.$$.fragment,n),u(oi.$$.fragment,n),u(eo.$$.fragment,n),u(ci.$$.fragment,n),u(to.$$.fragment,n),u(pi.$$.fragment,n),u(so.$$.fragment,n),u(di.$$.fragment,n),u(ao.$$.fragment,n),u(ii.$$.fragment,n),u(no.$$.fragment,n),u(mi.$$.fragment,n),u(lo.$$.fragment,n),u(hi.$$.fragment,n),u(ro.$$.fragment,n),u(ui.$$.fragment,n),u(oo.$$.fragment,n),u(co.$$.fragment,n),u(gi.$$.fragment,n),u(po.$$.fragment,n),u(fi.$$.fragment,n),u(io.$$.fragment,n),u(bi.$$.fragment,n),u(mo.$$.fragment,n),u(_i.$$.fragment,n),u(ho.$$.fragment,n),u(xi.$$.fragment,n),u(uo.$$.fragment,n),u(yi.$$.fragment,n),u(go.$$.fragment,n),u(ji.$$.fragment,n),u(vi.$$.fragment,n),u(wi.$$.fragment,n),u(fo.$$.fragment,n),u(bo.$$.fragment,n),u(Mi.$$.fragment,n),u(_o.$$.fragment,n),u(ki.$$.fragment,n),u(xo.$$.fragment,n),u(Ji.$$.fragment,n),u(yo.$$.fragment,n),u(Ti.$$.fragment,n),u(jo.$$.fragment,n),u(Di.$$.fragment,n),u($o.$$.fragment,n),u(vo.$$.fragment,n),u(Ci.$$.fragment,n),u(Ii.$$.fragment,n),u(Ui.$$.fragment,n),u(Mo.$$.fragment,n),u(Zi.$$.fragment,n),u(ko.$$.fragment,n),u(Ri.$$.fragment,n),u(Jo.$$.fragment,n),u(Fi.$$.fragment,n),u(To.$$.fragment,n),u(Gi.$$.fragment,n),u(Do.$$.fragment,n),u(Ni.$$.fragment,n),u(Co.$$.fragment,n),u(zi.$$.fragment,n),u(Io.$$.fragment,n),u(Xi.$$.fragment,n),u(Uo.$$.fragment,n),u(Vi.$$.fragment,n),u(Zo.$$.fragment,n),u(qi.$$.fragment,n),u(Ro.$$.fragment,n),u(Fo.$$.fragment,n),u(Go.$$.fragment,n),u(Bi.$$.fragment,n),u(No.$$.fragment,n),u(zo.$$.fragment,n),u(Xo.$$.fragment,n),u(Wi.$$.fragment,n),u(Hi.$$.fragment,n),u(Ei.$$.fragment,n),u(Qi.$$.fragment,n),u(Yi.$$.fragment,n),u(Li.$$.fragment,n),u(Si.$$.fragment,n),u(Ai.$$.fragment,n),u(Pi.$$.fragment,n),u(Ki.$$.fragment,n),u(Oi.$$.fragment,n),u(em.$$.fragment,n),u(tm.$$.fragment,n),u(sm.$$.fragment,n),u(am.$$.fragment,n),u(nm.$$.fragment,n),u(rm.$$.fragment,n),u(om.$$.fragment,n),u(Bo.$$.fragment,n),u(cm.$$.fragment,n),u(Wo.$$.fragment,n),u(pm.$$.fragment,n),u(Ho.$$.fragment,n),u(dm.$$.fragment,n),u(Eo.$$.fragment,n),u(im.$$.fragment,n),u(Qo.$$.fragment,n),u(mm.$$.fragment,n),u(Yo.$$.fragment,n),u(hm.$$.fragment,n),u(Lo.$$.fragment,n),u(um.$$.fragment,n),u(So.$$.fragment,n),u(gm.$$.fragment,n),u(Ao.$$.fragment,n),u(fm.$$.fragment,n),u(Po.$$.fragment,n),u(bm.$$.fragment,n),u(_m.$$.fragment,n),u(Ko.$$.fragment,n),u(ym.$$.fragment,n),u(Oo.$$.fragment,n),u(jm.$$.fragment,n),u($m.$$.fragment,n),u(vm.$$.fragment,n),u(wm.$$.fragment,n),u(Mm.$$.fragment,n),u(km.$$.fragment,n),u(Jm.$$.fragment,n),u(rc.$$.fragment,n),u(Tm.$$.fragment,n),u(Dm.$$.fragment,n),u(oc.$$.fragment,n),u(Cm.$$.fragment,n),u(cc.$$.fragment,n),u(Im.$$.fragment,n),u(Um.$$.fragment,n),u(pc.$$.fragment,n),u(Zm.$$.fragment,n),u(dc.$$.fragment,n),u(Rm.$$.fragment,n),u(Fm.$$.fragment,n),u(ic.$$.fragment,n),u(Gm.$$.fragment,n),u(mc.$$.fragment,n),u(Nm.$$.fragment,n),u(zm.$$.fragment,n),u(Xm.$$.fragment,n),u(hc.$$.fragment,n),u(Vm.$$.fragment,n),u(qm.$$.fragment,n),u(uc.$$.fragment,n),u(Bm.$$.fragment,n),u(Wm.$$.fragment,n),u(fc.$$.fragment,n),u(Hm.$$.fragment,n),u(Em.$$.fragment,n),u(Qm.$$.fragment,n),u(_c.$$.fragment,n),u(Ym.$$.fragment,n),u(xc.$$.fragment,n),u(Lm.$$.fragment,n),u(yc.$$.fragment,n),u(Sm.$$.fragment,n),u(jc.$$.fragment,n),u(Am.$$.fragment,n),u(Pm.$$.fragment,n),u($c.$$.fragment,n),u(Km.$$.fragment,n),u(Om.$$.fragment,n),u(eh.$$.fragment,n),u(th.$$.fragment,n),u(sh.$$.fragment,n),u(ah.$$.fragment,n),u(nh.$$.fragment,n),u(Jc.$$.fragment,n),u(lh.$$.fragment,n),u(rh.$$.fragment,n),u(oh.$$.fragment,n),u(ch.$$.fragment,n),u(ph.$$.fragment,n),u(dh.$$.fragment,n),u(ih.$$.fragment,n),u(Uc.$$.fragment,n),u(mh.$$.fragment,n),u(hh.$$.fragment,n),u(uh.$$.fragment,n),u(gh.$$.fragment,n),u(fh.$$.fragment,n),u(bh.$$.fragment,n),u(Gc.$$.fragment,n),u(_h.$$.fragment,n),u(xh.$$.fragment,n),u(yh.$$.fragment,n),u(jh.$$.fragment,n),u($h.$$.fragment,n),u(vh.$$.fragment,n),u(wh.$$.fragment,n),u(Mh.$$.fragment,n),u(kh.$$.fragment,n),J2=!1},d(n){n&&(i(y),i(o),i(a),i(e),i(B),i(V),i(Uj),i(Zj),i(Sc),i(Rj),i(J),i(Fj),i(Vt),i(Gj),i(E),i(Nj),i(ie),i(zj),i(Je),i(Xj),i(Te),i(Vj),i(De),i(qj),i(Bj),i(qd),i(Wj),i(R),i(Hj),i(Sb),i(Ej),i(Qj),i($i),i(Yj),i(U),i(Lj),i(Sj),i(lm),i(Aj),i(q),i(Pj),i(Kj),i(G),i(Oj),i(e2),i(Ce),i(t2),i(Q),i(s2),i(a2),i(qt),i(n2),i(Bt),i(l2),i(r2),i(Oe),i(o2),i(et),i(c2),i(p2),i(Wt),i(d2),i(Ht),i(i2),i(Et),i(m2),i(Qt),i(h2),i(u2),i(W),i(g2),i(f2),i(H),i(b2),i(_2),i(Y),i(x2),i(y2),i(L),i(j2),i($2),i(qa),i(v2),i(w2),i(Ba),i(M2),i(k2),i(uj)),i(t),_(c,n),_(m,n),_(Ec),_(Qc),_(sl),_(Yc),_(al),_(Lc,n),_(Ac),_(Pc),_(Kc),_(nl),_(Oc),_(ep),_(ll),_(tp),_(sp),_(ap),_(cl),_(np),_(lp),_(pl),_(dl),_(rp),_(il),_(op),_(ml),_(cp),_(hl),_(pp),_(ul),_(dp),_(gl),_(ip),_(fl),_(mp),_(bl),_(hp),_(_l),_(up),_(xl),_(gp),_(yl),_(fp),_(jl),_(bp),_($l),_(_p),_(vl),_(xp),_(wl),_(yp),_(Ml),_(jp),_(kl),_($p),_(vp),_(wp),_(Mp),_(Tl),_(Dl),_(kp),_(Cl),_(Jp),_(Il),_(Tp),_(Ul),_(Dp),_(Zl),_(Cp),_(Ip),_(Fl),_(Up),_(Gl),_(Zp),_(Nl),_(Rp),_(zl),_(Fp),_(Xl),_(Gp),_(Vl),_(ql),_(Bl),_(Np),_(Wl),_(zp),_(Hl),_(Xp),_(El),_(Vp),_(Ql),_(qp),_(Yl),_(Bp),_(Ll),_(Wp),_(Sl),_(Al),_(Pl),_(Hp),_(Kl),_(Ep),_(Ol),_(Qp),_(Yp),_(tr),_(Lp),_(sr),_(Sp),_(ar),_(Ap),_(nr),_(Pp),_(lr),_(Kp),_(rr),_(Op),_(or),_(cr),_(pr),_(dr),_(ir),_(mr),_(hr),_(ed),_(ur),_(td),_(sd),_(ad),_(nd),_(fr),_(ld),_(rd),_(od),_(cd),_(pd),_(dd),_(id),_(md),_(hd),_(ud),_(gd),_(fd),_(bd),_(_d),_(xd),_(yd),_(jd),_($d),_(vd),_(wd),_(Md),_(kd),_(Jd),_(Td),_(Jr),_(Dd),_(Tr),_(Cd),_(Dr),_(Id),_(Cr),_(Ud),_(Ir),_(Ur),_(Zd),_(Zr),_(Rd),_(Rr),_(Fd),_(Fr),_(Gd),_(Nd),_(zd),_(Xd),_(Vd,n),_(Bd),_(Wd),_(Gr),_(Hd),_(Nr),_(Ed),_(zr),_(Qd),_(Xr),_(Yd),_(Vr),_(Ld),_(qr),_(Sd),_(Br),_(Ad),_(Wr),_(Pd),_(Hr),_(Kd),_(Er),_(Od),_(Qr),_(ei),_(Yr),_(ti),_(Lr),_(si),_(Sr),_(ai),_(ni),_(Pr),_(li),_(Kr),_(ri),_(Or),_(oi),_(eo),_(ci),_(to),_(pi),_(so),_(di),_(ao),_(ii),_(no),_(mi),_(lo),_(hi),_(ro),_(ui),_(oo),_(co),_(gi),_(po),_(fi),_(io),_(bi),_(mo),_(_i),_(ho),_(xi),_(uo),_(yi),_(go),_(ji,n),_(vi),_(wi),_(fo),_(bo),_(Mi),_(_o),_(ki),_(xo),_(Ji),_(yo),_(Ti),_(jo),_(Di),_($o),_(vo),_(Ci),_(Ii),_(Ui),_(Mo),_(Zi),_(ko),_(Ri),_(Jo),_(Fi),_(To),_(Gi),_(Do),_(Ni),_(Co),_(zi),_(Io),_(Xi),_(Uo),_(Vi),_(Zo),_(qi),_(Ro),_(Fo),_(Go),_(Bi),_(No),_(zo),_(Xo),_(Wi),_(Hi),_(Ei),_(Qi),_(Yi),_(Li),_(Si),_(Ai),_(Pi),_(Ki),_(Oi),_(em),_(tm),_(sm),_(am),_(nm,n),_(rm),_(om),_(Bo),_(cm),_(Wo),_(pm),_(Ho),_(dm),_(Eo),_(im),_(Qo),_(mm),_(Yo),_(hm),_(Lo),_(um),_(So),_(gm),_(Ao),_(fm),_(Po),_(bm,n),_(_m),_(Ko),_(ym),_(Oo),_(jm),_($m),_(vm),_(wm),_(Mm),_(km),_(Jm),_(rc),_(Tm),_(Dm),_(oc),_(Cm),_(cc),_(Im,n),_(Um),_(pc),_(Zm),_(dc),_(Rm),_(Fm),_(ic),_(Gm),_(mc),_(Nm,n),_(zm),_(Xm),_(hc),_(Vm,n),_(qm),_(uc),_(Bm),_(Wm),_(fc),_(Hm),_(Em,n),_(Qm),_(_c),_(Ym),_(xc),_(Lm),_(yc),_(Sm),_(jc),_(Am,n),_(Pm),_($c),_(Km),_(Om),_(eh),_(th),_(sh),_(ah,n),_(nh),_(Jc),_(lh),_(rh),_(oh),_(ch),_(ph),_(dh,n),_(ih),_(Uc),_(mh),_(hh),_(uh),_(gh),_(fh,n),_(bh),_(Gc),_(_h),_(xh),_(yh),_(jh),_($h,n),_(vh),_(wh,n),_(Mh),_(kh,n)}}}const n6='{"title":"Main classes","local":"main-classes","sections":[{"title":"DatasetInfo","local":"datasets.DatasetInfo","sections":[],"depth":2},{"title":"Dataset","local":"datasets.Dataset","sections":[],"depth":2},{"title":"DatasetDict","local":"datasets.DatasetDict","sections":[],"depth":2},{"title":"IterableDataset","local":"datasets.IterableDataset","sections":[],"depth":2},{"title":"IterableDatasetDict","local":"datasets.IterableDatasetDict","sections":[],"depth":2},{"title":"Features","local":"datasets.Features","sections":[{"title":"Scalar","local":"datasets.Value","sections":[],"depth":3},{"title":"Composite","local":"datasets.LargeList","sections":[],"depth":3},{"title":"Translation","local":"datasets.Translation","sections":[],"depth":3},{"title":"Arrays","local":"datasets.Array2D","sections":[],"depth":3},{"title":"Audio","local":"datasets.Audio","sections":[],"depth":3},{"title":"Image","local":"datasets.Image","sections":[],"depth":3},{"title":"Video","local":"datasets.Video","sections":[],"depth":3},{"title":"Pdf","local":"datasets.Pdf","sections":[],"depth":3}],"depth":2},{"title":"Filesystems","local":"datasets.filesystems.is_remote_filesystem","sections":[],"depth":2},{"title":"Fingerprint","local":"datasets.fingerprint.Hasher","sections":[],"depth":2}],"depth":1}';function l6(v){return t5(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class h6 extends SG{constructor(t){super(),AG(this,t,l6,a6,LG,{})}}export{h6 as component};
