import{s as Lt,o as Bt,n as ut}from"../chunks/scheduler.bdbef820.js";import{S as Qt,i as Et,g as d,s as l,r,A as St,h as o,f as s,c as n,j as zt,u as m,x as g,k as Nt,y as Pt,a,v as c,d as h,t as f,w as u}from"../chunks/index.c0aea24a.js";import{T as ft}from"../chunks/Tip.31005f7d.js";import{C as y}from"../chunks/CodeBlock.e814ab8d.js";import{H as ge,E as Dt}from"../chunks/index.89e522f3.js";function Kt(j){let i,$="Video support is experimental and is subject to change.";return{c(){i=d("p"),i.textContent=$},l(p){i=o(p,"P",{"data-svelte-h":!0}),g(i)!=="svelte-kf2us"&&(i.textContent=$)},m(p,M){a(p,i,M)},p:ut,d(p){p&&s(i)}}}function At(j){let i,$='To work with video datasets, you need to have the <code>torchvision</code> and <code>av</code> packages installed. Check out the <a href="https://github.com/pytorch/vision#installation" rel="nofollow">installation</a> guide to learn how to install them.';return{c(){i=d("p"),i.innerHTML=$},l(p){i=o(p,"P",{"data-svelte-h":!0}),g(i)!=="svelte-iof8ok"&&(i.innerHTML=$)},m(p,M){a(p,i,M)},p:ut,d(p){p&&s(i)}}}function Ot(j){let i,$="Index into an video dataset using the row index first and then the <code>video</code> column - <code>dataset[0][&quot;video&quot;]</code> - to avoid creating all the video objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.";return{c(){i=d("p"),i.innerHTML=$},l(p){i=o(p,"P",{"data-svelte-h":!0}),g(i)!=="svelte-114ean2"&&(i.innerHTML=$)},m(p,M){a(p,i,M)},p:ut,d(p){p&&s(i)}}}function es(j){let i,$='For more information about creating your own <code>VideoFolder</code> dataset, take a look at the <a href="./video_dataset">Create a video dataset</a> guide.';return{c(){i=d("p"),i.innerHTML=$},l(p){i=o(p,"P",{"data-svelte-h":!0}),g(i)!=="svelte-1gne14u"&&(i.innerHTML=$)},m(p,M){a(p,i,M)},p:ut,d(p){p&&s(i)}}}function ts(j){let i,$,p,M,J,ye,b,Me,U,gt='Video datasets have <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Video">Video</a> type columns, which contain <code>torchvision</code> objects.',je,v,be,Z,$t="When you load an video dataset and call the video column, the videos are decoded as <code>torchvision</code> Videos:",ve,R,Te,T,we,G,yt='For a guide on how to load any type of dataset, take a look at the <a class="underline decoration-sky-400 decoration-2 font-semibold" href="./loading">general loading guide</a>.',Je,_,Ue,C,Mt="Access frames directly from a video using the <code>VideoReader</code> using <code>next()</code>:",Ze,k,Re,V,jt="To get multiple frames at once, you need to iterate on the <code>VideoReader</code>. This is the efficient way to obtain a long list of frames:",Ge,F,_e,x,bt="There is also <code>.seek()</code> if you need to set the current timestamp of the video:",Ce,I,ke,X,Ve,W,vt='You can load a dataset from the video path. Use the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Dataset.cast_column">cast_column()</a> function to accept a column of video file paths, and decode it into a <code>torchvision</code> video with the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Video">Video</a> feature:',Fe,q,xe,Y,Tt='If you only want to load the underlying path to the video dataset without decoding the video object, set <code>decode=False</code> in the <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.Video">Video</a> feature:',Ie,H,Xe,z,We,N,wt="You can also load a dataset with an <code>VideoFolder</code> dataset builder which does not require writing a custom dataloader. This makes <code>VideoFolder</code> ideal for quickly creating and loading video datasets with several thousand videos for different vision tasks. Your video dataset structure should look like this:",qe,L,Ye,B,Jt='If the dataset follows the <code>VideoFolder</code> structure, then you can load it directly with <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a>:',He,Q,ze,E,Ut='For local datasets, this is equivalent to passing <code>videofolder</code> manually in <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a> and the directory in <code>data_dir</code>:',Ne,S,Le,P,Zt="Then you can access the videos as <code>torchvision.io.video_reader.VideoReader</code> objects:",Be,D,Qe,K,Rt='To ignore the information in the metadata file, set <code>drop_metadata=True</code> in <a href="/docs/datasets/v3.6.0/en/package_reference/loading_methods#datasets.load_dataset">load_dataset()</a>:',Ee,A,Se,O,Gt=`If you don’t have a metadata file, <code>VideoFolder</code> automatically infers the label name from the directory name.
If you want to drop automatically created labels, set <code>drop_labels=True</code>.
In this case, your dataset will only contain an video column:`,Pe,ee,De,te,_t="Finally the <code>filters</code> argument lets you load only a subset of the dataset, based on a condition on the label or the metadata. This is especially useful if the metadata is in Parquet format, since this format enables fast filtering. It is also recommended to use this argument with <code>streaming=True</code>, because by default the dataset is fully downloaded before filtering.",Ke,se,Ae,w,Oe,ae,et,le,Ct=`The <a href="https://github.com/webdataset/webdataset" rel="nofollow">WebDataset</a> format is based on a folder of TAR archives and is suitable for big video datasets.
Because of their size, WebDatasets are generally loaded in streaming mode (using <code>streaming=True</code>).`,tt,ne,kt="You can load a WebDataset like this:",st,ie,at,pe,lt,de,Vt=`By default, videos are decoded sequentially as torchvision <code>VideoReaders</code> when you iterate on a dataset.
It sequentially decodes the metadata of the videos, and doesn’t read the video frames until you access them.`,nt,oe,Ft="However it is possible to speed up the dataset significantly using multithreaded decoding:",it,re,pt,me,xt=`You can enable multithreading using <code>num_threads</code>. This is especially useful to speed up remote data streaming.
However it can be slower than <code>num_threads=0</code> for local data on fast disks.`,dt,ce,It="If you are not interested in the videos decoded as torchvision <code>VideoReaders</code> and would like to access the path/bytes instead, you can disable decoding:",ot,he,rt,fe,Xt='Note: <a href="/docs/datasets/v3.6.0/en/package_reference/main_classes#datasets.IterableDataset.decode">IterableDataset.decode()</a> is only available for streaming datasets at the moment.',mt,ue,ct,$e,ht;return J=new ge({props:{title:"Load video data",local:"load-video-data",headingTag:"h1"}}),b=new ft({props:{warning:!0,$$slots:{default:[Kt]},$$scope:{ctx:j}}}),v=new ft({props:{$$slots:{default:[At]},$$scope:{ctx:j}}}),R=new y({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTJDJTIwVmlkZW8lMEElMEFkYXRhc2V0JTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMnBhdGglMkZ0byUyRnZpZGVvJTJGZm9sZGVyJTIyJTJDJTIwc3BsaXQlM0QlMjJ0cmFpbiUyMiklMEFkYXRhc2V0JTVCMCU1RCU1QiUyMnZpZGVvJTIyJTVE",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Video

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/video/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;video&quot;</span>]
&lt;torchvision.io.video_reader.VideoReader at <span class="hljs-number">0x1652284c0</span>&gt;`,wrap:!1}}),T=new ft({props:{warning:!0,$$slots:{default:[Ot]},$$scope:{ctx:j}}}),_=new ge({props:{title:"Read frames",local:"read-frames",headingTag:"h2"}}),k=new y({props:{code:"dmlkZW8lMjAlM0QlMjBkYXRhc2V0JTVCMCU1RCU1QiUyMnZpZGVvJTIyJTVEJTBBZmlyc3RfZnJhbWUlMjAlM0QlMjBuZXh0KHZpZGVvKSUwQWZpcnN0X2ZyYW1lJTVCJTIyZGF0YSUyMiU1RC5zaGFwZSUwQWZpcnN0X2ZyYW1lJTVCJTIycHRzJTIyJTVEJTIwJTIwJTIzJTIwdGltZXN0YW1w",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>video = dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;video&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>first_frame = <span class="hljs-built_in">next</span>(video)
<span class="hljs-meta">&gt;&gt;&gt; </span>first_frame[<span class="hljs-string">&quot;data&quot;</span>].shape
(<span class="hljs-number">3</span>, <span class="hljs-number">240</span>, <span class="hljs-number">320</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>first_frame[<span class="hljs-string">&quot;pts&quot;</span>]  <span class="hljs-comment"># timestamp</span>
<span class="hljs-number">0.0</span>`,wrap:!1}}),F=new y({props:{code:"aW1wb3J0JTIwdG9yY2glMEFpbXBvcnQlMjBpdGVydG9vbHMlMEFmcmFtZXMlMjAlM0QlMjB0b3JjaC5zdGFjayglNUJmcmFtZSU1QiUyMmRhdGElMjIlNUQlMjBmb3IlMjBmcmFtZSUyMGluJTIwaXNsaWNlKHZpZGVvJTJDJTIwNSklNUQpJTBBZnJhbWVzLnNoYXBl",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> itertools
<span class="hljs-meta">&gt;&gt;&gt; </span>frames = torch.stack([frame[<span class="hljs-string">&quot;data&quot;</span>] <span class="hljs-keyword">for</span> frame <span class="hljs-keyword">in</span> islice(video, <span class="hljs-number">5</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>frames.shape
(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">240</span>, <span class="hljs-number">320</span>)`,wrap:!1}}),I=new y({props:{code:"dmlkZW8uZ2V0X21ldGFkYXRhKCklMEF2aWRlbyUyMCUzRCUyMHZpZGVvLnNlZWsoOC4wJTJDJTIwa2V5ZnJhbWVzX29ubHklM0RUcnVlKSUwQWZyYW1lJTIwJTNEJTIwbmV4dCh2aWRlbyklMEFmaXJzdF9mcmFtZSU1QiUyMmRhdGElMjIlNUQuc2hhcGU=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>video.get_metadata()
{<span class="hljs-string">&#x27;video&#x27;</span>: {<span class="hljs-string">&#x27;fps&#x27;</span>: [<span class="hljs-number">10.0</span>], <span class="hljs-string">&#x27;duration&#x27;</span>: [<span class="hljs-number">16.1</span>]}}
<span class="hljs-meta">&gt;&gt;&gt; </span>video = video.seek(<span class="hljs-number">8.0</span>, keyframes_only=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>frame = <span class="hljs-built_in">next</span>(video)
<span class="hljs-meta">&gt;&gt;&gt; </span>first_frame[<span class="hljs-string">&quot;data&quot;</span>].shape
(<span class="hljs-number">3</span>, <span class="hljs-number">240</span>, <span class="hljs-number">320</span>)`,wrap:!1}}),X=new ge({props:{title:"Local files",local:"local-files",headingTag:"h2"}}),q=new y({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwRGF0YXNldCUyQyUyMFZpZGVvJTBBJTBBZGF0YXNldCUyMCUzRCUyMERhdGFzZXQuZnJvbV9kaWN0KCU3QiUyMnZpZGVvJTIyJTNBJTIwJTVCJTIycGF0aCUyRnRvJTJGdmlkZW9fMSUyMiUyQyUyMCUyMnBhdGglMkZ0byUyRnZpZGVvXzIlMjIlMkMlMjAuLi4lMkMlMjAlMjJwYXRoJTJGdG8lMkZ2aWRlb19uJTIyJTVEJTdEKS5jYXN0X2NvbHVtbiglMjJ2aWRlbyUyMiUyQyUyMFZpZGVvKCkpJTBBZGF0YXNldCU1QjAlNUQlNUIlMjJ2aWRlbyUyMiU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, Video

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;video&quot;</span>: [<span class="hljs-string">&quot;path/to/video_1&quot;</span>, <span class="hljs-string">&quot;path/to/video_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/video_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;video&quot;</span>, Video())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;video&quot;</span>]
&lt;torchvision.io.video_reader.VideoReader at <span class="hljs-number">0x1657d0280</span>&gt;`,wrap:!1}}),H=new y({props:{code:"ZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQuY2FzdF9jb2x1bW4oJTIydmlkZW8lMjIlMkMlMjBWaWRlbyhkZWNvZGUlM0RGYWxzZSkpJTBBZGF0YXNldCU1QjAlNUQlNUIlMjJ2aWRlbyUyMiU1RA==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;video&quot;</span>, Video(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;video&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;path/to/video/folder/video0.mp4&#x27;</span>}`,wrap:!1}}),z=new ge({props:{title:"VideoFolder",local:"videofolder",headingTag:"h2"}}),L=new y({props:{code:"Zm9sZGVyJTJGdHJhaW4lMkZkb2clMkZnb2xkZW5fcmV0cmlldmVyLm1wNCUwQWZvbGRlciUyRnRyYWluJTJGZG9nJTJGZ2VybWFuX3NoZXBoZXJkLm1wNCUwQWZvbGRlciUyRnRyYWluJTJGZG9nJTJGY2hpaHVhaHVhLm1wNCUwQSUwQWZvbGRlciUyRnRyYWluJTJGY2F0JTJGbWFpbmVfY29vbi5tcDQlMEFmb2xkZXIlMkZ0cmFpbiUyRmNhdCUyRmJlbmdhbC5tcDQlMEFmb2xkZXIlMkZ0cmFpbiUyRmNhdCUyRmJpcm1hbi5tcDQ=",highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.mp4
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.mp4
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.mp4

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.mp4
folder<span class="hljs-regexp">/train/</span>cat/bengal.mp4
folder<span class="hljs-regexp">/train/</span>cat/birman.mp4`,wrap:!1}}),Q=new y({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJ1c2VybmFtZSUyRmRhdGFzZXRfbmFtZSUyMiklMEElMjMlMjBPUiUyMGxvY2FsbHklM0ElMEFkYXRhc2V0JTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMiUyRnBhdGglMkZ0byUyRmZvbGRlciUyMik=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;username/dataset_name&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># OR locally:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;/path/to/folder&quot;</span>)`,wrap:!1}}),S=new y({props:{code:"ZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJ2aWRlb2ZvbGRlciUyMiUyQyUyMGRhdGFfZGlyJTNEJTIyJTJGcGF0aCUyRnRvJTJGZm9sZGVyJTIyKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;videofolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)',wrap:!1}}),D=new y({props:{code:"ZGF0YXNldCU1QiUyMnRyYWluJTIyJTVEJTVCMCU1RCUwQSUwQWRhdGFzZXQlNUIlMjJ0cmFpbiUyMiU1RCU1Qi0xJTVE",highlighted:`&gt;&gt;&gt; dataset<span class="hljs-selector-attr">[<span class="hljs-string">&quot;train&quot;</span>]</span><span class="hljs-selector-attr">[0]</span>
{<span class="hljs-string">&quot;video&quot;</span>: &lt;torchvision<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.video_reader</span><span class="hljs-selector-class">.VideoReader</span> at <span class="hljs-number">0</span>x161715e50&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}

&gt;&gt;&gt; dataset<span class="hljs-selector-attr">[<span class="hljs-string">&quot;train&quot;</span>]</span><span class="hljs-selector-attr">[-1]</span>
{<span class="hljs-string">&quot;video&quot;</span>: &lt;torchvision<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.video_reader</span><span class="hljs-selector-class">.VideoReader</span> at <span class="hljs-number">0</span>x16170bd90&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}`,wrap:!1}}),A=new y({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJ1c2VybmFtZSUyRmRhdGFzZXRfd2l0aF9tZXRhZGF0YSUyMiUyQyUyMGRyb3BfbWV0YWRhdGElM0RUcnVlKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;username/dataset_with_metadata&quot;</span>, drop_metadata=<span class="hljs-literal">True</span>)`,wrap:!1}}),ee=new y({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJ1c2VybmFtZSUyRmRhdGFzZXRfd2l0aG91dF9tZXRhZGF0YSUyMiUyQyUyMGRyb3BfbGFiZWxzJTNEVHJ1ZSk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;username/dataset_without_metadata&quot;</span>, drop_labels=<span class="hljs-literal">True</span>)`,wrap:!1}}),se=new y({props:{code:"ZmlsdGVycyUyMCUzRCUyMCU1QiglMjJsYWJlbCUyMiUyQyUyMCUyMiUzRCUyMiUyQyUyMDApJTVEJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJ1c2VybmFtZSUyRmRhdGFzZXRfbmFtZSUyMiUyQyUyMHN0cmVhbWluZyUzRFRydWUlMkMlMjBmaWx0ZXJzJTNEZmlsdGVycyk=",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>filters = [(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">0</span>)]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;username/dataset_name&quot;</span>, streaming=<span class="hljs-literal">True</span>, filters=filters)`,wrap:!1}}),w=new ft({props:{$$slots:{default:[es]},$$scope:{ctx:j}}}),ae=new ge({props:{title:"WebDataset",local:"webdataset",headingTag:"h2"}}),ie=new y({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJ3ZWJkYXRhc2V0JTIyJTJDJTIwZGF0YV9kaXIlM0QlMjIlMkZwYXRoJTJGdG8lMkZmb2xkZXIlMjIlMkMlMjBzdHJlYW1pbmclM0RUcnVlKQ==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;webdataset&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, streaming=<span class="hljs-literal">True</span>)`,wrap:!1}}),pe=new ge({props:{title:"Video decoding",local:"video-decoding",headingTag:"h2"}}),re=new y({props:{code:"aW1wb3J0JTIwb3MlMEFudW1fdGhyZWFkcyUyMCUzRCUyMG51bV90aHJlYWRzJTIwJTNEJTIwbWluKDMyJTJDJTIwKG9zLmNwdV9jb3VudCgpJTIwb3IlMjAxKSUyMCUyQiUyMDQpJTBBZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQuZGVjb2RlKG51bV90aHJlYWRzJTNEbnVtX3RocmVhZHMpJTBBZm9yJTIwZXhhbXBsZSUyMGluJTIwZGF0YXNldCUzQSUyMCUyMCUyMyUyMHVwJTIwdG8lMjAyMCUyMHRpbWVzJTIwZmFzdGVyJTIwISUwQSUyMCUyMCUyMCUyMC4uLg==",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os
<span class="hljs-meta">&gt;&gt;&gt; </span>num_threads = num_threads = <span class="hljs-built_in">min</span>(<span class="hljs-number">32</span>, (os.cpu_count() <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>) + <span class="hljs-number">4</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.decode(num_threads=num_threads)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> dataset:  <span class="hljs-comment"># up to 20 times faster !</span>
<span class="hljs-meta">... </span>    ...`,wrap:!1}}),he=new y({props:{code:"ZGF0YXNldCUyMCUzRCUyMGRhdGFzZXQuZGVjb2RlKEZhbHNlKQ==",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.decode(<span class="hljs-literal">False</span>)',wrap:!1}}),ue=new Dt({props:{source:"https://github.com/huggingface/datasets/blob/main/docs/source/video_load.mdx"}}),{c(){i=d("meta"),$=l(),p=d("p"),M=l(),r(J.$$.fragment),ye=l(),r(b.$$.fragment),Me=l(),U=d("p"),U.innerHTML=gt,je=l(),r(v.$$.fragment),be=l(),Z=d("p"),Z.innerHTML=$t,ve=l(),r(R.$$.fragment),Te=l(),r(T.$$.fragment),we=l(),G=d("p"),G.innerHTML=yt,Je=l(),r(_.$$.fragment),Ue=l(),C=d("p"),C.innerHTML=Mt,Ze=l(),r(k.$$.fragment),Re=l(),V=d("p"),V.innerHTML=jt,Ge=l(),r(F.$$.fragment),_e=l(),x=d("p"),x.innerHTML=bt,Ce=l(),r(I.$$.fragment),ke=l(),r(X.$$.fragment),Ve=l(),W=d("p"),W.innerHTML=vt,Fe=l(),r(q.$$.fragment),xe=l(),Y=d("p"),Y.innerHTML=Tt,Ie=l(),r(H.$$.fragment),Xe=l(),r(z.$$.fragment),We=l(),N=d("p"),N.innerHTML=wt,qe=l(),r(L.$$.fragment),Ye=l(),B=d("p"),B.innerHTML=Jt,He=l(),r(Q.$$.fragment),ze=l(),E=d("p"),E.innerHTML=Ut,Ne=l(),r(S.$$.fragment),Le=l(),P=d("p"),P.innerHTML=Zt,Be=l(),r(D.$$.fragment),Qe=l(),K=d("p"),K.innerHTML=Rt,Ee=l(),r(A.$$.fragment),Se=l(),O=d("p"),O.innerHTML=Gt,Pe=l(),r(ee.$$.fragment),De=l(),te=d("p"),te.innerHTML=_t,Ke=l(),r(se.$$.fragment),Ae=l(),r(w.$$.fragment),Oe=l(),r(ae.$$.fragment),et=l(),le=d("p"),le.innerHTML=Ct,tt=l(),ne=d("p"),ne.textContent=kt,st=l(),r(ie.$$.fragment),at=l(),r(pe.$$.fragment),lt=l(),de=d("p"),de.innerHTML=Vt,nt=l(),oe=d("p"),oe.textContent=Ft,it=l(),r(re.$$.fragment),pt=l(),me=d("p"),me.innerHTML=xt,dt=l(),ce=d("p"),ce.innerHTML=It,ot=l(),r(he.$$.fragment),rt=l(),fe=d("p"),fe.innerHTML=Xt,mt=l(),r(ue.$$.fragment),ct=l(),$e=d("p"),this.h()},l(e){const t=St("svelte-u9bgzb",document.head);i=o(t,"META",{name:!0,content:!0}),t.forEach(s),$=n(e),p=o(e,"P",{}),zt(p).forEach(s),M=n(e),m(J.$$.fragment,e),ye=n(e),m(b.$$.fragment,e),Me=n(e),U=o(e,"P",{"data-svelte-h":!0}),g(U)!=="svelte-12ybcf0"&&(U.innerHTML=gt),je=n(e),m(v.$$.fragment,e),be=n(e),Z=o(e,"P",{"data-svelte-h":!0}),g(Z)!=="svelte-1djpxci"&&(Z.innerHTML=$t),ve=n(e),m(R.$$.fragment,e),Te=n(e),m(T.$$.fragment,e),we=n(e),G=o(e,"P",{"data-svelte-h":!0}),g(G)!=="svelte-12zk6g2"&&(G.innerHTML=yt),Je=n(e),m(_.$$.fragment,e),Ue=n(e),C=o(e,"P",{"data-svelte-h":!0}),g(C)!=="svelte-nrlgn7"&&(C.innerHTML=Mt),Ze=n(e),m(k.$$.fragment,e),Re=n(e),V=o(e,"P",{"data-svelte-h":!0}),g(V)!=="svelte-1x2z95l"&&(V.innerHTML=jt),Ge=n(e),m(F.$$.fragment,e),_e=n(e),x=o(e,"P",{"data-svelte-h":!0}),g(x)!=="svelte-s6owpz"&&(x.innerHTML=bt),Ce=n(e),m(I.$$.fragment,e),ke=n(e),m(X.$$.fragment,e),Ve=n(e),W=o(e,"P",{"data-svelte-h":!0}),g(W)!=="svelte-1795dn6"&&(W.innerHTML=vt),Fe=n(e),m(q.$$.fragment,e),xe=n(e),Y=o(e,"P",{"data-svelte-h":!0}),g(Y)!=="svelte-1ih2wi7"&&(Y.innerHTML=Tt),Ie=n(e),m(H.$$.fragment,e),Xe=n(e),m(z.$$.fragment,e),We=n(e),N=o(e,"P",{"data-svelte-h":!0}),g(N)!=="svelte-1m60srx"&&(N.innerHTML=wt),qe=n(e),m(L.$$.fragment,e),Ye=n(e),B=o(e,"P",{"data-svelte-h":!0}),g(B)!=="svelte-1m0icgo"&&(B.innerHTML=Jt),He=n(e),m(Q.$$.fragment,e),ze=n(e),E=o(e,"P",{"data-svelte-h":!0}),g(E)!=="svelte-1e1hp4j"&&(E.innerHTML=Ut),Ne=n(e),m(S.$$.fragment,e),Le=n(e),P=o(e,"P",{"data-svelte-h":!0}),g(P)!=="svelte-wu1whj"&&(P.innerHTML=Zt),Be=n(e),m(D.$$.fragment,e),Qe=n(e),K=o(e,"P",{"data-svelte-h":!0}),g(K)!=="svelte-1xj8y6m"&&(K.innerHTML=Rt),Ee=n(e),m(A.$$.fragment,e),Se=n(e),O=o(e,"P",{"data-svelte-h":!0}),g(O)!=="svelte-19an512"&&(O.innerHTML=Gt),Pe=n(e),m(ee.$$.fragment,e),De=n(e),te=o(e,"P",{"data-svelte-h":!0}),g(te)!=="svelte-1jur300"&&(te.innerHTML=_t),Ke=n(e),m(se.$$.fragment,e),Ae=n(e),m(w.$$.fragment,e),Oe=n(e),m(ae.$$.fragment,e),et=n(e),le=o(e,"P",{"data-svelte-h":!0}),g(le)!=="svelte-irvxkn"&&(le.innerHTML=Ct),tt=n(e),ne=o(e,"P",{"data-svelte-h":!0}),g(ne)!=="svelte-1e5cszd"&&(ne.textContent=kt),st=n(e),m(ie.$$.fragment,e),at=n(e),m(pe.$$.fragment,e),lt=n(e),de=o(e,"P",{"data-svelte-h":!0}),g(de)!=="svelte-1vsuton"&&(de.innerHTML=Vt),nt=n(e),oe=o(e,"P",{"data-svelte-h":!0}),g(oe)!=="svelte-fdii9b"&&(oe.textContent=Ft),it=n(e),m(re.$$.fragment,e),pt=n(e),me=o(e,"P",{"data-svelte-h":!0}),g(me)!=="svelte-1hi5tci"&&(me.innerHTML=xt),dt=n(e),ce=o(e,"P",{"data-svelte-h":!0}),g(ce)!=="svelte-f9jz8m"&&(ce.innerHTML=It),ot=n(e),m(he.$$.fragment,e),rt=n(e),fe=o(e,"P",{"data-svelte-h":!0}),g(fe)!=="svelte-1unz013"&&(fe.innerHTML=Xt),mt=n(e),m(ue.$$.fragment,e),ct=n(e),$e=o(e,"P",{}),zt($e).forEach(s),this.h()},h(){Nt(i,"name","hf:doc:metadata"),Nt(i,"content",ss)},m(e,t){Pt(document.head,i),a(e,$,t),a(e,p,t),a(e,M,t),c(J,e,t),a(e,ye,t),c(b,e,t),a(e,Me,t),a(e,U,t),a(e,je,t),c(v,e,t),a(e,be,t),a(e,Z,t),a(e,ve,t),c(R,e,t),a(e,Te,t),c(T,e,t),a(e,we,t),a(e,G,t),a(e,Je,t),c(_,e,t),a(e,Ue,t),a(e,C,t),a(e,Ze,t),c(k,e,t),a(e,Re,t),a(e,V,t),a(e,Ge,t),c(F,e,t),a(e,_e,t),a(e,x,t),a(e,Ce,t),c(I,e,t),a(e,ke,t),c(X,e,t),a(e,Ve,t),a(e,W,t),a(e,Fe,t),c(q,e,t),a(e,xe,t),a(e,Y,t),a(e,Ie,t),c(H,e,t),a(e,Xe,t),c(z,e,t),a(e,We,t),a(e,N,t),a(e,qe,t),c(L,e,t),a(e,Ye,t),a(e,B,t),a(e,He,t),c(Q,e,t),a(e,ze,t),a(e,E,t),a(e,Ne,t),c(S,e,t),a(e,Le,t),a(e,P,t),a(e,Be,t),c(D,e,t),a(e,Qe,t),a(e,K,t),a(e,Ee,t),c(A,e,t),a(e,Se,t),a(e,O,t),a(e,Pe,t),c(ee,e,t),a(e,De,t),a(e,te,t),a(e,Ke,t),c(se,e,t),a(e,Ae,t),c(w,e,t),a(e,Oe,t),c(ae,e,t),a(e,et,t),a(e,le,t),a(e,tt,t),a(e,ne,t),a(e,st,t),c(ie,e,t),a(e,at,t),c(pe,e,t),a(e,lt,t),a(e,de,t),a(e,nt,t),a(e,oe,t),a(e,it,t),c(re,e,t),a(e,pt,t),a(e,me,t),a(e,dt,t),a(e,ce,t),a(e,ot,t),c(he,e,t),a(e,rt,t),a(e,fe,t),a(e,mt,t),c(ue,e,t),a(e,ct,t),a(e,$e,t),ht=!0},p(e,[t]){const Wt={};t&2&&(Wt.$$scope={dirty:t,ctx:e}),b.$set(Wt);const qt={};t&2&&(qt.$$scope={dirty:t,ctx:e}),v.$set(qt);const Yt={};t&2&&(Yt.$$scope={dirty:t,ctx:e}),T.$set(Yt);const Ht={};t&2&&(Ht.$$scope={dirty:t,ctx:e}),w.$set(Ht)},i(e){ht||(h(J.$$.fragment,e),h(b.$$.fragment,e),h(v.$$.fragment,e),h(R.$$.fragment,e),h(T.$$.fragment,e),h(_.$$.fragment,e),h(k.$$.fragment,e),h(F.$$.fragment,e),h(I.$$.fragment,e),h(X.$$.fragment,e),h(q.$$.fragment,e),h(H.$$.fragment,e),h(z.$$.fragment,e),h(L.$$.fragment,e),h(Q.$$.fragment,e),h(S.$$.fragment,e),h(D.$$.fragment,e),h(A.$$.fragment,e),h(ee.$$.fragment,e),h(se.$$.fragment,e),h(w.$$.fragment,e),h(ae.$$.fragment,e),h(ie.$$.fragment,e),h(pe.$$.fragment,e),h(re.$$.fragment,e),h(he.$$.fragment,e),h(ue.$$.fragment,e),ht=!0)},o(e){f(J.$$.fragment,e),f(b.$$.fragment,e),f(v.$$.fragment,e),f(R.$$.fragment,e),f(T.$$.fragment,e),f(_.$$.fragment,e),f(k.$$.fragment,e),f(F.$$.fragment,e),f(I.$$.fragment,e),f(X.$$.fragment,e),f(q.$$.fragment,e),f(H.$$.fragment,e),f(z.$$.fragment,e),f(L.$$.fragment,e),f(Q.$$.fragment,e),f(S.$$.fragment,e),f(D.$$.fragment,e),f(A.$$.fragment,e),f(ee.$$.fragment,e),f(se.$$.fragment,e),f(w.$$.fragment,e),f(ae.$$.fragment,e),f(ie.$$.fragment,e),f(pe.$$.fragment,e),f(re.$$.fragment,e),f(he.$$.fragment,e),f(ue.$$.fragment,e),ht=!1},d(e){e&&(s($),s(p),s(M),s(ye),s(Me),s(U),s(je),s(be),s(Z),s(ve),s(Te),s(we),s(G),s(Je),s(Ue),s(C),s(Ze),s(Re),s(V),s(Ge),s(_e),s(x),s(Ce),s(ke),s(Ve),s(W),s(Fe),s(xe),s(Y),s(Ie),s(Xe),s(We),s(N),s(qe),s(Ye),s(B),s(He),s(ze),s(E),s(Ne),s(Le),s(P),s(Be),s(Qe),s(K),s(Ee),s(Se),s(O),s(Pe),s(De),s(te),s(Ke),s(Ae),s(Oe),s(et),s(le),s(tt),s(ne),s(st),s(at),s(lt),s(de),s(nt),s(oe),s(it),s(pt),s(me),s(dt),s(ce),s(ot),s(rt),s(fe),s(mt),s(ct),s($e)),s(i),u(J,e),u(b,e),u(v,e),u(R,e),u(T,e),u(_,e),u(k,e),u(F,e),u(I,e),u(X,e),u(q,e),u(H,e),u(z,e),u(L,e),u(Q,e),u(S,e),u(D,e),u(A,e),u(ee,e),u(se,e),u(w,e),u(ae,e),u(ie,e),u(pe,e),u(re,e),u(he,e),u(ue,e)}}}const ss='{"title":"Load video data","local":"load-video-data","sections":[{"title":"Read frames","local":"read-frames","sections":[],"depth":2},{"title":"Local files","local":"local-files","sections":[],"depth":2},{"title":"VideoFolder","local":"videofolder","sections":[],"depth":2},{"title":"WebDataset","local":"webdataset","sections":[],"depth":2},{"title":"Video decoding","local":"video-decoding","sections":[],"depth":2}],"depth":1}';function as(j){return Bt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class os extends Qt{constructor(i){super(),Et(this,i,as,ts,Lt,{})}}export{os as component};
