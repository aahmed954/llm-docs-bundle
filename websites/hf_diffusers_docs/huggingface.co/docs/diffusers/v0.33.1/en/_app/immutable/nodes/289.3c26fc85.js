import{s as ts,o as as,n as ls}from"../chunks/scheduler.8c3d61f6.js";import{S as ns,i as is,g as i,s as l,r as m,A as ps,h as p,f as t,c as n,j as ss,u as c,x as o,k as ee,y as os,a,v as u,d as h,t as f,w as d}from"../chunks/index.da70eac4.js";import{T as rs}from"../chunks/Tip.1d9b8c37.js";import{C as M}from"../chunks/CodeBlock.a9c4becf.js";import{D as ms}from"../chunks/DocNotebookDropdown.48852948.js";import{H as Ee,E as cs}from"../chunks/index.5d4ab994.js";function us(se){let r,T="You can optionally save the mesh output as an <code>obj</code> file with the <code>export_to_obj()</code> function. The ability to save the mesh output in a variety of formats makes it more flexible for downstream usage!";return{c(){r=i("p"),r.innerHTML=T},l(y){r=p(y,"P",{"data-svelte-h":!0}),o(r)!=="svelte-1k8cpm8"&&(r.innerHTML=T)},m(y,K){a(y,r,K)},p:ls,d(y){y&&t(r)}}}function hs(se){let r,T,y,K,j,te,U,ae,Z,Xe="Shap-E is a conditional model for generating 3D assets which could be used for video game development, interior design, and architecture. It is trained on a large dataset of 3D assets, and post-processed to render more views of each object and produce 16K instead of 4K point clouds. The Shap-E model is trained in two steps:",le,I,Se="<li>an encoder accepts the point clouds and rendered views of a 3D asset and outputs the parameters of implicit functions that represent the asset</li> <li>a diffusion model is trained on the latents produced by the encoder to generate either neural radiance fields (NeRFs) or a textured 3D mesh, making it easier to render and use the 3D asset in downstream applications</li>",ne,_,Re="This guide will show you how to use Shap-E to start generating your own 3D assets!",ie,v,Ne="Before you begin, make sure you have the following libraries installed:",pe,W,oe,$,re,C,Ve='To generate a gif of a 3D object, pass a text prompt to the <a href="/docs/diffusers/v0.33.1/en/api/pipelines/shap_e#diffusers.ShapEPipeline">ShapEPipeline</a>. The pipeline generates a list of image frames which are used to create the 3D object.',me,B,ce,G,Ye='Ïù¥Ï†ú <a href="/docs/diffusers/v0.33.1/en/api/utilities#diffusers.utils.export_to_gif">export_to_gif()</a> Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï¥ Ïù¥ÎØ∏ÏßÄ ÌîÑÎ†àÏûÑ Î¶¨Ïä§Ìä∏Î•º 3D Ïò§Î∏åÏ†ùÌä∏Ïùò gifÎ°ú Î≥ÄÌôòÌï©ÎãàÎã§.',ue,k,he,g,qe='<div><img class="rounded-xl" src="https://huggingface.co/datasets/hf-internal-testing/diffusers-images/resolve/main/shap_e/firecracker_out.gif"/> <figcaption class="mt-2 text-center text-sm text-gray-500">prompt = &quot;A firecracker&quot;</figcaption></div> <div><img class="rounded-xl" src="https://huggingface.co/datasets/hf-internal-testing/diffusers-images/resolve/main/shap_e/cake_out.gif"/> <figcaption class="mt-2 text-center text-sm text-gray-500">prompt = &quot;A birthday cupcake&quot;</figcaption></div>',fe,x,de,E,Qe='To generate a 3D object from another image, use the <a href="/docs/diffusers/v0.33.1/en/api/pipelines/shap_e#diffusers.ShapEImg2ImgPipeline">ShapEImg2ImgPipeline</a>. You can use an existing image or generate an entirely new one. Let‚Äôs use the <a href="../api/pipelines/kandinsky">Kandinsky 2.1</a> model to generate a new image.',ye,X,Me,S,ze='Pass the cheeseburger to the <a href="/docs/diffusers/v0.33.1/en/api/pipelines/shap_e#diffusers.ShapEImg2ImgPipeline">ShapEImg2ImgPipeline</a> to generate a 3D representation of it.',ge,R,be,b,Fe='<div><img class="rounded-xl" src="https://huggingface.co/datasets/hf-internal-testing/diffusers-images/resolve/main/shap_e/burger_in.png"/> <figcaption class="mt-2 text-center text-sm text-gray-500">cheeseburger</figcaption></div> <div><img class="rounded-xl" src="https://huggingface.co/datasets/hf-internal-testing/diffusers-images/resolve/main/shap_e/burger_out.gif"/> <figcaption class="mt-2 text-center text-sm text-gray-500">3D cheeseburger</figcaption></div>',we,N,Je,V,He='Shap-E is a flexible model that can also generate textured mesh outputs to be rendered for downstream applications. In this example, you‚Äôll convert the output into a <code>glb</code> file because the ü§ó Datasets library supports mesh visualization of <code>glb</code> files which can be rendered by the <a href="https://huggingface.co/docs/hub/datasets-viewer#dataset-preview" rel="nofollow">Dataset viewer</a>.',Te,Y,De='You can generate mesh outputs for both the <a href="/docs/diffusers/v0.33.1/en/api/pipelines/shap_e#diffusers.ShapEPipeline">ShapEPipeline</a> and <a href="/docs/diffusers/v0.33.1/en/api/pipelines/shap_e#diffusers.ShapEImg2ImgPipeline">ShapEImg2ImgPipeline</a> by specifying the <code>output_type</code> parameter as <code>&quot;mesh&quot;</code>:',je,q,Ue,Q,Le="Use the <code>export_to_ply()</code> function to save the mesh output as a <code>ply</code> file:",Ze,w,Ie,z,_e,F,Pe="Then you can convert the <code>ply</code> file to a <code>glb</code> file with the trimesh library:",ve,H,We,D,Ae="By default, the mesh output is focused from the bottom viewpoint but you can change the default viewpoint by applying a rotation transform:",$e,L,Ce,P,Ke="Upload the mesh file to your dataset repository to visualize it with the Dataset viewer!",Be,J,Oe='<img class="rounded-xl" src="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/diffusers/3D-cake.gif"/>',Ge,A,ke,O,xe;return j=new Ee({props:{title:"Shap-E",local:"shap-e",headingTag:"h1"}}),U=new ms({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers_doc/en/shap-e.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers_doc/en/pytorch/shap-e.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers_doc/en/tensorflow/shap-e.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/diffusers_doc/en/shap-e.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/diffusers_doc/en/pytorch/shap-e.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/diffusers_doc/en/tensorflow/shap-e.ipynb"}]}}),W=new M({props:{code:"JTIzJTIwdW5jb21tZW50JTIwdG8lMjBpbnN0YWxsJTIwdGhlJTIwbmVjZXNzYXJ5JTIwbGlicmFyaWVzJTIwaW4lMjBDb2xhYiUwQSUyMyFwaXAlMjBpbnN0YWxsJTIwLXElMjBkaWZmdXNlcnMlMjB0cmFuc2Zvcm1lcnMlMjBhY2NlbGVyYXRlJTIwdHJpbWVzaA==",highlighted:`<span class="hljs-comment"># uncomment to install the necessary libraries in Colab</span>
<span class="hljs-comment">#!pip install -q diffusers transformers accelerate trimesh</span>`,wrap:!1}}),$=new Ee({props:{title:"Text-to-3D",local:"text-to-3d",headingTag:"h2"}}),B=new M({props:{code:"aW1wb3J0JTIwdG9yY2glMEFmcm9tJTIwZGlmZnVzZXJzJTIwaW1wb3J0JTIwU2hhcEVQaXBlbGluZSUwQSUwQWRldmljZSUyMCUzRCUyMHRvcmNoLmRldmljZSglMjJjdWRhJTIyJTIwaWYlMjB0b3JjaC5jdWRhLmlzX2F2YWlsYWJsZSgpJTIwZWxzZSUyMCUyMmNwdSUyMiklMEElMEFwaXBlJTIwJTNEJTIwU2hhcEVQaXBlbGluZS5mcm9tX3ByZXRyYWluZWQoJTIyb3BlbmFpJTJGc2hhcC1lJTIyJTJDJTIwdG9yY2hfZHR5cGUlM0R0b3JjaC5mbG9hdDE2JTJDJTIwdmFyaWFudCUzRCUyMmZwMTYlMjIpJTBBcGlwZSUyMCUzRCUyMHBpcGUudG8oZGV2aWNlKSUwQSUwQWd1aWRhbmNlX3NjYWxlJTIwJTNEJTIwMTUuMCUwQXByb21wdCUyMCUzRCUyMCU1QiUyMkElMjBmaXJlY3JhY2tlciUyMiUyQyUyMCUyMkElMjBiaXJ0aGRheSUyMGN1cGNha2UlMjIlNUQlMEElMEFpbWFnZXMlMjAlM0QlMjBwaXBlKCUwQSUyMCUyMCUyMCUyMHByb21wdCUyQyUwQSUyMCUyMCUyMCUyMGd1aWRhbmNlX3NjYWxlJTNEZ3VpZGFuY2Vfc2NhbGUlMkMlMEElMjAlMjAlMjAlMjBudW1faW5mZXJlbmNlX3N0ZXBzJTNENjQlMkMlMEElMjAlMjAlMjAlMjBmcmFtZV9zaXplJTNEMjU2JTJDJTBBKS5pbWFnZXM=",highlighted:`<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> ShapEPipeline

device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)

pipe = ShapEPipeline.from_pretrained(<span class="hljs-string">&quot;openai/shap-e&quot;</span>, torch_dtype=torch.float16, variant=<span class="hljs-string">&quot;fp16&quot;</span>)
pipe = pipe.to(device)

guidance_scale = <span class="hljs-number">15.0</span>
prompt = [<span class="hljs-string">&quot;A firecracker&quot;</span>, <span class="hljs-string">&quot;A birthday cupcake&quot;</span>]

images = pipe(
    prompt,
    guidance_scale=guidance_scale,
    num_inference_steps=<span class="hljs-number">64</span>,
    frame_size=<span class="hljs-number">256</span>,
).images`,wrap:!1}}),k=new M({props:{code:"ZnJvbSUyMGRpZmZ1c2Vycy51dGlscyUyMGltcG9ydCUyMGV4cG9ydF90b19naWYlMEElMEFleHBvcnRfdG9fZ2lmKGltYWdlcyU1QjAlNUQlMkMlMjAlMjJmaXJlY3JhY2tlcl8zZC5naWYlMjIpJTBBZXhwb3J0X3RvX2dpZihpbWFnZXMlNUIxJTVEJTJDJTIwJTIyY2FrZV8zZC5naWYlMjIp",highlighted:`<span class="hljs-keyword">from</span> diffusers.utils <span class="hljs-keyword">import</span> export_to_gif

export_to_gif(images[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;firecracker_3d.gif&quot;</span>)
export_to_gif(images[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;cake_3d.gif&quot;</span>)`,wrap:!1}}),x=new Ee({props:{title:"Image-to-3D",local:"image-to-3d",headingTag:"h2"}}),X=new M({props:{code:"ZnJvbSUyMGRpZmZ1c2VycyUyMGltcG9ydCUyMERpZmZ1c2lvblBpcGVsaW5lJTBBaW1wb3J0JTIwdG9yY2glMEElMEFwcmlvcl9waXBlbGluZSUyMCUzRCUyMERpZmZ1c2lvblBpcGVsaW5lLmZyb21fcHJldHJhaW5lZCglMjJrYW5kaW5za3ktY29tbXVuaXR5JTJGa2FuZGluc2t5LTItMS1wcmlvciUyMiUyQyUyMHRvcmNoX2R0eXBlJTNEdG9yY2guZmxvYXQxNiUyQyUyMHVzZV9zYWZldGVuc29ycyUzRFRydWUpLnRvKCUyMmN1ZGElMjIpJTBBcGlwZWxpbmUlMjAlM0QlMjBEaWZmdXNpb25QaXBlbGluZS5mcm9tX3ByZXRyYWluZWQoJTIya2FuZGluc2t5LWNvbW11bml0eSUyRmthbmRpbnNreS0yLTElMjIlMkMlMjB0b3JjaF9kdHlwZSUzRHRvcmNoLmZsb2F0MTYlMkMlMjB1c2Vfc2FmZXRlbnNvcnMlM0RUcnVlKS50byglMjJjdWRhJTIyKSUwQSUwQXByb21wdCUyMCUzRCUyMCUyMkElMjBjaGVlc2VidXJnZXIlMkMlMjB3aGl0ZSUyMGJhY2tncm91bmQlMjIlMEElMEFpbWFnZV9lbWJlZHMlMkMlMjBuZWdhdGl2ZV9pbWFnZV9lbWJlZHMlMjAlM0QlMjBwcmlvcl9waXBlbGluZShwcm9tcHQlMkMlMjBndWlkYW5jZV9zY2FsZSUzRDEuMCkudG9fdHVwbGUoKSUwQWltYWdlJTIwJTNEJTIwcGlwZWxpbmUoJTBBJTIwJTIwJTIwJTIwcHJvbXB0JTJDJTBBJTIwJTIwJTIwJTIwaW1hZ2VfZW1iZWRzJTNEaW1hZ2VfZW1iZWRzJTJDJTBBJTIwJTIwJTIwJTIwbmVnYXRpdmVfaW1hZ2VfZW1iZWRzJTNEbmVnYXRpdmVfaW1hZ2VfZW1iZWRzJTJDJTBBKS5pbWFnZXMlNUIwJTVEJTBBJTBBaW1hZ2Uuc2F2ZSglMjJidXJnZXIucG5nJTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DiffusionPipeline
<span class="hljs-keyword">import</span> torch

prior_pipeline = DiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;kandinsky-community/kandinsky-2-1-prior&quot;</span>, torch_dtype=torch.float16, use_safetensors=<span class="hljs-literal">True</span>).to(<span class="hljs-string">&quot;cuda&quot;</span>)
pipeline = DiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;kandinsky-community/kandinsky-2-1&quot;</span>, torch_dtype=torch.float16, use_safetensors=<span class="hljs-literal">True</span>).to(<span class="hljs-string">&quot;cuda&quot;</span>)

prompt = <span class="hljs-string">&quot;A cheeseburger, white background&quot;</span>

image_embeds, negative_image_embeds = prior_pipeline(prompt, guidance_scale=<span class="hljs-number">1.0</span>).to_tuple()
image = pipeline(
    prompt,
    image_embeds=image_embeds,
    negative_image_embeds=negative_image_embeds,
).images[<span class="hljs-number">0</span>]

image.save(<span class="hljs-string">&quot;burger.png&quot;</span>)`,wrap:!1}}),R=new M({props:{code:"ZnJvbSUyMFBJTCUyMGltcG9ydCUyMEltYWdlJTBBZnJvbSUyMGRpZmZ1c2VycyUyMGltcG9ydCUyMFNoYXBFSW1nMkltZ1BpcGVsaW5lJTBBZnJvbSUyMGRpZmZ1c2Vycy51dGlscyUyMGltcG9ydCUyMGV4cG9ydF90b19naWYlMEElMEFwaXBlJTIwJTNEJTIwU2hhcEVJbWcySW1nUGlwZWxpbmUuZnJvbV9wcmV0cmFpbmVkKCUyMm9wZW5haSUyRnNoYXAtZS1pbWcyaW1nJTIyJTJDJTIwdG9yY2hfZHR5cGUlM0R0b3JjaC5mbG9hdDE2JTJDJTIwdmFyaWFudCUzRCUyMmZwMTYlMjIpLnRvKCUyMmN1ZGElMjIpJTBBJTBBZ3VpZGFuY2Vfc2NhbGUlMjAlM0QlMjAzLjAlMEFpbWFnZSUyMCUzRCUyMEltYWdlLm9wZW4oJTIyYnVyZ2VyLnBuZyUyMikucmVzaXplKCgyNTYlMkMlMjAyNTYpKSUwQSUwQWltYWdlcyUyMCUzRCUyMHBpcGUoJTBBJTIwJTIwJTIwJTIwaW1hZ2UlMkMlMEElMjAlMjAlMjAlMjBndWlkYW5jZV9zY2FsZSUzRGd1aWRhbmNlX3NjYWxlJTJDJTBBJTIwJTIwJTIwJTIwbnVtX2luZmVyZW5jZV9zdGVwcyUzRDY0JTJDJTBBJTIwJTIwJTIwJTIwZnJhbWVfc2l6ZSUzRDI1NiUyQyUwQSkuaW1hZ2VzJTBBJTBBZ2lmX3BhdGglMjAlM0QlMjBleHBvcnRfdG9fZ2lmKGltYWdlcyU1QjAlNUQlMkMlMjAlMjJidXJnZXJfM2QuZ2lmJTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> ShapEImg2ImgPipeline
<span class="hljs-keyword">from</span> diffusers.utils <span class="hljs-keyword">import</span> export_to_gif

pipe = ShapEImg2ImgPipeline.from_pretrained(<span class="hljs-string">&quot;openai/shap-e-img2img&quot;</span>, torch_dtype=torch.float16, variant=<span class="hljs-string">&quot;fp16&quot;</span>).to(<span class="hljs-string">&quot;cuda&quot;</span>)

guidance_scale = <span class="hljs-number">3.0</span>
image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;burger.png&quot;</span>).resize((<span class="hljs-number">256</span>, <span class="hljs-number">256</span>))

images = pipe(
    image,
    guidance_scale=guidance_scale,
    num_inference_steps=<span class="hljs-number">64</span>,
    frame_size=<span class="hljs-number">256</span>,
).images

gif_path = export_to_gif(images[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;burger_3d.gif&quot;</span>)`,wrap:!1}}),N=new Ee({props:{title:"Generate mesh",local:"generate-mesh",headingTag:"h2"}}),q=new M({props:{code:"aW1wb3J0JTIwdG9yY2glMEFmcm9tJTIwZGlmZnVzZXJzJTIwaW1wb3J0JTIwU2hhcEVQaXBlbGluZSUwQSUwQWRldmljZSUyMCUzRCUyMHRvcmNoLmRldmljZSglMjJjdWRhJTIyJTIwaWYlMjB0b3JjaC5jdWRhLmlzX2F2YWlsYWJsZSgpJTIwZWxzZSUyMCUyMmNwdSUyMiklMEElMEFwaXBlJTIwJTNEJTIwU2hhcEVQaXBlbGluZS5mcm9tX3ByZXRyYWluZWQoJTIyb3BlbmFpJTJGc2hhcC1lJTIyJTJDJTIwdG9yY2hfZHR5cGUlM0R0b3JjaC5mbG9hdDE2JTJDJTIwdmFyaWFudCUzRCUyMmZwMTYlMjIpJTBBcGlwZSUyMCUzRCUyMHBpcGUudG8oZGV2aWNlKSUwQSUwQWd1aWRhbmNlX3NjYWxlJTIwJTNEJTIwMTUuMCUwQXByb21wdCUyMCUzRCUyMCUyMkElMjBiaXJ0aGRheSUyMGN1cGNha2UlMjIlMEElMEFpbWFnZXMlMjAlM0QlMjBwaXBlKHByb21wdCUyQyUyMGd1aWRhbmNlX3NjYWxlJTNEZ3VpZGFuY2Vfc2NhbGUlMkMlMjBudW1faW5mZXJlbmNlX3N0ZXBzJTNENjQlMkMlMjBmcmFtZV9zaXplJTNEMjU2JTJDJTIwb3V0cHV0X3R5cGUlM0QlMjJtZXNoJTIyKS5pbWFnZXM=",highlighted:`<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> ShapEPipeline

device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)

pipe = ShapEPipeline.from_pretrained(<span class="hljs-string">&quot;openai/shap-e&quot;</span>, torch_dtype=torch.float16, variant=<span class="hljs-string">&quot;fp16&quot;</span>)
pipe = pipe.to(device)

guidance_scale = <span class="hljs-number">15.0</span>
prompt = <span class="hljs-string">&quot;A birthday cupcake&quot;</span>

images = pipe(prompt, guidance_scale=guidance_scale, num_inference_steps=<span class="hljs-number">64</span>, frame_size=<span class="hljs-number">256</span>, output_type=<span class="hljs-string">&quot;mesh&quot;</span>).images`,wrap:!1}}),w=new rs({props:{$$slots:{default:[us]},$$scope:{ctx:se}}}),z=new M({props:{code:"ZnJvbSUyMGRpZmZ1c2Vycy51dGlscyUyMGltcG9ydCUyMGV4cG9ydF90b19wbHklMEElMEFwbHlfcGF0aCUyMCUzRCUyMGV4cG9ydF90b19wbHkoaW1hZ2VzJTVCMCU1RCUyQyUyMCUyMjNkX2Nha2UucGx5JTIyKSUwQXByaW50KGYlMjJTYXZlZCUyMHRvJTIwZm9sZGVyJTNBJTIwJTdCcGx5X3BhdGglN0QlMjIp",highlighted:`<span class="hljs-keyword">from</span> diffusers.utils <span class="hljs-keyword">import</span> export_to_ply

ply_path = export_to_ply(images[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;3d_cake.ply&quot;</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Saved to folder: <span class="hljs-subst">{ply_path}</span>&quot;</span>)`,wrap:!1}}),H=new M({props:{code:"aW1wb3J0JTIwdHJpbWVzaCUwQSUwQW1lc2glMjAlM0QlMjB0cmltZXNoLmxvYWQoJTIyM2RfY2FrZS5wbHklMjIpJTBBbWVzaF9leHBvcnQlMjAlM0QlMjBtZXNoLmV4cG9ydCglMjIzZF9jYWtlLmdsYiUyMiUyQyUyMGZpbGVfdHlwZSUzRCUyMmdsYiUyMik=",highlighted:`<span class="hljs-keyword">import</span> trimesh

mesh = trimesh.load(<span class="hljs-string">&quot;3d_cake.ply&quot;</span>)
mesh_export = mesh.export(<span class="hljs-string">&quot;3d_cake.glb&quot;</span>, file_type=<span class="hljs-string">&quot;glb&quot;</span>)`,wrap:!1}}),L=new M({props:{code:"aW1wb3J0JTIwdHJpbWVzaCUwQWltcG9ydCUyMG51bXB5JTIwYXMlMjBucCUwQSUwQW1lc2glMjAlM0QlMjB0cmltZXNoLmxvYWQoJTIyM2RfY2FrZS5wbHklMjIpJTBBcm90JTIwJTNEJTIwdHJpbWVzaC50cmFuc2Zvcm1hdGlvbnMucm90YXRpb25fbWF0cml4KC1ucC5waSUyMCUyRiUyMDIlMkMlMjAlNUIxJTJDJTIwMCUyQyUyMDAlNUQpJTBBbWVzaCUyMCUzRCUyMG1lc2guYXBwbHlfdHJhbnNmb3JtKHJvdCklMEFtZXNoX2V4cG9ydCUyMCUzRCUyMG1lc2guZXhwb3J0KCUyMjNkX2Nha2UuZ2xiJTIyJTJDJTIwZmlsZV90eXBlJTNEJTIyZ2xiJTIyKQ==",highlighted:`<span class="hljs-keyword">import</span> trimesh
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np

mesh = trimesh.load(<span class="hljs-string">&quot;3d_cake.ply&quot;</span>)
rot = trimesh.transformations.rotation_matrix(-np.pi / <span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])
mesh = mesh.apply_transform(rot)
mesh_export = mesh.export(<span class="hljs-string">&quot;3d_cake.glb&quot;</span>, file_type=<span class="hljs-string">&quot;glb&quot;</span>)`,wrap:!1}}),A=new cs({props:{source:"https://github.com/huggingface/diffusers/blob/main/docs/source/en/using-diffusers/shap-e.md"}}),{c(){r=i("meta"),T=l(),y=i("p"),K=l(),m(j.$$.fragment),te=l(),m(U.$$.fragment),ae=l(),Z=i("p"),Z.textContent=Xe,le=l(),I=i("ol"),I.innerHTML=Se,ne=l(),_=i("p"),_.textContent=Re,ie=l(),v=i("p"),v.textContent=Ne,pe=l(),m(W.$$.fragment),oe=l(),m($.$$.fragment),re=l(),C=i("p"),C.innerHTML=Ve,me=l(),m(B.$$.fragment),ce=l(),G=i("p"),G.innerHTML=Ye,ue=l(),m(k.$$.fragment),he=l(),g=i("div"),g.innerHTML=qe,fe=l(),m(x.$$.fragment),de=l(),E=i("p"),E.innerHTML=Qe,ye=l(),m(X.$$.fragment),Me=l(),S=i("p"),S.innerHTML=ze,ge=l(),m(R.$$.fragment),be=l(),b=i("div"),b.innerHTML=Fe,we=l(),m(N.$$.fragment),Je=l(),V=i("p"),V.innerHTML=He,Te=l(),Y=i("p"),Y.innerHTML=De,je=l(),m(q.$$.fragment),Ue=l(),Q=i("p"),Q.innerHTML=Le,Ze=l(),m(w.$$.fragment),Ie=l(),m(z.$$.fragment),_e=l(),F=i("p"),F.innerHTML=Pe,ve=l(),m(H.$$.fragment),We=l(),D=i("p"),D.textContent=Ae,$e=l(),m(L.$$.fragment),Ce=l(),P=i("p"),P.textContent=Ke,Be=l(),J=i("div"),J.innerHTML=Oe,Ge=l(),m(A.$$.fragment),ke=l(),O=i("p"),this.h()},l(e){const s=ps("svelte-u9bgzb",document.head);r=p(s,"META",{name:!0,content:!0}),s.forEach(t),T=n(e),y=p(e,"P",{}),ss(y).forEach(t),K=n(e),c(j.$$.fragment,e),te=n(e),c(U.$$.fragment,e),ae=n(e),Z=p(e,"P",{"data-svelte-h":!0}),o(Z)!=="svelte-1t7c2id"&&(Z.textContent=Xe),le=n(e),I=p(e,"OL",{"data-svelte-h":!0}),o(I)!=="svelte-ux9ywu"&&(I.innerHTML=Se),ne=n(e),_=p(e,"P",{"data-svelte-h":!0}),o(_)!=="svelte-1pve02t"&&(_.textContent=Re),ie=n(e),v=p(e,"P",{"data-svelte-h":!0}),o(v)!=="svelte-cwruts"&&(v.textContent=Ne),pe=n(e),c(W.$$.fragment,e),oe=n(e),c($.$$.fragment,e),re=n(e),C=p(e,"P",{"data-svelte-h":!0}),o(C)!=="svelte-1ffsrst"&&(C.innerHTML=Ve),me=n(e),c(B.$$.fragment,e),ce=n(e),G=p(e,"P",{"data-svelte-h":!0}),o(G)!=="svelte-umtsgh"&&(G.innerHTML=Ye),ue=n(e),c(k.$$.fragment,e),he=n(e),g=p(e,"DIV",{class:!0,"data-svelte-h":!0}),o(g)!=="svelte-1lcwzvo"&&(g.innerHTML=qe),fe=n(e),c(x.$$.fragment,e),de=n(e),E=p(e,"P",{"data-svelte-h":!0}),o(E)!=="svelte-1nub53q"&&(E.innerHTML=Qe),ye=n(e),c(X.$$.fragment,e),Me=n(e),S=p(e,"P",{"data-svelte-h":!0}),o(S)!=="svelte-18k68hi"&&(S.innerHTML=ze),ge=n(e),c(R.$$.fragment,e),be=n(e),b=p(e,"DIV",{class:!0,"data-svelte-h":!0}),o(b)!=="svelte-xd6lpk"&&(b.innerHTML=Fe),we=n(e),c(N.$$.fragment,e),Je=n(e),V=p(e,"P",{"data-svelte-h":!0}),o(V)!=="svelte-b3two7"&&(V.innerHTML=He),Te=n(e),Y=p(e,"P",{"data-svelte-h":!0}),o(Y)!=="svelte-mqreza"&&(Y.innerHTML=De),je=n(e),c(q.$$.fragment,e),Ue=n(e),Q=p(e,"P",{"data-svelte-h":!0}),o(Q)!=="svelte-1c35t88"&&(Q.innerHTML=Le),Ze=n(e),c(w.$$.fragment,e),Ie=n(e),c(z.$$.fragment,e),_e=n(e),F=p(e,"P",{"data-svelte-h":!0}),o(F)!=="svelte-15r1kyy"&&(F.innerHTML=Pe),ve=n(e),c(H.$$.fragment,e),We=n(e),D=p(e,"P",{"data-svelte-h":!0}),o(D)!=="svelte-14frru"&&(D.textContent=Ae),$e=n(e),c(L.$$.fragment,e),Ce=n(e),P=p(e,"P",{"data-svelte-h":!0}),o(P)!=="svelte-1dqio5f"&&(P.textContent=Ke),Be=n(e),J=p(e,"DIV",{class:!0,"data-svelte-h":!0}),o(J)!=="svelte-1dmju3n"&&(J.innerHTML=Oe),Ge=n(e),c(A.$$.fragment,e),ke=n(e),O=p(e,"P",{}),ss(O).forEach(t),this.h()},h(){ee(r,"name","hf:doc:metadata"),ee(r,"content",fs),ee(g,"class","flex gap-4"),ee(b,"class","flex gap-4"),ee(J,"class","flex justify-center")},m(e,s){os(document.head,r),a(e,T,s),a(e,y,s),a(e,K,s),u(j,e,s),a(e,te,s),u(U,e,s),a(e,ae,s),a(e,Z,s),a(e,le,s),a(e,I,s),a(e,ne,s),a(e,_,s),a(e,ie,s),a(e,v,s),a(e,pe,s),u(W,e,s),a(e,oe,s),u($,e,s),a(e,re,s),a(e,C,s),a(e,me,s),u(B,e,s),a(e,ce,s),a(e,G,s),a(e,ue,s),u(k,e,s),a(e,he,s),a(e,g,s),a(e,fe,s),u(x,e,s),a(e,de,s),a(e,E,s),a(e,ye,s),u(X,e,s),a(e,Me,s),a(e,S,s),a(e,ge,s),u(R,e,s),a(e,be,s),a(e,b,s),a(e,we,s),u(N,e,s),a(e,Je,s),a(e,V,s),a(e,Te,s),a(e,Y,s),a(e,je,s),u(q,e,s),a(e,Ue,s),a(e,Q,s),a(e,Ze,s),u(w,e,s),a(e,Ie,s),u(z,e,s),a(e,_e,s),a(e,F,s),a(e,ve,s),u(H,e,s),a(e,We,s),a(e,D,s),a(e,$e,s),u(L,e,s),a(e,Ce,s),a(e,P,s),a(e,Be,s),a(e,J,s),a(e,Ge,s),u(A,e,s),a(e,ke,s),a(e,O,s),xe=!0},p(e,[s]){const es={};s&2&&(es.$$scope={dirty:s,ctx:e}),w.$set(es)},i(e){xe||(h(j.$$.fragment,e),h(U.$$.fragment,e),h(W.$$.fragment,e),h($.$$.fragment,e),h(B.$$.fragment,e),h(k.$$.fragment,e),h(x.$$.fragment,e),h(X.$$.fragment,e),h(R.$$.fragment,e),h(N.$$.fragment,e),h(q.$$.fragment,e),h(w.$$.fragment,e),h(z.$$.fragment,e),h(H.$$.fragment,e),h(L.$$.fragment,e),h(A.$$.fragment,e),xe=!0)},o(e){f(j.$$.fragment,e),f(U.$$.fragment,e),f(W.$$.fragment,e),f($.$$.fragment,e),f(B.$$.fragment,e),f(k.$$.fragment,e),f(x.$$.fragment,e),f(X.$$.fragment,e),f(R.$$.fragment,e),f(N.$$.fragment,e),f(q.$$.fragment,e),f(w.$$.fragment,e),f(z.$$.fragment,e),f(H.$$.fragment,e),f(L.$$.fragment,e),f(A.$$.fragment,e),xe=!1},d(e){e&&(t(T),t(y),t(K),t(te),t(ae),t(Z),t(le),t(I),t(ne),t(_),t(ie),t(v),t(pe),t(oe),t(re),t(C),t(me),t(ce),t(G),t(ue),t(he),t(g),t(fe),t(de),t(E),t(ye),t(Me),t(S),t(ge),t(be),t(b),t(we),t(Je),t(V),t(Te),t(Y),t(je),t(Ue),t(Q),t(Ze),t(Ie),t(_e),t(F),t(ve),t(We),t(D),t($e),t(Ce),t(P),t(Be),t(J),t(Ge),t(ke),t(O)),t(r),d(j,e),d(U,e),d(W,e),d($,e),d(B,e),d(k,e),d(x,e),d(X,e),d(R,e),d(N,e),d(q,e),d(w,e),d(z,e),d(H,e),d(L,e),d(A,e)}}}const fs='{"title":"Shap-E","local":"shap-e","sections":[{"title":"Text-to-3D","local":"text-to-3d","sections":[],"depth":2},{"title":"Image-to-3D","local":"image-to-3d","sections":[],"depth":2},{"title":"Generate mesh","local":"generate-mesh","sections":[],"depth":2}],"depth":1}';function ds(se){return as(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ts extends ns{constructor(r){super(),is(this,r,ds,hs,ts,{})}}export{Ts as component};
